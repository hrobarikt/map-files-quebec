{"version":3,"sources":["webpack://__TECTONIC__$servicenow_now_record_list_connected/webpack/bootstrap","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/constants.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"isEmpty\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__$servicenow_ui_renderer_snabbdom\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"get\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/utils/logger.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__$servicenow_now_record_list\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__$servicenow_ui_core\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./node_modules/@servicenow/now-toggle/node_modules/@servicenow/ui-core/lib/constants.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/listUtils.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__sn_user_preferences\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__$devsnc_sn_list_commons\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/dataProviders/list/listDataProvider.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__$servicenow_now_alert\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/actions/index.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/utils/featureFlags.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/list.scss?89ed","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__sn_translate\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"isUndefined\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__$servicenow_ui_effect_graphql\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/listModel.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"has\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__sn_glide_query_19_4_9\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/listModifierUtils.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__$servicenow_ui_metrics\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"isEqual\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/index.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/recordListConnected.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/actions/listCascadeDeleteActions.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/schemas/cascadeDelete.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/actions/listComponentActions.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/services/listActionsService.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"padStart\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/utils/columnFilteringHelper.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"merge\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"compact\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"isString\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"set\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/listReducers.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"castArray\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"cloneDeep\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__cuid_2_1_8\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"debounce\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"isArray\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"keyBy\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"toArray\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"uniq\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"without\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/actions/listUibActions.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/actions/listToolbarActions.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__sn_uxpage_presource_18_0_4\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/dataProviders/list/actions.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/services/declarativeActionsDataService.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/services/listDataService.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/external \"__TECTONIC__lodash_4_17_4[\\\"pick\\\"]\"","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/dataProviders/list/actionHandlers/subscriptionActionHandlers.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/utils/presourceGetter.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/schemas/list.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/list.scss","webpack://__TECTONIC__$servicenow_now_record_list_connected/./node_modules/css-loader/lib/css-base.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/recordListConnectedReference.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/recordListConnectedRelated.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/recordListConnectedPicker.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/list/recordListConnectedSnapshot.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/listNavigationClient/listNavigationClient.js","webpack://__TECTONIC__$servicenow_now_record_list_connected/./src/components/listNavigationClient/tinyHelper.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","RECORD_LIST_ROW_CLICKED","RECORD_LIST_SELECTED_COUNT_UPDATED","RECORD_LIST_SELECTED_COUNT_RESET","RECORD_LIST_PAGE_UPDATED","RECORD_LIST_LIMIT_UPDATED","RECORD_LIST_QUERY_UPDATED","RECORD_LIST_SCROLL_UPDATED","RECORD_LIST_DATA_FETCH_REQUESTED","RECORD_LIST_DATA_FETCH_COMPLETED","RECORD_LIST_DATA_FETCH_FAILED","RECORD_LIST_DATA_FETCH_SUCCEEDED","RECORD_LIST_MENU_ITEM_SELECTED","SELECT_ALL_RECORDS","ITEM_SELECTED","CONTENT_UPDATED","SCREEN_STATUS_CHANGED","EXECUTE_UI_ACTION","REFRESH_REQUESTED","LIST_DA_WRAPPED_CLICKED","PREVIEW_RECORD","LIST_UPDATE_PREFERENCES","LIST_UPDATE_PREFERENCES_LAZY","LIST_MENU_CRUD","LIST_USER_PREFERENCE_ROWCOUNT","LIST_USER_PREFERENCE","LIST_USER_PREFERENCE_COL_WIDTH","LIST_UPDATE_COLUMN_WIDTH_USER_PREF","LIST_UPDATE_COLUMNS_RESIZED","LIST_UPDATE_EXPORT_USER_PREF","REFRESH_LIST_MENU","CONNECTED_LIST_EDIT_COLUMNS_REQUESTED","CONNECTED_LIST_DELETE_REQUESTED","CONNECTED_LIST_RENAME_REQUESTED","CONNECTED_LIST_RESET_COLUMN_WIDTH_REQUESTED","CONNECTED_LIST_SAVE_AS_REQUESTED","CONNECTED_LIST_SAVE_REQUESTED","CONNECTED_LIST_VIEW_ALL_CLICKED","CONNECTED_ITEM_SELECTED","CONNECTED_CONTENT_UPDATED","CONNECTED_PREVIEW_RECORD","CONNECTED_DA_WRAPPED_CLICKED","CONNECTED_FORM_EDIT_PREVIEW_RECORD_CLICKED","CONNECTED_REFRESH_REQUESTED","CONNECTED_ADD_NOTIFICATIONS","CONNECTED_LIST_MENU_BUTTON_TOGGLED","CONNECTED_TINY_ID_UPDATED","LIST_MENU_CONNECTED_ITEM_CLICKED","LIST_MENU_CONNECTED_SELECTED_ITEM","SN_LIST_NAVIGATION_UPDATE_REQUESTED","SN_LIST_NAVIGATION_PROPERTY_CHANGED","PAGE_UPDATE","LIMIT_UPDATE","GENERIC_REFRESH_REQUESTED","LIST_RESTORE_DEFAULTS","LIST_DELETE_CONDITION","LIST_REFRESH_REQUESTED","LIST_REFRESH_REQUESTED_INTERNAL","LIST_TIMEAGO_RESET","LIST_SELECT_FROM_DROPDOWN","ALERT_LIST","ITEMS_SET","OPEN_RECORD","DATA_PROVIDER_BOOTSTRAP","DATA_PROVIDER_FETCH_COMPLETED","DATA_PROVIDER_FETCH_SUCCEEDED","DATA_PROVIDER_FETCH_FAILED","DA_DATA_PROVIDER_BOOTSTRAP","FETCH_DA","FETCH_DA_DATA","FETCH_DA_SUCCESS","FETCH_CLEAR_DA_DATA","FETCH_REFERENCELIST_DATA","FETCH_LIST_DATA","FETCH_TINY_LIST_DATA","FETCH_LIST_DATA_ERROR","LIST_DATA_FETCH_COMPLETE","LIST_UPDATE_SORT","LIST_OPEN_GROUP","LIST_ADD_GROUPBY","LIST_REMOVE_GROUPBY","LIST_ID_CHANGED","PREF_GROUP_TOGGLE","PREF_GROUP_TOGGLE_ALL","UPDATE_FETCHING","PARSED_QUERY_SET","ADD_FILTER_COMPARISON","MUTATE_FILTER_COMPARISON","MUTATE_COMPLEX_FILTER_COMPARISON","ADD_COMPLEX_FILTER_COMPARISON","DELETE_COMPLEX_FILTER_COMPARISON","DELETE_FILTER_COMPARISON","LIVE_LIST_SUBSCRIBE","LIVE_LIST_SUBSCRIPTION_STARTED","LIVE_LIST_SUBSCRIPTION_SUCCESS","LIVE_LIST_UNSUBSCRIBE_SUCCESS","LIVE_LIST_SUBSCRIPTION_FAILED","LIVE_LIST_SUCCESS","LIVE_LIST_ITEM_ENTERED","LIVE_LIST_ITEM_CHANGED","LIVE_LIST_ITEM_EXIT","LIVE_LIST_ERROR","LIVE_LIST_QUERY_TEMPLATE_FIELD_TABLE","LIVE_LIST_QUERY_TEMPLATE_FIELD_QUERY","LIVE_LIST_QUERY_TEMPLATE_FIELD_COLUMNS","ASC","DESC","CLEAR","ORDERBYDESC","ORDERBY","KEYWORD_FIELD","NEW_QUERY_DELIMITER","QUERY_DELIMITER","AT_DELIMITER","EQUALS","NOT_EQUALS","ON","OPEN_PAREN","CLOSE_PAREN","SINGLE_QUOTE","COMMA","DATE_COLUMN_NAME","GROUP_BY","CELL_MAX_CHARACTERS","SCROLL_THROTTLE_LIMIT","LIST_LOADER_SIZE_MD","LIST_LOADER_SIZE_LG","SCRIPT_DATE_GENERATE","SCRIPT_CURRENCY_FILTER","NOTON","BETWEEN","AT_OR_BEFORE","ISEMPTY","ISNOTEMPTY","REQUIRES_RANGE","_START","_END","TIME_START","TIME_END","BEFORE","AT_OR_AFTER","AFTER","DATEPART","RELATIVE","ANYTHING","SAMEAS","NSAMEAS","MORETHAN","LESSTHAN","NOT_IN","IN","EMPTYSTRING","DYNAMIC","GLIDE_CURRENCY","NONE","OR","GRID_CELL_MAXCHAR","GLIDE_DATE","GLIDE_DATE_TIME","GLIDE_FX_CURRENCY","GLIDE_RELATED_TAGS","GLIDE_JOURNAL_INPUT","GLIDE_JOURNAL","GLIDE_REFERNCE","GLIDE_LIST","GLIDE_PASSWORD","GLIDE_TAGS","GLIDE_SYS_CLASS","CHOICE","REFERENCE","LIST_PAGE_RESET","EMAIL","DOCUMENT_ID","LIST_LIMIT_UPDATED","LIST_SCROLL_UPDATED","LIST_PAGE_UPDATED","GRID_MODEL_UPDATED","LIST_ROW_CLICK_UPDATED","LIST_QUERY_UPDATED","PROPERTIES_SET","AW_LIST","AW_MY_LIST","GRID_CELL_LIST","MY_LIST_RENAME","MY_LIST_PERSONALIZE","MY_LIST_SAVE","MY_LIST_SAVE_AS","MY_LIST_DELETE","MY_LIST_RESTORE_COLUMNS","LIST_SAVE_AS","LIST_RESTORE_COLUMNS","GRID_CELL_FILTER_OUT","GRID_CELL_SHOW_MATCHING","ADVANCED_VIEW_SET_QUERY","INVALID_ACTION_ITEM","page","LIST_SELECTION_RESET","selectedRecords","exceptedRecords","selectionCount","allRecordsSelected","LIST_TYPE_DEFAULT","LIST_PROP_RESET","GRID_CHECKBOX_TOGGLED","LIST_CHECKBOX_TOGGLED","LIST_SELECTION_COUNT_UPDATED","RECORD_LIST_NOTIFICATION_ADDED","ADD_NOTIFICATIONS","REMOVE_NOTIFICATIONS","CLEAR_NOTIFICATIONS","ADD_LIST_NOTIFICATIONS","IFRAME_DEFAULTS","autoCloseOn","URL_PARAM_LIMIT","EMPTY_PARSED_QUERY","predicates","compound_type","subpredicates","type","has_rlq_conditions","order_by","group_by","LIST_TYPE_GROUPED","LIST_TYPE_REFERENCE","LIST_TYPE_RELATED","LIST_TYPE_PICKER","VIRTUAL_DATA_SOURCE","LIST_TYPE_SNAPSHOT","LIST_TYPE_INTERFACES","ADVANCED_FILTER","QUERY_VARIABLES_LISTS","LIST_TYPES","DEFAULT","RELATED","PICKER","SNAPSHOT","QUERY_CATEGORIES","CHOICE_FILTER","DATE_FILTER","DATE_TIME_FILTER","GENERIC_FILTER","NUMERIC_FILTER","REFERENCE_FILTER","UNSUPPORTED_FILTER","PRESOURCE_PATH","FILTER_TYPE_FLAGS","optionsNotSupported","optionsSupported","dataTypesSupported","TOGGLE_LIST_MENU","LIST_EXPORT_USER_PREFERENCES","EXPORT_DELIVERY_TYPE","EXPORT_ORIENTATION_TYPE","EXPORT_FILE_TYPE","EXPORT_EMAIL","SET_ORIGINAL_CONDITONS","USER_PREFERENCE_NULL_VALUE","OMIT_COUNT","OMIT_COUNT_NEXT_PAGE","COMPONENT_PROPERTY_CHANGED","PRESOURCE_HEADER","PRESOURCE_MODULE","PRESOURCE_WSCONFIGID","PRESOURCE_WSCONFIG_PATH","validDAPresourceTables","USER_PREF_COL_WIDTH","LIST_FEATURE_FLAG_PROPERTY_PREFIX","HIDE_HIGHLIGHTED_VALUES","CASCADE_DELETE_GRAPHQL_POPUP_EFFECT_RESULT","CASCADE_DELETE_GRAPHQL_POPUP_EFFECT","CASCADE_DELETE_GRAPHQL_EFFECT","CASCADE_DELETE_GRAPHQL_EFFECT_RESULT","ALERT_CONSTANTS","freeze","STATUS","CRITICAL","HIGH","MODERATE","WARNING","INFO","POSITIVE","LOW","ACTION","TYPES","DISMISS","ACKNOWLEDGE","OPEN","__TECTONIC__lodash_4_17_4","__TECTONIC__$servicenow_ui_renderer_snabbdom","LOG_STATUS_KEY","LOG_LEVEL_ALL","LOG_LEVEL_DEBUG","LOG_LEVEL_LOG","LOG_LEVEL_INFO","LOG_LEVEL_WARN","LOG_LEVEL_ERROR","Logger","window","enable","logLevel","disable","createLog","_log","level","args","Array","splice","unshift","console","apply","debug","arguments","log","info","warn","error","__TECTONIC__$servicenow_now_record_list","__TECTONIC__$servicenow_ui_core","PACKAGE_NAME","HELPERS_SCHEDULED","HELPERS_DEFER","HELPERS_IMMEDIATE","COMPONENT_INTERNAL_ACTION","SCHEDULE_IMMEDIATELY_DO_NOT_USE_OR_YOU_WILL_BE_IMMEDIATELY_FIRED","ACTION_HANDLED","ACTION_DISPATCHED","STATE_UPDATED","NOW_UI_EVENT","NOW_METRICS_LEVEL_PROP","NOW_METRIC_TYPES_PROP","COMPONENT_MODE_SUSPEND","COMPONENT_MODE_ACTIVE","NOW_MODE_PROP","NOW_MODE_ATTR","NOW_ENABLE_PROPERTY_SETTING_PREVENTION_PROP","NOW_ENABLE_PROPERTY_SETTING_PREVENTION_ATTR","NOW_COMPONENT_NAME_PROP","NOW_COMPONENT_NAME_ATTR","NOW_ID_PROP","NOW_ID_ATTR","NOW_HOIST_PREPEND_TO_PROP","NOW_HOIST_APPEND_TO_PROP","NOW_HOIST_PREPEND_TO_ATTR","NOW_HOIST_APPEND_TO_ATTR","NOW_HOIST_PROP","NOW_HOIST_ATTR","COMPONENT_ACTION_DISPATCHED","COMPONENT_STATE_UPDATED","COMPONENT_TREE_RENDERED","COMPONENT_DOM_TREE_READY","COMPONENT_RENDER_REQUESTED","COMPONENT_PROPERTY_UPDATE_REQUESTED","COMPONENT_DOM_READY","COMPONENT_RENDERED","COMPONENT_BOOTSTRAPPED","COMPONENT_DISCONNECTED","COMPONENT_CONNECTED","ON_BOOTSTRAP_LIFECYCLE","ON_DISCONNECT_LIFECYCLE","ON_CONNECT_LIFECYCLE","PROPERTIES_SET_LIFECYCLE","PROPERTY_SELECTOR_SIGIL","APPEND_TO_META_PROP_NAME","APPEND_TO_PAYLOAD_PROP_NAME","DEFER_ATTRIBUTE","HOIST_FIRST_SCROLL_PARENT","SEISMIC_HOIST_TAG_NAME","HOIST_ATTR","HOIST_APPEND_TO_ATTR","HOIST_APPEND_TO_PROP","COMPONENT_NAME_PROP","COMPONENT_NAME_ATTR","SET_INITIAL_STATE","PARSE_PROP_CONF_KEY","SHOULD_NOT_PROPAGATE","HANDLE_ACTIONS","STORE_UPDATED","ATTRIBUTE_SET","COMPONENT_ID_ATTRIBUTE","DISPATCH_EVENT","LOG","srOnlyLoadingClass","position","width","height","margin","padding","overflow","clip","border","getQuery","getAriaLiveLoadingRegion","listTitle","table","loading","updateState","loadAriaLabel","ariaTitle","translatedFinishedLoading","translatedLoadingAriaLabel","loadedAriaLabel","operation","path","undefined","label","aria-live","style","externalActionService","dispatch","action","payload","optionalDeprecatedActions","JSON","stringify","forEach","deprecatedAction","getPaginationObject","limit","offset","isInputEmpty","input","trim","length","trimString","lengthToTrimTo","substring","getDBViewFeatureFlags","listModel","hideRowSelector","hideQuickEdit","hideDeclarativeActions","isDirtyFormAndBackgroundRefreshRequest","isDirty","field","operator","removeSingleComparisonFromCompound","modifyComparison","glideQuery","comparisonMap","idToModify","nonEmptyChoices","comparison","newComparison","Comparison","getMutateOptions","orderedChoices","modifyId","removeIds","valueToAdd","delimeter","id","isEmpty","empty","nonEmpty","push","keys","toString","removeComparisonsFromCompound","comparisonIds","x","comparisonId","indexAdjustment","getComparisonIndices","predicateIndex","subPredicateIndex","compoundIndex","newComparisonIndex","comparisonIndex","compound","removeSubpredicate","getNewComplexEncodedQuery","orderSelectedChoices","choices","nullIndex","indexOf","sort","getNewGlideQuery","parsedQueryModel","newGlideQuery","GlideQuery","toQueryObject","getQueryCategory","listType","__TECTONIC__sn_user_preferences","__TECTONIC__$devsnc_sn_list_commons","listDataProvider","initialState","fetching","hasFetched","properties","sortBy","sortDescending","transitoryPage","default","selectable","transitoryLimit","groupLimit","listId","model","data","refresh","userPreferenceOrderBy","dataUpdatedTime","actionHandlers","__TECTONIC__$servicenow_now_alert","cascadeDeleteActions","componentActions","daActionns","toolbarActions","getFeatureFlagValue","getFeatureFlagsFromProperties","entries","filter","flag","reduce","prev","sysPropValue","getProperty","result","__TECTONIC__sn_translate","__TECTONIC__$servicenow_ui_effect_graphql","listAttributesMap","getTinyFields","getListModel","listResource","orders","tableMetadata","getTableMetadata","preferenceData","getListPreferenceData","listAttributes","getListAttributes","allColumns","getAllColumnsMap","layoutQuery","getListLayout","tinyUrl","getTinyUrl","tinyFields","getListTitle","getListId","query","getTable","columns","getColumns","map","column","join","curr","getDBViewData","row","dbViewCellData","tableKey","uniqueId","set","Map","getHighlightedData","highlightedValueCellData","showIcon","status","getQueryRowType","rows","currentRow","rowData","className","displayValue","highlightedData","dbViewData","columnName","getQueryRows","isGrouped","queryRows","isChoiceAggregate","aggregateQuery","groupChoiceTable","count","groupKey","groupRows","getGroupedQueryRows","getLayoutQueryField","layoutField","defaultValue","orderByColumn","orderByIsDescending","currColumn","getOrderByForColumn","isSorted","isDescending","filterType","getFilterTypeForColumn","fetchedTableMetadata","isScriptableTable","groupedColumn","groupByDisplayValue","isDBView","transformParsedQuery","listData","encodedParsedQuery","decodedQuery","decodeURIComponent","escape","atob","parse","ex","getParsedQueryModel","parsedQueryResource","conditions","relatedListName","fixedQuery","fixedQueries","split","queryString","createFixedQueryMap","orderBy","column_name","ascending","__TECTONIC__sn_glide_query_19_4_9","createSort","fieldName","deserializeTableConditions","conditionsArr","item","conditionItem","orderSplit","descSplit","stripOrderBy","stripConditions","toQueryString","modifiers","encodedQuery","searchTerm","cond","dir","stripLeadingDelimiters","condition","startsWith","filterBy","part","__TECTONIC__$servicenow_ui_metrics","createCustomElement","renderer","snabbdom","view","state","componentId","actionConfigId","alertList","applyLimit","columnsResized","columnWidths","declarativeActions","highlightContent","isRefList","listMenuOpen","maxCharLimit","maxColumns","menuSelection","nowMetricTypes","originalConditions","panelOpened","panelConfig","selectedListId","userPreferences","wordWrap","workspaceConfigId","cascadeDelete","columnWidthsResetRequested","isWorkspace","liveListUpdates","liveListCount","subscriptionParameters","listHeight","hasAlertList","dbViewFeatureFlags","title","liveLists","items","manageItems","declarative-actions","instance-id","is-ref-list","list-menu-open","list-model","list-type","order-by","parsed-query-model","cascade-delete","workspace-config-id","styles","highlightedValueConfigId","onChange","newValue","oldValue","computed","parseInt","getUserPreference","newVal","oldVal","scrollHandlerThrottle","refreshRequested","timestamp","Date","now","background","loaderDuration","fromButton","declarativeActionsRefreshRequested","updateUserPrefs","preferencesParsed","timeAccessed","tiny","metrics","RENDER_TREE","GQL","HERO_INTERACTIVE","itemSelectedActionSuffix","recordSelectedTable","recordSelectedSysId","recordSelectedQuery","recordSelectedView","daClientActionContract","listCrud","patterns","color","onConnect","host","listComponentRegistry","WeakMap","packageJson","version","onDisconnect","delete","effect","queuedUserPrefUpdates","behaviors","ariaLiveBehavior","userPreferencesBehavior","defaultFeatureFlags","dirtyBehavior","dispatches","createGraphQLEffect","cascadeDeletePopupQuery","variableList","successActionType","errorActionType","props","updateProperties","cascadeContent","stopPropagation","cascadeDeleteQuery","deletedRecords","allRecordsDeleted","alertStatus","alertContent","recordsNotDeleted","getAlertContent","recordsDeleted","content","icon","ListActionsService","actionTypes","updateSort","nextDirection","updateOrderBy","sortUserPrefUpdate","USER_PREF_UPDATE","updatedCondition","prevQuery","updatePrefs","USER_PREF_MULTI_UPDATE","preferences","updatePrefDebounced","normalArgs","mergedPrefs","newArgs","getRecordClickedAction","openRecordHandler","cell","evt","listTable","tableName","isReference","isDocumentId","documentIdReference","elementSysId","dbViewSysId","tableToDispatch","getTableToDispatch","rowToDispatch","rowId","rowDisplayValue","sys_id","getRowToDispatch","sysId","nativeEvent","recordTable","updateNewQueryFilter","newQuery","private","prevPage","checked","totalRecordCount","newSelectedRecords","newExceptedRecords","arrValue","without","concat","prevLimit","limitUserPrefUpdate","dispatchListQueryUpdate","index","dropdownName","context","recordCount","dropdownItem","getOptionItem","coeffects","queuedLiveListUpdates","newProps","omitCountState","refreshLiveListUpdates","seismicActionObject","fromModule","colResizingId","indices","subCompound","Error","preference","newCondition","addConditionToQuery","newParsedQueryModel","compIds","queryWithoutGroupByCondition","removeGroupByCondition","addGroupToQuery","addGroupbyCondition","fq","notificationsToAdd","notifications","currentNotification","message","isHtml","node","document","createElement","innerHTML","from","childNodes","findIndex","child","nodeType","_hasHtml","previousValue","includes","LIST_VIEW_ALL_CLICKED","LIST_RESET_COLUMN_WIDTH_REQUESTED","open","meta","interactive","mark","getInteractionId","shouldRender","_dropdownOptions","queryArray","endsWith","_gridCellDropdown","enabled","selected","showSeparator","_filterByCell","globals","columnMap","columnData","internalType","date","replace","defaultOffset","getTimezoneOffset","setTime","getTime","day","getDate","month","getMonth","getFullYear","_dateToYMD","currency","_getValueBasedOnDataType","_getShowMatchingQuery","_getFilterOutQuery","_trimQueryOfDelimiter","delimiter","substr","acc","currCondition","isCurrentQueryEmpty","trimmedQuery","showMatchingDate","filterOutCurrency","trimConditionsOfDelimiter","filterOutDates","getInternalType","isUnsupportedColumn","isChoiceColumn","isNumericColumn","isDateColumn","isReferenceColumn","nextOrderBy","orderPrefName","orderPrefValue","directionPrefName","directionPrefValue","__TECTONIC__cuid_2_1_8","getComponentName","localName","wrappedClickedEffect","wrappedAction","wrappedPayload","LIST_FORM_EDIT_WRAPPED_CLICKED","LIST_FORM_EDIT_PREVIEW_RECORD_CLICKED","LIST_DA_ACTIONS_CONTRACT_GENERATED","LIST_EDIT_COLUMN_REQUESTED","LIST_DELETE_REQUESTED","LIST_RENAME_REQUESTED","LIST_SAVE_AS_REQUESTED","LIST_SAVE_REQUESTED","__TECTONIC__sn_uxpage_presource_18_0_4","DeclarativeActionsDataService","ListDataService","fetchListEffect","listQueryModel","fetchTinyListEffect","tinyListModel","fetchReferenceListEffect","referenceListModel","dispatchFetchRequested","params","chars","encodedRecord","ignoreDepAsRefQual","ignoreRefQual","hideHighlightedValues","hideLiveList","parentTable","parentRecordSysId","recordSysId","refTableName","searchOperator","serializedChanges","getWorkspaceConfigId","requiredPropsMissingByType","isDeclarativeActionsRequired","declarativeActionPayload","getActionPayload","liveListUnsubscribe","runHighlightedValuesQuery","runQuery","paginationLimit","paginationOffset","disableLiveList","queryCategory","modifier","delay","hideListSharing","getRecordCount","refError","setTimeout","handleLoading","getData","getProperties","sortByCol","sortByDesc","parsedSortByDesc","preferenceOrderBy","accum","sortOrder","columnWidthsUserPref","pref","isOmitCount","layoutQueryCount","nextPageExists","oldHash","newHash","pageMap","hash","finalCount","tinyFieldProps","extractTinyFields","getColumnTemplateString","interceptors","subscriptionActionHandlers","source","parentRecordTable","getVariableList","requiredPropsMissing","subject","requiredProperties","predicate","values","prop","subscriptionQueryString","subscribe","reduceUpdates","liveListUpdate","rowColumns","columnsMap","modelColumn","has","updateValue","updateDisplayValue","hasChange","change","updateLiveListState","prevLiveListCount","results","glideRecordSubscriptionResultsPath","newLiveListUpdates","queuedLiveListUpdate","sysID","groupValue","groupDisplayValue","group","getRow","updateType","size","updates","liveListType","ARIA_LIVE_MESSAGE","defaultColumn","templateVarList","subscriptionStartedActionType","subscriptionSuccessActionType","subscriptionFailedActionType","unsubscribeSuccessActionType","itemEnteredActionType","itemChangedActionType","itemExitedActionType","presourceGetter","presourceDataModel","wsConfigIdResults","presourceWsConfigData","choiceColumnQuery","fragments","includeHighlightedData","groupedRow","singleRow","daData","singleButton","groupedButton","listLayoutQueryFragment","commonQuery","useSourceMap","list","this","cssMapping","btoa","sourceMapping","sourceMap","unescape","encodeURIComponent","sourceURLs","sources","sourceRoot","cssWithMappingToString","mediaQuery","alreadyImportedModules","onBootstrap","referenceFeatureFlags","isParentNewRecord","isParentReadOnly","relatedFeatureFlags","pickerFeatureFlags","snapshotFeatureFlags","updateListIdEffect","tinyUrlId","tinyId","applicationId","schema","listUrlId","setTinySessionKeys","setTinyId","updateTinyId","tinySessionActiveKey","tinySessionIdKey","setTinyIdSession","isActive","sessionStorage","setItem","areSessionKeysEmpty","tinySessionActive","getItem","tinySessionId","tinyProp"],"mappings":"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","file":"now-record-list-connected.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","/**\n * external actions\n */\n\nexport const RECORD_LIST_ROW_CLICKED = 'NOW_RECORD_LIST_CONNECTED#ROW_CLICKED';\nexport const RECORD_LIST_SELECTED_COUNT_UPDATED =\n\t'NOW_RECORD_LIST_CONNECTED#SELECTED_RECORD_COUNT_UPDATED';\nexport const RECORD_LIST_SELECTED_COUNT_RESET =\n\t'RECORD_LIST_SELECTED_COUNT_RESET';\nexport const RECORD_LIST_PAGE_UPDATED =\n\t'NOW_RECORD_LIST_CONNECTED#PAGE_UPDATED';\nexport const RECORD_LIST_LIMIT_UPDATED =\n\t'NOW_RECORD_LIST_CONNECTED#LIMIT_UPDATED';\nexport const RECORD_LIST_QUERY_UPDATED =\n\t'NOW_RECORD_LIST_CONNECTED#QUERY_UPDATED';\nexport const RECORD_LIST_SCROLL_UPDATED =\n\t'NOW_RECORD_LIST_CONNECTED#SCROLL_UPDATED';\nexport const RECORD_LIST_DATA_FETCH_REQUESTED =\n\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_REQUESTED';\nexport const RECORD_LIST_DATA_FETCH_COMPLETED =\n\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_COMPLETED';\nexport const RECORD_LIST_DATA_FETCH_FAILED =\n\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_FAILED';\nexport const RECORD_LIST_DATA_FETCH_SUCCEEDED =\n\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_SUCCEEDED';\nexport const RECORD_LIST_MENU_ITEM_SELECTED =\n\t'NOW_RECORD_LIST_CONNECTED#MENU_ITEM_SELECTED';\n\n//Actions\nexport const SELECT_ALL_RECORDS = 'SELECT_ALL_RECORDS';\nexport const ITEM_SELECTED = 'ITEM_SELECTED';\nexport const CONTENT_UPDATED = 'CONTENT_UPDATED';\nexport const SCREEN_STATUS_CHANGED = 'SCREEN_STATUS_CHANGED';\nexport const EXECUTE_UI_ACTION = 'EXECUTE_UI_ACTION';\nexport const REFRESH_REQUESTED = 'REFRESH_REQUESTED';\nexport const LIST_DA_WRAPPED_CLICKED = 'NOW_RECORD_LIST#DA_WRAPPED_CLICKED';\nexport const PREVIEW_RECORD = 'PREVIEW_RECORD';\nexport const LIST_UPDATE_PREFERENCES = 'LIST_UPDATE_PREFERENCES';\nexport const LIST_UPDATE_PREFERENCES_LAZY = 'LIST_UPDATE_PREFERENCES_LAZY';\nexport const LIST_MENU_CRUD = 'LIST_MENU_CRUD';\nexport const LIST_USER_PREFERENCE_ROWCOUNT = 'rowcount';\nexport const LIST_USER_PREFERENCE = 'workspace.list';\nexport const LIST_USER_PREFERENCE_COL_WIDTH = 'columnWidths';\nexport const LIST_UPDATE_COLUMN_WIDTH_USER_PREF =\n\t'LIST_UPDATE_COLUMN_WIDTH_USER_PREF';\nexport const LIST_UPDATE_COLUMNS_RESIZED = 'LIST_UPDATE_COLUMNS_RESIZED';\nexport const LIST_UPDATE_EXPORT_USER_PREF = 'LIST_UPDATE_EXPORT_USER_PREF';\nexport const REFRESH_LIST_MENU = 'REFRESH_LIST_MENU';\n\n// UIB Actions\nexport const CONNECTED_LIST_EDIT_COLUMNS_REQUESTED =\n\t'NOW_RECORD_LIST_CONNECTED#EDIT_COLUMNS_REQUESTED';\nexport const CONNECTED_LIST_DELETE_REQUESTED =\n\t'NOW_RECORD_LIST_CONNECTED#DELETE_REQUESTED';\nexport const CONNECTED_LIST_RENAME_REQUESTED =\n\t'NOW_RECORD_LIST_CONNECTED#RENAME_REQUESTED';\nexport const CONNECTED_LIST_RESET_COLUMN_WIDTH_REQUESTED =\n\t'NOW_RECORD_LIST_CONNECTED#RESET_COLUMN_WIDTH_REQUESTED';\nexport const CONNECTED_LIST_SAVE_AS_REQUESTED =\n\t'NOW_RECORD_LIST_CONNECTED#SAVE_AS_REQUESTED';\nexport const CONNECTED_LIST_SAVE_REQUESTED =\n\t'NOW_RECORD_LIST_CONNECTED#SAVE_REQUESTED';\nexport const CONNECTED_LIST_VIEW_ALL_CLICKED =\n\t'NOW_RECORD_LIST_CONNECTED#VIEW_ALL_CLICKED';\nexport const CONNECTED_ITEM_SELECTED =\n\t'NOW_RECORD_LIST_CONNECTED#ITEM_SELECTED';\nexport const CONNECTED_CONTENT_UPDATED =\n\t'NOW_RECORD_LIST_CONNECTED#CONTENT_UPDATED';\nexport const CONNECTED_PREVIEW_RECORD =\n\t'NOW_RECORD_LIST_CONNECTED#PREVIEW_RECORD';\nexport const CONNECTED_DA_WRAPPED_CLICKED =\n\t'NOW_RECORD_LIST_CONNECTED#WRAPPED_CLICKED';\nexport const CONNECTED_FORM_EDIT_PREVIEW_RECORD_CLICKED =\n\t'NOW_RECORD_LIST_CONNECTED#FORM_EDIT_PREVIEW_RECORD_CLICKED';\nexport const CONNECTED_REFRESH_REQUESTED =\n\t'NOW_RECORD_LIST_CONNECTED#REFRESH_REQUESTED';\nexport const CONNECTED_ADD_NOTIFICATIONS =\n\t'NOW_RECORD_LIST_CONNECTED#ADD_NOTIFICATIONS';\nexport const CONNECTED_LIST_MENU_BUTTON_TOGGLED =\n\t'NOW_RECORD_LIST_CONNECTED#LIST_MENU_BUTTON_TOGGLED';\nexport const CONNECTED_TINY_ID_UPDATED =\n\t'NOW_RECORD_LIST_CONNECTED#TINY_ID_UPDATED';\nexport const LIST_MENU_CONNECTED_ITEM_CLICKED =\n\t'NOW_RECORD_LIST_MENU_CONNECTED#ITEM_CLICKED';\nexport const LIST_MENU_CONNECTED_SELECTED_ITEM =\n\t'NOW_RECORD_LIST_MENU_CONNECTED#SELECTED_ITEM_UPDATED';\nexport const SN_LIST_NAVIGATION_UPDATE_REQUESTED =\n\t'SN_LIST_NAVIGATION_CLIENT#PARAMS_UPDATE_REQUESTED';\nexport const SN_LIST_NAVIGATION_PROPERTY_CHANGED =\n\t'SN_LIST_NAVIGATION_CLIENT#PROPERTY_CHANGED';\n\n// Actions for pagination\nexport const PAGE_UPDATE = 'NOW_PAGINATION#PAGE_UPDATE';\nexport const LIMIT_UPDATE = 'NOW_PAGINATION#LIMIT_UPDATE';\nexport const GENERIC_REFRESH_REQUESTED = 'REFRESH_REQUESTED';\nexport const LIST_RESTORE_DEFAULTS = 'LIST_RESTORE_DEFAULTS';\nexport const LIST_DELETE_CONDITION = 'LIST_DELETE_CONDITION';\nexport const LIST_REFRESH_REQUESTED = 'LIST_REFRESH_REQUESTED';\nexport const LIST_REFRESH_REQUESTED_INTERNAL =\n\t'LIST_REFRESH_REQUESTED_INTERNAL';\nexport const LIST_TIMEAGO_RESET = 'LIST_TIMEAGO_RESET';\nexport const LIST_SELECT_FROM_DROPDOWN = 'LIST_SELECT_FROM_DROPDOWN';\n\nexport const ALERT_LIST = {\n\tITEMS_SET: 'NOW_ALERT_LIST#ITEMS_SET'\n};\n\nexport const OPEN_RECORD = 'OPEN_RECORD';\n\n// Actions\nexport const DATA_PROVIDER_BOOTSTRAP = 'PROVIDER_BOOTSTRAP';\nexport const DATA_PROVIDER_FETCH_COMPLETED = 'DATA_PROVIDER_FETCH_COMPLETED';\nexport const DATA_PROVIDER_FETCH_SUCCEEDED = 'DATA_PROVIDER_FETCH_SUCCEEDED';\nexport const DATA_PROVIDER_FETCH_FAILED = 'DATA_PROVIDER_FETCH_FAILED';\nexport const DA_DATA_PROVIDER_BOOTSTRAP = 'DA_PROVIDER_BOOTSTRAP';\nexport const FETCH_DA = 'FETCH_DA';\nexport const FETCH_DA_DATA = 'FETCH_DA_DATA';\nexport const FETCH_DA_SUCCESS = 'FETCH_DA_SUCCESS';\nexport const FETCH_CLEAR_DA_DATA = 'FETCH_CLEAR_DA_DATA';\nexport const FETCH_REFERENCELIST_DATA = 'FETCH_REFERENCELIST_DATA';\nexport const FETCH_LIST_DATA = 'FETCH_LIST_DATA';\nexport const FETCH_TINY_LIST_DATA = 'FETCH_TINY_LIST_DATA';\nexport const FETCH_LIST_DATA_ERROR = 'FETCH_LIST_DATA_ERROR';\nexport const LIST_DATA_FETCH_COMPLETE = 'LIST_DATA_FETCH_COMPLETE';\nexport const LIST_UPDATE_SORT = 'LIST_UPDATE_SORT';\nexport const LIST_OPEN_GROUP = 'LIST_OPEN_GROUP';\nexport const LIST_ADD_GROUPBY = 'LIST_ADD_GROUPBY';\nexport const LIST_REMOVE_GROUPBY = 'LIST_REMOVE_GROUPBY';\nexport const LIST_ID_CHANGED = 'LIST_ID_CHANGED';\n\n// Preference Actions\nexport const PREF_GROUP_TOGGLE = 'PREF_GROUP_TOGGLE';\nexport const PREF_GROUP_TOGGLE_ALL = 'PREF_GROUP_TOGGLE_ALL';\n\n// Actions for parsedquerymodel data provider\nexport const UPDATE_FETCHING = 'UPDATE_FETCHING';\nexport const PARSED_QUERY_SET = 'LIST#PARSED_QUERY_SET';\nexport const ADD_FILTER_COMPARISON = 'LIST#ADD_FILTER_COMPARISON';\nexport const MUTATE_FILTER_COMPARISON = 'LIST#MUTATE_FILTER_COMPARISON';\nexport const MUTATE_COMPLEX_FILTER_COMPARISON =\n\t'LIST#MUTATE_COMPLEX_FILTER_COMPARISON';\nexport const ADD_COMPLEX_FILTER_COMPARISON =\n\t'LIST#ADD_COMPLEX_FILTER_COMPARISON';\nexport const DELETE_COMPLEX_FILTER_COMPARISON =\n\t'LIST#DELETE_COMPLEX_FILTER_COMPARISON';\n\nexport const DELETE_FILTER_COMPARISON = 'LIST#DELETE_FILTER_COMPARISON';\n\n//Subscription constants\nexport const LIVE_LIST_SUBSCRIBE = 'LIVE_LIST_SUBSCRIBE';\nexport const LIVE_LIST_SUBSCRIPTION_STARTED = 'LIVE_LIST_SUBSCRIPTION_STARTED';\nexport const LIVE_LIST_SUBSCRIPTION_SUCCESS = 'LIVE_LIST_SUBSCRIPTION_SUCCESS';\nexport const LIVE_LIST_UNSUBSCRIBE_SUCCESS = 'LIVE_LIST_UNSUBSCRIBE_SUCCESS';\nexport const LIVE_LIST_SUBSCRIPTION_FAILED = 'LIVE_LIST_SUBSCRIPTION_FAILED';\nexport const LIVE_LIST_SUCCESS = 'LIVE_LIST_SUCCESS';\nexport const LIVE_LIST_ITEM_ENTERED = 'LIVE_LIST_ITEM_ENTERED';\nexport const LIVE_LIST_ITEM_CHANGED = 'LIVE_LIST_ITEM_CHANGED';\nexport const LIVE_LIST_ITEM_EXIT = 'LIVE_LIST_ITEM_EXIT';\nexport const LIVE_LIST_ERROR = 'LIVE_LIST_ERROR';\nexport const LIVE_LIST_QUERY_TEMPLATE_FIELD_TABLE = 'table';\nexport const LIVE_LIST_QUERY_TEMPLATE_FIELD_QUERY = 'queryConditions';\nexport const LIVE_LIST_QUERY_TEMPLATE_FIELD_COLUMNS = 'columns';\n//Utils\nexport const ASC = 'ASC';\nexport const DESC = 'DESC';\nexport const CLEAR = 'CLEAR';\nexport const ORDERBYDESC = 'ORDERBYDESC';\nexport const ORDERBY = 'ORDERBY';\nexport const KEYWORD_FIELD = '123TEXTQUERY321';\nexport const NEW_QUERY_DELIMITER = '^NQ';\nexport const QUERY_DELIMITER = '^';\nexport const AT_DELIMITER = '@';\nexport const EQUALS = '=';\nexport const NOT_EQUALS = '!=';\nexport const OPEN_PAREN = '(';\nexport const CLOSE_PAREN = ')';\nexport const SINGLE_QUOTE = \"'\";\nexport const COMMA = ',';\nexport const DATE_COLUMN_NAME = 'GlideLayout_DateTimeElementType';\nexport const GROUP_BY = 'GROUPBY';\nexport const CELL_MAX_CHARACTERS = 160;\nexport const SCROLL_THROTTLE_LIMIT = 1000;\nexport const LIST_LOADER_SIZE_MD = 'md';\nexport const LIST_LOADER_SIZE_LG = 'lg';\nexport const SCRIPT_DATE_GENERATE = 'javascript:gs.dateGenerate';\nexport const SCRIPT_CURRENCY_FILTER = 'javascript:global.getCurrencyFilter';\nexport const ON = 'ON';\nexport const NOTON = 'NOTON';\nexport const BETWEEN = 'BETWEEN';\nexport const ISEMPTY = 'ISEMPTY';\nexport const ISNOTEMPTY = 'ISNOTEMPTY';\nexport const REQUIRES_RANGE = [ON, NOTON, BETWEEN];\nexport const _START = 'start';\nexport const _END = 'end';\nexport const TIME_START = '00:00:00';\nexport const TIME_END = '23:59:59';\nexport const BEFORE = '<';\nexport const AT_OR_BEFORE = '<=';\nexport const AFTER = '>';\nexport const AT_OR_AFTER = '>=';\nexport const DATEPART = 'DATEPART';\nexport const RELATIVE = 'RELATIVE';\nexport const ANYTHING = 'ANYTHING';\nexport const SAMEAS = 'SAMEAS';\nexport const NSAMEAS = 'NSAMEAS';\nexport const MORETHAN = 'MORETHAN';\nexport const LESSTHAN = 'LESSTHAN';\nexport const NOT_IN = 'NOT IN';\nexport const IN = 'IN';\nexport const EMPTYSTRING = 'EMPTYSTRING';\nexport const DYNAMIC = 'DYNAMIC';\nexport const NONE = 'none';\nexport const OR = '^OR';\nexport const GRID_CELL_MAXCHAR = 4000;\n\n//Grid Cell Input Types\nexport const GLIDE_DATE = 'glide_date';\nexport const GLIDE_DATE_TIME = 'glide_date_time';\nexport const GLIDE_CURRENCY = 'currency';\nexport const GLIDE_FX_CURRENCY = 'currency2';\nexport const GLIDE_JOURNAL_INPUT = 'journal_input';\nexport const GLIDE_JOURNAL = 'journal';\nexport const GLIDE_REFERNCE = 'reference';\nexport const GLIDE_RELATED_TAGS = 'related_tags';\nexport const GLIDE_LIST = 'glide_list';\nexport const GLIDE_PASSWORD = 'password';\nexport const GLIDE_TAGS = 'tags';\nexport const GLIDE_SYS_CLASS = 'sys_class_name';\n\n// Field Types\nexport const CHOICE = 'choice';\nexport const REFERENCE = 'reference';\nexport const EMAIL = 'email';\nexport const DOCUMENT_ID = 'document_id';\n\n// Discrete API actions\nexport const LIST_LIMIT_UPDATED = 'LIST_LIMIT_UPDATED';\nexport const LIST_SCROLL_UPDATED = 'LIST_SCROLL_UPDATED';\nexport const LIST_PAGE_UPDATED = 'LIST_PAGE_UPDATED';\nexport const GRID_MODEL_UPDATED = 'GRID_MODEL_UPDATED';\nexport const LIST_ROW_CLICK_UPDATED = 'LIST_ROW_CLICK_UPDATED';\nexport const LIST_QUERY_UPDATED = 'LIST_QUERY_UPDATED';\nexport const PROPERTIES_SET = 'PROPERTIES_SET';\n\n// LIST Actions Manager\nexport const AW_LIST = 'sys_aw_list';\nexport const AW_MY_LIST = 'sys_aw_my_list';\nexport const GRID_CELL_LIST = 'grid_cell_list';\n\nexport const MY_LIST_RENAME = 'MY_LIST_RENAME';\nexport const MY_LIST_PERSONALIZE = 'MY_LIST_PERSONALIZE';\nexport const MY_LIST_SAVE = 'MY_LIST_SAVE';\nexport const MY_LIST_SAVE_AS = 'MY_LIST_SAVE_AS';\nexport const MY_LIST_DELETE = 'MY_LIST_DELETE';\nexport const MY_LIST_RESTORE_COLUMNS = 'MY_LIST_RESTORE_COLUMNS';\n\nexport const LIST_SAVE_AS = 'LIST_SAVE_AS';\nexport const LIST_RESTORE_COLUMNS = 'LIST_RESTORE_COLUMNS';\n\nexport const GRID_CELL_FILTER_OUT = 'GRID_CELL_FILTER_OUT';\nexport const GRID_CELL_SHOW_MATCHING = 'GRID_CELL_SHOW_MATCHING';\n\nexport const ADVANCED_VIEW_SET_QUERY = 'ADVANCED_VIEW_SET_QUERY';\nexport const INVALID_ACTION_ITEM = 'INVALID_ACTION_ITEM';\n\nexport const LIST_PAGE_RESET = {\n\tpage: 1\n};\n\nexport const LIST_SELECTION_RESET = {\n\tselectedRecords: [],\n\texceptedRecords: [],\n\tselectionCount: 0,\n\tallRecordsSelected: false\n};\n\nexport const LIST_PROP_RESET = {\n\t...LIST_PAGE_RESET,\n\t...LIST_SELECTION_RESET\n};\n\n// Checkbox API actions\nexport const GRID_CHECKBOX_TOGGLED = 'GRID_CHECKBOX_TOGGLED';\nexport const LIST_CHECKBOX_TOGGLED = 'LIST_CHECKBOX_TOGGLED';\nexport const LIST_SELECTION_COUNT_UPDATED = 'LIST_SELECTION_COUNT_UPDATED';\n\n// LIST Notifications\nexport const RECORD_LIST_NOTIFICATION_ADDED =\n\t'NOW_RECORD_LIST#NOTIFICATION_ADDED';\nexport const ADD_NOTIFICATIONS = 'ADD_NOTIFICATIONS';\nexport const REMOVE_NOTIFICATIONS = 'REMOVE_NOTIFICATIONS';\nexport const CLEAR_NOTIFICATIONS = 'CLEAR_NOTIFICATIONS';\nexport const ADD_LIST_NOTIFICATIONS = 'ADD_LIST_NOTIFICATIONS';\n\n// LIST iframe Modal\nexport const IFRAME_DEFAULTS = {\n\tautoCloseOn: ['URL_CHANGED']\n};\n\nexport const URL_PARAM_LIMIT = 1900;\n\n// GlideQuery\nexport const EMPTY_PARSED_QUERY = {\n\tpredicates: [\n\t\t{\n\t\t\tcompound_type: 'or',\n\t\t\tsubpredicates: [\n\t\t\t\t{\n\t\t\t\t\tcompound_type: 'and',\n\t\t\t\t\tsubpredicates: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcompound_type: 'and',\n\t\t\t\t\t\t\tsubpredicates: [],\n\t\t\t\t\t\t\ttype: 'compound'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\ttype: 'compound'\n\t\t\t\t}\n\t\t\t],\n\t\t\ttype: 'compound'\n\t\t}\n\t],\n\thas_rlq_conditions: false,\n\torder_by: [],\n\tgroup_by: []\n};\n\nexport const LIST_TYPE_DEFAULT = 'DEFAULT';\nexport const LIST_TYPE_GROUPED = 'GROUPED'; // This listType is currently used based on listModel query if it is grouped. Outside consumer cannot configure list with this type\nexport const LIST_TYPE_REFERENCE = 'REFERENCE';\nexport const LIST_TYPE_RELATED = 'RELATED';\nexport const VIRTUAL_DATA_SOURCE = 'VIRTUAL_DATA_SOURCE'; // This listType is for future use.\nexport const LIST_TYPE_PICKER = 'PICKER';\nexport const LIST_TYPE_SNAPSHOT = 'SNAPSHOT';\n\nexport const LIST_TYPE_INTERFACES = {\n\t[LIST_TYPE_DEFAULT]: ['table'],\n\t[LIST_TYPE_GROUPED]: ['table', 'query'],\n\t[LIST_TYPE_REFERENCE]: [\n\t\t'table',\n\t\t'chars',\n\t\t'recordSysId',\n\t\t'field',\n\t\t'ignoreRefQual'\n\t],\n\t[LIST_TYPE_RELATED]: ['table', 'parentTable', 'relatedListName']\n};\n\nexport const QUERY_VARIABLES_LISTS = {\n\t[LIST_TYPE_DEFAULT]: [\n\t\t...LIST_TYPE_INTERFACES[LIST_TYPE_DEFAULT],\n\t\t'query',\n\t\t'columns',\n\t\t'pagination',\n\t\t'parentTable',\n\t\t'relatedListName',\n\t\t'maxColumns'\n\t],\n\t[LIST_TYPE_GROUPED]: [...LIST_TYPE_INTERFACES[LIST_TYPE_GROUPED]],\n\t[LIST_TYPE_REFERENCE]: [...LIST_TYPE_INTERFACES[LIST_TYPE_REFERENCE]],\n\t[LIST_TYPE_RELATED]: [...LIST_TYPE_INTERFACES[LIST_TYPE_RELATED]]\n};\n\nexport const LIST_TYPES = {\n\tDEFAULT: LIST_TYPE_DEFAULT,\n\tREFERENCE: LIST_TYPE_REFERENCE,\n\tRELATED: LIST_TYPE_RELATED,\n\tPICKER: LIST_TYPE_PICKER,\n\tSNAPSHOT: LIST_TYPE_SNAPSHOT\n};\n\nexport const QUERY_CATEGORIES = {\n\t[LIST_TYPE_DEFAULT]: 'list',\n\t[LIST_TYPE_RELATED]: 'related_list',\n\t[LIST_TYPE_REFERENCE]: 'reference_list'\n};\n\n// List Column Filtering\nexport const ADVANCED_FILTER = 'advanced';\nexport const CHOICE_FILTER = CHOICE;\nexport const DATE_FILTER = 'date';\nexport const DATE_TIME_FILTER = 'date_time';\nexport const GENERIC_FILTER = 'generic';\nexport const NUMERIC_FILTER = 'numeric';\nexport const REFERENCE_FILTER = REFERENCE;\nexport const UNSUPPORTED_FILTER = 'unsupported';\n\n// List Cell Filtering\nexport const FILTER_TYPE_FLAGS = {\n\t[ADVANCED_FILTER]: {optionsNotSupported: []},\n\t[CHOICE_FILTER]: {optionsSupported: []},\n\t[DATE_FILTER]: {\n\t\toptionsNotSupported: [\n\t\t\tDATEPART,\n\t\t\tRELATIVE,\n\t\t\tANYTHING,\n\t\t\tSAMEAS,\n\t\t\tNSAMEAS,\n\t\t\tMORETHAN,\n\t\t\tLESSTHAN\n\t\t]\n\t},\n\t[DATE_TIME_FILTER]: {\n\t\toptionsNotSupported: [\n\t\t\tDATEPART,\n\t\t\tRELATIVE,\n\t\t\tANYTHING,\n\t\t\tSAMEAS,\n\t\t\tNSAMEAS,\n\t\t\tMORETHAN,\n\t\t\tLESSTHAN\n\t\t]\n\t},\n\t[GENERIC_FILTER]: {\n\t\toptionsNotSupported: [\n\t\t\tANYTHING,\n\t\t\tIN,\n\t\t\tEMPTYSTRING,\n\t\t\tAT_OR_BEFORE,\n\t\t\tAT_OR_AFTER,\n\t\t\tSAMEAS,\n\t\t\tNSAMEAS\n\t\t]\n\t},\n\t[NUMERIC_FILTER]: {\n\t\tdataTypesSupported: [\n\t\t\t'integer',\n\t\t\t'float',\n\t\t\t'decimal',\n\t\t\t'numeric',\n\t\t\t'long',\n\t\t\t'longint',\n\t\t\tGLIDE_CURRENCY\n\t\t],\n\t\toptionsNotSupported: [NOT_IN, IN, ANYTHING, SAMEAS, NSAMEAS]\n\t},\n\t[REFERENCE_FILTER]: {\n\t\toptionsNotSupported: [\n\t\t\tANYTHING,\n\t\t\tIN,\n\t\t\tEMPTYSTRING,\n\t\t\tAT_OR_BEFORE,\n\t\t\tAT_OR_AFTER,\n\t\t\tSAMEAS,\n\t\t\tNSAMEAS,\n\t\t\tEQUALS,\n\t\t\tNOT_EQUALS,\n\t\t\tDYNAMIC\n\t\t]\n\t},\n\t[UNSUPPORTED_FILTER]: [\n\t\tGLIDE_LIST,\n\t\tGLIDE_PASSWORD,\n\t\tGLIDE_TAGS,\n\t\tGLIDE_RELATED_TAGS,\n\t\tGLIDE_FX_CURRENCY,\n\t\tGLIDE_SYS_CLASS\n\t]\n};\n\nexport const TOGGLE_LIST_MENU = 'TOGGLE_LIST_MENU';\n\n//List Export Constants\nexport const LIST_EXPORT_USER_PREFERENCES = {\n\tEXPORT_DELIVERY_TYPE: 'list_export.deliveryType',\n\tEXPORT_ORIENTATION_TYPE: 'list_export.orientationType',\n\tEXPORT_FILE_TYPE: 'list_export.fileType',\n\tEXPORT_EMAIL: 'list_export.email'\n};\n\nexport const SET_ORIGINAL_CONDITONS = 'SET_ORIGINAL_CONDITONS';\n\n// Preference constants\nexport const USER_PREFERENCE_NULL_VALUE = '123_NULLVALUE_321';\n\n// Attribute Constants\nexport const OMIT_COUNT = 'omit_count';\nexport const OMIT_COUNT_NEXT_PAGE = 'omitCountNextPage';\n\nexport const COMPONENT_PROPERTY_CHANGED = 'SEISMIC_COMPONENT_PROPERTY_CHANGED';\n\n// Presource constants\nexport const PRESOURCE_PATH = 'ux_globals.presource';\nexport const PRESOURCE_MODULE = 'sn-workspace-list-module';\nexport const PRESOURCE_HEADER = 'sn-workspace-header';\nexport const PRESOURCE_WSCONFIGID = 'wsConfigSysId';\nexport const PRESOURCE_WSCONFIG_PATH = `${PRESOURCE_PATH}[\"${PRESOURCE_HEADER}:${PRESOURCE_WSCONFIGID}\"]`;\nexport const validDAPresourceTables = ['incident'];\n\nexport const USER_PREF_COL_WIDTH = 'columnWidth';\nexport const LIST_FEATURE_FLAG_PROPERTY_PREFIX = 'now.list.feature_flags';\nexport const HIDE_HIGHLIGHTED_VALUES = 'hideHighlightedValues';\n\n// CASCADE DELETE CONSTANTS\nexport const CASCADE_DELETE_GRAPHQL_POPUP_EFFECT_RESULT =\n\t'CASCADE_DELETE_GRAPHQL_POPUP_EFFECT_RESULT';\nexport const CASCADE_DELETE_GRAPHQL_POPUP_EFFECT =\n\t'CASCADE_DELETE_GRAPHQL_POPUP_EFFECT';\nexport const CASCADE_DELETE_GRAPHQL_EFFECT = 'CASCADE_DELETE_GRAPHQL_EFFECT';\nexport const CASCADE_DELETE_GRAPHQL_EFFECT_RESULT =\n\t'CASCADE_DELETE_GRAPHQL_EFFECT_RESULT';\n\n//Alert List\nexport const ALERT_CONSTANTS = Object.freeze({\n\tSTATUS: {\n\t\tCRITICAL: 'critical',\n\t\tHIGH: 'high',\n\t\tMODERATE: 'moderate',\n\t\tWARNING: 'warning',\n\t\tINFO: 'info',\n\t\tPOSITIVE: 'positive',\n\t\tLOW: 'low'\n\t},\n\tACTION: {\n\t\tTYPES: {\n\t\t\tDISMISS: 'dismiss',\n\t\t\tACKNOWLEDGE: 'acknowledge',\n\t\t\tOPEN: 'open'\n\t\t}\n\t}\n});\n","module.exports = __TECTONIC__lodash_4_17_4[\"isEmpty\"];","module.exports = __TECTONIC__$servicenow_ui_renderer_snabbdom;","module.exports = __TECTONIC__lodash_4_17_4[\"get\"];","/**\n * Factory function for logging.\n *\n * import {Logger} from '../src/utils/logger';\n */\nconst LOG_STATUS_KEY = '__RECORD_LIST_CONNECTED_LOG_LEVEL';\n\nconst LOG_LEVEL = {\n\tLOG_LEVEL_ALL: 0,\n\tLOG_LEVEL_DEBUG: 1,\n\tLOG_LEVEL_LOG: 2,\n\tLOG_LEVEL_INFO: 2,\n\tLOG_LEVEL_WARN: 3,\n\tLOG_LEVEL_ERROR: 4\n};\nconst {\n\tLOG_LEVEL_ALL,\n\tLOG_LEVEL_DEBUG,\n\tLOG_LEVEL_LOG,\n\tLOG_LEVEL_INFO,\n\tLOG_LEVEL_WARN,\n\tLOG_LEVEL_ERROR\n} = LOG_LEVEL;\n\nexport const Logger = () => {\n\t// set default logging level\n\tif (typeof window[LOG_STATUS_KEY] === 'undefined') {\n\t\twindow[LOG_STATUS_KEY] = LOG_LEVEL_ERROR;\n\t}\n\n\t/**\n\t * Simple logging utilty to include context\n\t * @usage Logger().enable();\n\t *\n\t * @param logLevel\n\t */\n\tconst enable = (logLevel = LOG_LEVEL_ALL) => {\n\t\tswitch (logLevel) {\n\t\t\tdefault:\n\t\t\t\tlogLevel = LOG_LEVEL_ERROR;\n\t\t\t// falls through\n\t\t\tcase LOG_LEVEL_ALL:\n\t\t\tcase LOG_LEVEL_DEBUG:\n\t\t\tcase LOG_LEVEL_LOG:\n\t\t\tcase LOG_LEVEL_INFO:\n\t\t\tcase LOG_LEVEL_WARN:\n\t\t\tcase LOG_LEVEL_ERROR:\n\t\t\t\twindow[LOG_STATUS_KEY] = logLevel;\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\t/**\n\t * @usage Logger().disable();\n\t */\n\tconst disable = () => {\n\t\twindow[LOG_STATUS_KEY] = LOG_LEVEL_ERROR;\n\t};\n\n\t/**\n\t * @usage const LOG = Logger().createLog('ComponentName');\n\t *\n\t * @param name\n\t * @return {{log, debug, warn, error}}\n\t */\n\tconst createLog = name => {\n\t\tconst _log = (type, level, args) => {\n\t\t\tif (level < window[LOG_STATUS_KEY]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\targs = Array.prototype.splice.call(args, 0);\n\t\t\targs.unshift(`(${name})`);\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole[type].apply(console, args);\n\t\t};\n\n\t\treturn {\n\t\t\tdebug: function() {\n\t\t\t\t_log('debug', LOG_LEVEL_DEBUG, arguments);\n\t\t\t},\n\t\t\tlog: function() {\n\t\t\t\t_log('log', LOG_LEVEL_LOG, arguments);\n\t\t\t},\n\t\t\tinfo: function() {\n\t\t\t\t_log('info', LOG_LEVEL_INFO, arguments);\n\t\t\t},\n\t\t\twarn: function() {\n\t\t\t\t_log('warn', LOG_LEVEL_WARN, arguments);\n\t\t\t},\n\t\t\terror: function() {\n\t\t\t\t_log('error', LOG_LEVEL_ERROR, arguments);\n\t\t\t}\n\t\t};\n\t};\n\n\treturn {enable, disable, createLog};\n};\n","module.exports = __TECTONIC__$servicenow_now_record_list;","module.exports = __TECTONIC__$servicenow_ui_core;","/**\n * Copyright (c) 2020 ServiceNow, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *  \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *  \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PACKAGE_NAME = exports.HELPERS_SCHEDULED = exports.HELPERS_DEFER = exports.HELPERS_IMMEDIATE = exports.COMPONENT_INTERNAL_ACTION = exports.SCHEDULE_IMMEDIATELY_DO_NOT_USE_OR_YOU_WILL_BE_IMMEDIATELY_FIRED = exports.ACTION_HANDLED = exports.ACTION_DISPATCHED = exports.STATE_UPDATED = exports.NOW_UI_EVENT = exports.NOW_METRICS_LEVEL_PROP = exports.NOW_METRIC_TYPES_PROP = exports.COMPONENT_MODE_SUSPEND = exports.COMPONENT_MODE_ACTIVE = exports.NOW_MODE_PROP = exports.NOW_MODE_ATTR = exports.NOW_ENABLE_PROPERTY_SETTING_PREVENTION_PROP = exports.NOW_ENABLE_PROPERTY_SETTING_PREVENTION_ATTR = exports.NOW_COMPONENT_NAME_PROP = exports.NOW_COMPONENT_NAME_ATTR = exports.NOW_ID_PROP = exports.NOW_ID_ATTR = exports.NOW_HOIST_PREPEND_TO_PROP = exports.NOW_HOIST_APPEND_TO_PROP = exports.NOW_HOIST_PREPEND_TO_ATTR = exports.NOW_HOIST_APPEND_TO_ATTR = exports.NOW_HOIST_PROP = exports.NOW_HOIST_ATTR = exports.COMPONENT_ACTION_DISPATCHED = exports.COMPONENT_STATE_UPDATED = exports.COMPONENT_TREE_RENDERED = exports.COMPONENT_DOM_TREE_READY = exports.COMPONENT_RENDER_REQUESTED = exports.COMPONENT_PROPERTY_UPDATE_REQUESTED = exports.COMPONENT_DOM_READY = exports.COMPONENT_RENDERED = exports.COMPONENT_PROPERTY_CHANGED = exports.COMPONENT_BOOTSTRAPPED = exports.COMPONENT_DISCONNECTED = exports.COMPONENT_CONNECTED = exports.ON_BOOTSTRAP_LIFECYCLE = exports.ON_DISCONNECT_LIFECYCLE = exports.ON_CONNECT_LIFECYCLE = exports.PROPERTIES_SET_LIFECYCLE = exports.PROPERTY_SELECTOR_SIGIL = exports.APPEND_TO_META_PROP_NAME = exports.APPEND_TO_PAYLOAD_PROP_NAME = exports.DEFER_ATTRIBUTE = exports.HOIST_FIRST_SCROLL_PARENT = exports.SEISMIC_HOIST_TAG_NAME = exports.HOIST_ATTR = exports.HOIST_APPEND_TO_ATTR = exports.HOIST_APPEND_TO_PROP = exports.COMPONENT_NAME_PROP = exports.COMPONENT_NAME_ATTR = exports.SET_INITIAL_STATE = exports.PARSE_PROP_CONF_KEY = exports.SHOULD_NOT_PROPAGATE = exports.PROPERTIES_SET = exports.HANDLE_ACTIONS = exports.STORE_UPDATED = exports.ATTRIBUTE_SET = exports.COMPONENT_ID_ATTRIBUTE = exports.DISPATCH_EVENT = void 0;\nvar DISPATCH_EVENT = 'DISPATCH_CUSTOM_EVENT';\nexports.DISPATCH_EVENT = DISPATCH_EVENT;\nvar COMPONENT_ID_ATTRIBUTE = 'component-id';\nexports.COMPONENT_ID_ATTRIBUTE = COMPONENT_ID_ATTRIBUTE;\nvar ATTRIBUTE_SET = 'ATTRIBUTE_SET';\nexports.ATTRIBUTE_SET = ATTRIBUTE_SET;\nvar STORE_UPDATED = 'STORE_UPDATED';\nexports.STORE_UPDATED = STORE_UPDATED;\nvar HANDLE_ACTIONS = 'handle-actions';\nexports.HANDLE_ACTIONS = HANDLE_ACTIONS;\nvar PROPERTIES_SET = 'PROPERTIES_SET';\nexports.PROPERTIES_SET = PROPERTIES_SET;\nvar SHOULD_NOT_PROPAGATE = [PROPERTIES_SET, STORE_UPDATED];\nexports.SHOULD_NOT_PROPAGATE = SHOULD_NOT_PROPAGATE;\nvar PARSE_PROP_CONF_KEY = 'unstableParse';\nexports.PARSE_PROP_CONF_KEY = PARSE_PROP_CONF_KEY;\nvar SET_INITIAL_STATE = 'SET_INITIAL_STATE';\nexports.SET_INITIAL_STATE = SET_INITIAL_STATE;\nvar COMPONENT_NAME_ATTR = 'component-name';\nexports.COMPONENT_NAME_ATTR = COMPONENT_NAME_ATTR;\nvar COMPONENT_NAME_PROP = 'componentName';\nexports.COMPONENT_NAME_PROP = COMPONENT_NAME_PROP;\nvar HOIST_APPEND_TO_PROP = 'hoistAppendTo';\nexports.HOIST_APPEND_TO_PROP = HOIST_APPEND_TO_PROP;\nvar HOIST_APPEND_TO_ATTR = 'hoist-append-to';\nexports.HOIST_APPEND_TO_ATTR = HOIST_APPEND_TO_ATTR;\nvar HOIST_ATTR = 'hoist';\nexports.HOIST_ATTR = HOIST_ATTR;\nvar SEISMIC_HOIST_TAG_NAME = 'SEISMIC-HOIST';\nexports.SEISMIC_HOIST_TAG_NAME = SEISMIC_HOIST_TAG_NAME;\nvar HOIST_FIRST_SCROLL_PARENT = 'now-unstable-first-scroll-parent';\nexports.HOIST_FIRST_SCROLL_PARENT = HOIST_FIRST_SCROLL_PARENT;\nvar DEFER_ATTRIBUTE = 'defer';\nexports.DEFER_ATTRIBUTE = DEFER_ATTRIBUTE;\nvar APPEND_TO_PAYLOAD_PROP_NAME = 'appendToPayload';\nexports.APPEND_TO_PAYLOAD_PROP_NAME = APPEND_TO_PAYLOAD_PROP_NAME;\nvar APPEND_TO_META_PROP_NAME = 'appendToMeta';\nexports.APPEND_TO_META_PROP_NAME = APPEND_TO_META_PROP_NAME;\nvar PROPERTY_SELECTOR_SIGIL = '@';\nexports.PROPERTY_SELECTOR_SIGIL = PROPERTY_SELECTOR_SIGIL;\nvar PROPERTIES_SET_LIFECYCLE = 'onPropertiesSet'; // legacy life cycle functions\n\nexports.PROPERTIES_SET_LIFECYCLE = PROPERTIES_SET_LIFECYCLE;\nvar ON_CONNECT_LIFECYCLE = 'onConnect';\nexports.ON_CONNECT_LIFECYCLE = ON_CONNECT_LIFECYCLE;\nvar ON_DISCONNECT_LIFECYCLE = 'onDisconnect';\nexports.ON_DISCONNECT_LIFECYCLE = ON_DISCONNECT_LIFECYCLE;\nvar ON_BOOTSTRAP_LIFECYCLE = 'onBootstrap'; // public action types\n\nexports.ON_BOOTSTRAP_LIFECYCLE = ON_BOOTSTRAP_LIFECYCLE;\nvar COMPONENT_CONNECTED = 'SEISMIC_COMPONENT_CONNECTED';\nexports.COMPONENT_CONNECTED = COMPONENT_CONNECTED;\nvar COMPONENT_DISCONNECTED = 'SEISMIC_COMPONENT_DISCONNECTED';\nexports.COMPONENT_DISCONNECTED = COMPONENT_DISCONNECTED;\nvar COMPONENT_BOOTSTRAPPED = 'SEISMIC_COMPONENT_BOOTSTRAPPED';\nexports.COMPONENT_BOOTSTRAPPED = COMPONENT_BOOTSTRAPPED;\nvar COMPONENT_PROPERTY_CHANGED = 'SEISMIC_COMPONENT_PROPERTY_CHANGED';\nexports.COMPONENT_PROPERTY_CHANGED = COMPONENT_PROPERTY_CHANGED;\nvar COMPONENT_RENDERED = 'SEISMIC_COMPONENT_RENDERED';\nexports.COMPONENT_RENDERED = COMPONENT_RENDERED;\nvar COMPONENT_DOM_READY = 'SEISMIC_COMPONENT_DOM_READY';\nexports.COMPONENT_DOM_READY = COMPONENT_DOM_READY;\nvar COMPONENT_PROPERTY_UPDATE_REQUESTED = 'SEISMIC_COMPONENT_PROPERTY_UPDATE_REQUESTED';\nexports.COMPONENT_PROPERTY_UPDATE_REQUESTED = COMPONENT_PROPERTY_UPDATE_REQUESTED;\nvar COMPONENT_RENDER_REQUESTED = 'SEISMIC_COMPONENT_RENDER_REQUESTED';\nexports.COMPONENT_RENDER_REQUESTED = COMPONENT_RENDER_REQUESTED;\nvar COMPONENT_DOM_TREE_READY = 'SEISMIC_COMPONENT_DOM_TREE_READY';\nexports.COMPONENT_DOM_TREE_READY = COMPONENT_DOM_TREE_READY;\nvar COMPONENT_TREE_RENDERED = 'SEISMIC_COMPONENT_TREE_RENDERED';\nexports.COMPONENT_TREE_RENDERED = COMPONENT_TREE_RENDERED;\nvar COMPONENT_STATE_UPDATED = 'SEISMIC_COMPONENT_STATE_UPDATED';\nexports.COMPONENT_STATE_UPDATED = COMPONENT_STATE_UPDATED;\nvar COMPONENT_ACTION_DISPATCHED = 'SEISMIC_COMPONENT_ACTION_DISPATCHED'; // now namespace\n\nexports.COMPONENT_ACTION_DISPATCHED = COMPONENT_ACTION_DISPATCHED;\nvar NOW_HOIST_ATTR = 'now-hoist';\nexports.NOW_HOIST_ATTR = NOW_HOIST_ATTR;\nvar NOW_HOIST_PROP = 'nowHoist';\nexports.NOW_HOIST_PROP = NOW_HOIST_PROP;\nvar NOW_HOIST_APPEND_TO_ATTR = 'now-hoist-append-to';\nexports.NOW_HOIST_APPEND_TO_ATTR = NOW_HOIST_APPEND_TO_ATTR;\nvar NOW_HOIST_PREPEND_TO_ATTR = 'now-hoist-prepend-to';\nexports.NOW_HOIST_PREPEND_TO_ATTR = NOW_HOIST_PREPEND_TO_ATTR;\nvar NOW_HOIST_APPEND_TO_PROP = 'nowHoistAppendTo';\nexports.NOW_HOIST_APPEND_TO_PROP = NOW_HOIST_APPEND_TO_PROP;\nvar NOW_HOIST_PREPEND_TO_PROP = 'nowHoistPrependTo';\nexports.NOW_HOIST_PREPEND_TO_PROP = NOW_HOIST_PREPEND_TO_PROP;\nvar NOW_ID_ATTR = 'now-id';\nexports.NOW_ID_ATTR = NOW_ID_ATTR;\nvar NOW_ID_PROP = 'nowId';\nexports.NOW_ID_PROP = NOW_ID_PROP;\nvar NOW_COMPONENT_NAME_ATTR = 'now-name';\nexports.NOW_COMPONENT_NAME_ATTR = NOW_COMPONENT_NAME_ATTR;\nvar NOW_COMPONENT_NAME_PROP = 'nowName';\nexports.NOW_COMPONENT_NAME_PROP = NOW_COMPONENT_NAME_PROP;\nvar NOW_ENABLE_PROPERTY_SETTING_PREVENTION_ATTR = 'now-enable-property-setting-prevention';\nexports.NOW_ENABLE_PROPERTY_SETTING_PREVENTION_ATTR = NOW_ENABLE_PROPERTY_SETTING_PREVENTION_ATTR;\nvar NOW_ENABLE_PROPERTY_SETTING_PREVENTION_PROP = 'nowEnablePropertySettingPrevention'; // modes\n\nexports.NOW_ENABLE_PROPERTY_SETTING_PREVENTION_PROP = NOW_ENABLE_PROPERTY_SETTING_PREVENTION_PROP;\nvar NOW_MODE_ATTR = 'now-mode';\nexports.NOW_MODE_ATTR = NOW_MODE_ATTR;\nvar NOW_MODE_PROP = 'nowMode';\nexports.NOW_MODE_PROP = NOW_MODE_PROP;\nvar COMPONENT_MODE_ACTIVE = 'active';\nexports.COMPONENT_MODE_ACTIVE = COMPONENT_MODE_ACTIVE;\nvar COMPONENT_MODE_SUSPEND = 'suspend'; // metrics\n\nexports.COMPONENT_MODE_SUSPEND = COMPONENT_MODE_SUSPEND;\nvar NOW_METRIC_TYPES_PROP = 'nowMetricTypes';\nexports.NOW_METRIC_TYPES_PROP = NOW_METRIC_TYPES_PROP;\nvar NOW_METRICS_LEVEL_PROP = 'nowMetricsLevel';\nexports.NOW_METRICS_LEVEL_PROP = NOW_METRICS_LEVEL_PROP;\nvar NOW_UI_EVENT = 'NOW_UI_EVENT'; // now event types\n\nexports.NOW_UI_EVENT = NOW_UI_EVENT;\nvar STATE_UPDATED = 'STATE_UPDATED';\nexports.STATE_UPDATED = STATE_UPDATED;\nvar ACTION_DISPATCHED = 'ACTION_DISPATCHED';\nexports.ACTION_DISPATCHED = ACTION_DISPATCHED;\nvar ACTION_HANDLED = 'ACTION_HANDLED';\nexports.ACTION_HANDLED = ACTION_HANDLED;\nvar SCHEDULE_IMMEDIATELY_DO_NOT_USE_OR_YOU_WILL_BE_IMMEDIATELY_FIRED = 'SCHEDULE_IMMEDIATELY_DO_NOT_USE_OR_YOU_WILL_BE_IMMEDIATELY_FIRED';\nexports.SCHEDULE_IMMEDIATELY_DO_NOT_USE_OR_YOU_WILL_BE_IMMEDIATELY_FIRED = SCHEDULE_IMMEDIATELY_DO_NOT_USE_OR_YOU_WILL_BE_IMMEDIATELY_FIRED;\nvar COMPONENT_INTERNAL_ACTION = 'NOW_COMPONENT_INTERNAL_ACTION';\nexports.COMPONENT_INTERNAL_ACTION = COMPONENT_INTERNAL_ACTION;\nvar HELPERS_IMMEDIATE = 'HELPERS_IMMEDIATE';\nexports.HELPERS_IMMEDIATE = HELPERS_IMMEDIATE;\nvar HELPERS_DEFER = 'HELPERS_DEFER';\nexports.HELPERS_DEFER = HELPERS_DEFER;\nvar HELPERS_SCHEDULED = 'HELPERS_SCHEDULED';\nexports.HELPERS_SCHEDULED = HELPERS_SCHEDULED;\nvar PACKAGE_NAME = '@servivcenow/ui-core';\nexports.PACKAGE_NAME = PACKAGE_NAME;\n//# sourceMappingURL=constants.js.map","import {\n\tEQUALS,\n\tIN,\n\tLIST_TYPE_DEFAULT,\n\tOR,\n\tQUERY_CATEGORIES,\n\tQUERY_DELIMITER\n} from '../../constants';\nimport {Logger} from '../../utils/logger';\nimport {t} from 'sn-translate';\nimport GlideQuery, {Comparison} from 'sn-glide-query';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isUndefined from 'lodash/isUndefined';\nimport set from 'lodash/set';\nconst LOG = Logger().createLog('List Utils: ');\n\nconst srOnlyLoadingClass = {\n\tposition: 'absolute',\n\twidth: '1px',\n\theight: '1px',\n\tmargin: '-1px',\n\tpadding: '0',\n\toverflow: 'hidden',\n\tclip: 'rect(0, 0, 0, 0)',\n\tborder: '0'\n};\n\nexport const getAriaLiveLoadingRegion = ({\n\tlistTitle,\n\ttable,\n\tloading,\n\tupdateState,\n\tloadAriaLabel\n}) => {\n\tconst ariaTitle = listTitle\n\t\t? t('List - {0} - Table {1}', listTitle, table)\n\t\t: t('{0} Table', table);\n\n\tconst translatedFinishedLoading = t('Finished loading: {0}', ariaTitle);\n\tconst translatedLoadingAriaLabel = t('Now Loading: {0}', ariaTitle);\n\n\tconst loadedAriaLabel =\n\t\t!isUndefined(loadAriaLabel) && loadAriaLabel !== translatedFinishedLoading\n\t\t\t? loadAriaLabel\n\t\t\t: translatedFinishedLoading;\n\n\tif (loading && !isUndefined(loadAriaLabel)) {\n\t\tupdateState({\n\t\t\toperation: 'set',\n\t\t\tpath: 'loadAriaLabel',\n\t\t\tvalue: undefined\n\t\t});\n\t} else if (!loading && loadAriaLabel !== loadedAriaLabel) {\n\t\tupdateState({\n\t\t\toperation: 'set',\n\t\t\tpath: 'loadAriaLabel',\n\t\t\tvalue: loadedAriaLabel\n\t\t});\n\t}\n\n\tconst label = loading ? translatedLoadingAriaLabel : loadedAriaLabel;\n\treturn (\n\t\t<div aria-live=\"polite\" style={srOnlyLoadingClass}>\n\t\t\t{label}\n\t\t</div>\n\t);\n};\n\nexport const externalActionService = (\n\tdispatch,\n\taction,\n\tpayload,\n\t...optionalDeprecatedActions\n) => {\n\tLOG.log(`Dispatched: ${action}, ${JSON.stringify(payload)}`);\n\tdispatch(action, payload);\n\toptionalDeprecatedActions.forEach(deprecatedAction => {\n\t\tLOG.log(`DEPRECATED: Dispatched: ${deprecatedAction}, ${payload}`);\n\t\tdispatch(deprecatedAction, payload);\n\t});\n};\n\n/**\n * Helper method to generate graphql compatibly pagination string\n * @param  {Number} limit record count limit\n * @param  {Number} page  current page\n * @return {String}       pagination query string\n */\nexport const getPaginationObject = (limit, page) => {\n\tif (typeof limit === 'undefined' || typeof page === 'undefined') {\n\t\treturn null;\n\t}\n\tconst offset = (page - 1) * limit;\n\treturn {limit, offset};\n};\n\n/**\n * isInputEmpty\n * Validates input is not empty or filled with\n * whitespace characters\n *\n * @param {*} input\n * @returns {Bool}\n */\nexport const isInputEmpty = input => !input || input.trim().length === 0;\n\n/**\n * trimString\n * Trims input string to length specified\n *\n * @param {*} input\tString you want to trim\n * @param {*} lengthToTrimTo\n * @returns {String}\n */\nexport const trimString = (input, lengthToTrimTo) => {\n\tif (input && input.length > lengthToTrimTo) {\n\t\treturn input.substring(0, lengthToTrimTo);\n\t}\n\treturn input || '';\n};\n\nexport const getDBViewFeatureFlags = listModel => {\n\treturn get(listModel, 'tableMetadata.isDBView', false)\n\t\t? {hideRowSelector: true, hideQuickEdit: true, hideDeclarativeActions: true}\n\t\t: {};\n};\n\nexport const isDirtyFormAndBackgroundRefreshRequest = (value, isDirty) =>\n\tget(value, 'background', false) && isDirty;\n\nexport const getQuery = (field, operator, value) => {\n\treturn `${field}${operator}${value}`;\n};\n\nexport const modifyComparison = (\n\tglideQuery,\n\tcomparisonMap,\n\tidToModify,\n\tfield,\n\tnonEmptyChoices\n) => {\n\tif (!isEmpty(idToModify)) {\n\t\tconst comparison = get(glideQuery, comparisonMap[idToModify].path);\n\t\tconst newComparison = new Comparison({\n\t\t\t...comparison,\n\t\t\tfield,\n\t\t\toperator: IN,\n\t\t\tvalue: nonEmptyChoices\n\t\t});\n\t\tset(glideQuery, comparisonMap[idToModify].path, newComparison);\n\t}\n};\n\nexport const getMutateOptions = (comparisonMap, orderedChoices) => {\n\tconst operation = {\n\t\tmodifyId: '',\n\t\tremoveIds: [],\n\t\tvalueToAdd: '',\n\t\tdelimeter: OR\n\t};\n\n\tfor (const id in comparisonMap) {\n\t\tif (\n\t\t\t(comparisonMap[id].isEmpty && !orderedChoices.empty) ||\n\t\t\t(!comparisonMap[id].isEmpty && orderedChoices.nonEmpty.length == 0)\n\t\t) {\n\t\t\toperation.removeIds.push(id);\n\t\t} else if (\n\t\t\t!comparisonMap[id].isEmpty &&\n\t\t\torderedChoices.nonEmpty.length > 0\n\t\t) {\n\t\t\toperation.modifyId = id;\n\t\t}\n\t\tif (Object.keys(comparisonMap).length === 1) {\n\t\t\tif (comparisonMap[id].isEmpty) {\n\t\t\t\toperation.valueToAdd = orderedChoices.nonEmpty.toString();\n\t\t\t} else if (orderedChoices.empty) {\n\t\t\t\toperation.valueToAdd = 'null';\n\t\t\t}\n\t\t\tif (operation.removeIds.length > 0) {\n\t\t\t\toperation.delimeter = QUERY_DELIMITER;\n\t\t\t}\n\t\t}\n\t}\n\treturn operation;\n};\n\nexport const removeComparisonsFromCompound = (glideQuery, comparisonIds) => {\n\tif (comparisonIds.length > 0) {\n\t\tfor (let x = 0; comparisonIds.length > x; x++) {\n\t\t\tremoveSingleComparisonFromCompound(glideQuery, comparisonIds[x], x);\n\t\t}\n\t}\n};\n\nexport const removeSingleComparisonFromCompound = (\n\tglideQuery,\n\tcomparisonId,\n\tindexAdjustment\n) => {\n\tconst {\n\t\tpredicateIndex,\n\t\tsubPredicateIndex,\n\t\tcompoundIndex,\n\t\tcomparisonIndex\n\t} = glideQuery.getComparisonIndices(comparisonId);\n\tconst newComparisonIndex = comparisonIndex - indexAdjustment;\n\tconst compound = get(\n\t\tglideQuery,\n\t\t`predicates[${predicateIndex}].subpredicates[${subPredicateIndex}].subpredicates[${compoundIndex}]`\n\t);\n\tconst comparison = get(\n\t\tglideQuery,\n\t\t`predicates[${predicateIndex}].subpredicates[${subPredicateIndex}].subpredicates[${compoundIndex}].subpredicates[${newComparisonIndex}]`\n\t);\n\tcompound.removeSubpredicate(comparison);\n};\n\nexport const getNewComplexEncodedQuery = (field, orderedChoices) => {\n\tif (orderedChoices.empty) {\n\t\treturn (\n\t\t\tgetQuery(field, EQUALS, 'null') +\n\t\t\t(orderedChoices.nonEmpty.length > 0\n\t\t\t\t? OR + getQuery(field, IN, orderedChoices.nonEmpty)\n\t\t\t\t: '')\n\t\t);\n\t} else return getQuery(field, IN, orderedChoices.nonEmpty);\n};\n\nexport const orderSelectedChoices = choices => {\n\tconst nullIndex = choices.indexOf('null');\n\tif (nullIndex !== -1) {\n\t\tchoices.splice(nullIndex, 1);\n\t\treturn {\n\t\t\tempty: true,\n\t\t\tnonEmpty: isEmpty(choices) ? [] : choices.sort().toString()\n\t\t};\n\t}\n\treturn {empty: false, nonEmpty: choices.sort().toString()};\n};\n\nexport const getNewGlideQuery = (\n\tparsedQueryModel,\n\tcomparisonId,\n\tfield,\n\toperator,\n\tvalue\n) => {\n\tconst {\n\t\tpredicateIndex,\n\t\tsubPredicateIndex,\n\t\tcompoundIndex,\n\t\tcomparisonIndex\n\t} = parsedQueryModel.glideQuery.getComparisonIndices(comparisonId);\n\n\tconst newGlideQuery = new GlideQuery(\n\t\tparsedQueryModel.glideQuery.toQueryObject()\n\t);\n\tconst path = `predicates[${predicateIndex}].subpredicates[${subPredicateIndex}].subpredicates[${compoundIndex}].subpredicates[${comparisonIndex}]`;\n\tconst comparison = get(newGlideQuery, path);\n\tconst newComparison = new Comparison({\n\t\t...comparison,\n\t\tfield,\n\t\toperator,\n\t\tvalue\n\t});\n\tset(newGlideQuery, path, newComparison);\n\treturn newGlideQuery;\n};\n\nexport const getQueryCategory = listType => {\n\tif (!listType || Object.keys(QUERY_CATEGORIES).indexOf(listType) === -1)\n\t\treturn QUERY_CATEGORIES[LIST_TYPE_DEFAULT];\n\n\treturn QUERY_CATEGORIES[listType];\n};\n","module.exports = __TECTONIC__sn_user_preferences;","module.exports = __TECTONIC__$devsnc_sn_list_commons;","import actionHandlers from './actions';\n\nconst listDataProvider = {\n\tname: 'listDataProvider',\n\tinitialState: {\n\t\tfetching: false,\n\t\thasFetched: false\n\t},\n\tproperties: {\n\t\tsortBy: {},\n\t\tsortDescending: {},\n\t\ttransitoryPage: {\n\t\t\tdefault: 1,\n\t\t\tselectable: true\n\t\t},\n\t\ttransitoryLimit: {\n\t\t\tdefault: 20,\n\t\t\tselectable: true\n\t\t},\n\t\tgroupLimit: {\n\t\t\tdefault: 20\n\t\t},\n\t\tlistId: {\n\t\t\tdefault: undefined\n\t\t},\n\t\tid: {\n\t\t\tdefault: '',\n\t\t\tselectable: true\n\t\t},\n\t\tmodel: {\n\t\t\tselectable: true\n\t\t},\n\t\tdata: {\n\t\t\tselectable: true\n\t\t},\n\t\trefresh: {\n\t\t\tdefault: ''\n\t\t},\n\t\tuserPreferenceOrderBy: {\n\t\t\tselectable: true\n\t\t},\n\t\tdataUpdatedTime: {\n\t\t\tselectable: true\n\t\t}\n\t},\n\tactionHandlers\n};\n\nexport default listDataProvider;\n","module.exports = __TECTONIC__$servicenow_now_alert;","import {default as cascadeDeleteActions} from './listCascadeDeleteActions';\nimport {default as componentActions} from './listComponentActions';\nimport {default as daActionns} from './listUibActions';\nimport {default as toolbarActions} from './listToolbarActions';\n\nexport default {\n\t...cascadeDeleteActions,\n\t...componentActions,\n\t...daActionns,\n\t...toolbarActions\n};\n","import {LIST_FEATURE_FLAG_PROPERTY_PREFIX} from '../constants';\nimport {getProperty} from 'sn-uxpage-presource';\n\nexport const getFeatureFlagsFromProperties = properties => {\n\tconst props = Object.entries(properties)\n\t\t.filter(([flag]) => {\n\t\t\treturn (\n\t\t\t\tflag.indexOf('hide') === 0 ||\n\t\t\t\tflag.indexOf('head') === 0 ||\n\t\t\t\tflag.indexOf('disable') === 0\n\t\t\t);\n\t\t})\n\t\t.reduce((prev, [flag, value]) => {\n\t\t\tconst sysPropValue = getFeatureFlagValue(flag);\n\t\t\tif (sysPropValue === true || sysPropValue === false)\n\t\t\t\tprev[flag] = sysPropValue;\n\t\t\telse if (typeof value !== 'undefined') prev[flag] = value;\n\t\t\treturn prev;\n\t\t}, {});\n\treturn props;\n};\n\nexport const getFeatureFlagValue = flag =>\n\tgetProperty(`${LIST_FEATURE_FLAG_PROPERTY_PREFIX}.${flag}`);\n","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/postcss-loader/src/index.js??ref--6-2!../../../node_modules/sass-loader/dist/cjs.js??ref--6-3!./list.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","module.exports = __TECTONIC__sn_translate;","module.exports = __TECTONIC__lodash_4_17_4[\"isUndefined\"];","module.exports = __TECTONIC__$servicenow_ui_effect_graphql;","import {EMPTY_PARSED_QUERY, OMIT_COUNT} from '../../constants.js';\nimport {Logger} from '../../utils/logger';\nimport {getFilterTypeForColumn} from '../../utils/columnFilteringHelper';\nimport GlideQuery from 'sn-glide-query';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\n\nconst LOG = Logger().createLog('ListModel');\n\n/*\n\tDefault List Attributes. Add any future list attributes here\n*/\nconst listAttributesMap = {\n\t[OMIT_COUNT]: false\n};\n\n/**\n * Hydrate list model from listResource given a table\n * @param  {Object} listResource [description] Seismic resource\n * @param  {String} table        [description]\n * @param  {Number} listId       [description]\n * @return {Object}              [description] List Model\n */\n\nexport const getListModel = ({listResource, orders}) => {\n\tconst tableMetadata = getTableMetadata(listResource);\n\tconst preferenceData = getListPreferenceData(listResource);\n\tconst listAttributes = getListAttributes(listResource);\n\tconst allColumns = getAllColumnsMap({listResource, orders, tableMetadata});\n\tconst layoutQuery = getListLayout(listResource, tableMetadata);\n\tconst tinyUrl = getTinyUrl(listResource);\n\tconst tinyFields = getTinyFields(listResource);\n\n\treturn {\n\t\ttableMetadata,\n\t\tpreferenceData,\n\t\tlistAttributes,\n\t\tallColumns,\n\t\tlayoutQuery,\n\t\ttinyUrl,\n\t\ttinyFields\n\t};\n};\n\nconst getTinyFields = listResource => {\n\tconst tinyUrl = getTinyUrl(listResource);\n\tconst listTitle = getListTitle(listResource);\n\tconst listId = getListId(listResource);\n\tconst query = getQuery(listResource);\n\tconst table = getTable(listResource);\n\tconst columns = getColumns(listResource);\n\treturn {\n\t\ttinyUrl,\n\t\tlistTitle,\n\t\tlistId,\n\t\ttable,\n\t\tcolumns,\n\t\tquery\n\t};\n};\n\nconst getColumns = listResource => {\n\treturn get(listResource, 'allColumns', [])\n\t\t.map(column => get(column, 'columnName'))\n\t\t.join();\n};\n\nconst getTable = listResource => {\n\treturn get(listResource, 'layoutQuery.table');\n};\n\nconst getQuery = listResource => {\n\treturn get(listResource, 'query');\n};\n\nconst getListId = listResource => {\n\treturn get(listResource, 'listId');\n};\n\nconst getListTitle = listResource => {\n\treturn get(listResource, 'listTitle', '');\n};\n\nconst getListAttributes = listResource => {\n\tconst listAttributes = get(listResource, 'listAttributes', []);\n\treturn listAttributes.reduce(\n\t\t(prev, curr) => {\n\t\t\tif (prev[curr] !== undefined) prev[curr] = true;\n\t\t\treturn prev;\n\t\t},\n\t\t{...listAttributesMap}\n\t);\n};\n\nconst getQueryRowColumns = rowData => {\n\treturn rowData.reduce((map, column) => {\n\t\tmap.set(column.columnName, column);\n\t\treturn map;\n\t}, new Map());\n};\n\nconst getDBViewData = row => {\n\treturn get(row, 'dbViewData', []).reduce((map, dbViewCellData) => {\n\t\tconst {tableKey, uniqueId} = dbViewCellData;\n\t\tmap.set(tableKey, uniqueId);\n\t\treturn map;\n\t}, new Map());\n};\n\nconst getHighlightedData = row => {\n\treturn get(row, 'highlightedData', []).reduce(\n\t\t(map, highlightedValueCellData) => {\n\t\t\tconst {field, showIcon, status, value} = highlightedValueCellData;\n\t\t\tmap.set(field, {showIcon, status, value});\n\t\t\treturn map;\n\t\t},\n\t\tnew Map()\n\t);\n};\n\nconst getQueryRowData = row => {\n\treturn {\n\t\tclassName: get(row, 'className', ''),\n\t\tuniqueId: get(row, 'uniqueId', ''),\n\t\tdisplayValue: get(row, 'displayValue', ''),\n\t\thighlightedData: getHighlightedData(row),\n\t\tdbViewData: getDBViewData(row),\n\t\trowData: getQueryRowColumns(row.rowData)\n\t};\n};\n\nconst getQueryRowType = rows => {\n\treturn rows.reduce((map, currentRow) => {\n\t\tconst uniqueId = get(currentRow, 'uniqueId', '');\n\t\tmap.set(uniqueId, getQueryRowData(currentRow));\n\t\treturn map;\n\t}, new Map());\n};\n\nconst getGroupedQueryRows = (rows, isChoiceAggregate) => {\n\treturn rows.reduce((map, currentRow) => {\n\t\tconst {\n\t\t\tdisplayValue,\n\t\t\tvalue,\n\t\t\tfield,\n\t\t\taggregateQuery,\n\t\t\tgroupChoiceTable,\n\t\t\tcount,\n\t\t\tquery = []\n\t\t} = currentRow;\n\n\t\tconst queryRows = getQueryRowType(query);\n\n\t\t// Choice fields can have same value but different display value.\n\t\tconst groupKey = `${value}${isChoiceAggregate ? displayValue : ''}`;\n\n\t\tmap.set(groupKey, {\n\t\t\tdisplayValue,\n\t\t\tvalue,\n\t\t\tfield,\n\t\t\taggregateQuery,\n\t\t\tgroupChoiceTable,\n\t\t\tcount,\n\t\t\tgroupRows: queryRows\n\t\t});\n\t\treturn map;\n\t}, new Map());\n};\n\nconst getQueryRows = (tableMetadata, listResource) => {\n\tconst isGrouped = get(tableMetadata, 'isGrouped', false);\n\tconst queryRows = get(listResource, 'layoutQuery.queryRows', []);\n\tconst isChoiceAggregate = get(\n\t\tlistResource,\n\t\t'layoutQuery.isChoiceAggregate',\n\t\tfalse\n\t);\n\n\treturn isGrouped\n\t\t? getGroupedQueryRows(queryRows, isChoiceAggregate)\n\t\t: getQueryRowType(queryRows);\n};\n\nconst getLayoutQueryField = (listResource, layoutField, defaultValue) => {\n\treturn {\n\t\t[layoutField]: get(listResource, `layoutQuery.${layoutField}`, defaultValue)\n\t};\n};\n\nconst getListLayout = (listResource, tableMetadata) => {\n\treturn {\n\t\t...getLayoutQueryField(listResource, 'allSysIds'),\n\t\t...getLayoutQueryField(listResource, 'count', 0),\n\t\t...getLayoutQueryField(listResource, 'groupCount', -1),\n\t\t...getLayoutQueryField(listResource, 'isChoiceAggregate', false),\n\t\t...getLayoutQueryField(listResource, 'isOmitCount', false),\n\t\t...getLayoutQueryField(listResource, 'omitCountData', null),\n\t\t...getLayoutQueryField(listResource, 'orderByColumn'),\n\t\t...getLayoutQueryField(listResource, 'orderByIsDescending'),\n\t\t...getLayoutQueryField(listResource, 'encodedQuery'),\n\t\t...getLayoutQueryField(listResource, 'table'),\n\t\t...getLayoutQueryField(listResource, 'liveLists', false),\n\t\tqueryRows: getQueryRows(tableMetadata, listResource)\n\t};\n};\n\nconst getTinyUrl = listResource => {\n\treturn get(listResource, 'tiny', '');\n};\n\nconst getAllColumnsMap = ({listResource, orders, tableMetadata}) => {\n\tconst allColumns = get(listResource, 'allColumns', []);\n\tconst {\n\t\tlayoutQuery: {orderByColumn, orderByIsDescending}\n\t} = listResource;\n\tconst {isGrouped} = tableMetadata;\n\n\treturn allColumns.reduce((map, currColumn) => {\n\t\tconst columnName = get(currColumn, 'columnName', '');\n\t\tconst {isSorted, isDescending} = getOrderByForColumn({\n\t\t\torders,\n\t\t\torderByColumn,\n\t\t\torderByIsDescending,\n\t\t\tcolumnName,\n\t\t\tisGrouped\n\t\t});\n\t\tmap.set(columnName, {\n\t\t\t...currColumn,\n\t\t\tfilterType: getFilterTypeForColumn(currColumn),\n\t\t\tisSorted,\n\t\t\tisDescending\n\t\t});\n\t\treturn map;\n\t}, new Map());\n};\n\nexport const getListPreferenceData = listResource =>\n\tget(listResource, 'preferences', []);\n\nexport const getTableMetadata = listResource => {\n\tconst defaultTableMetadata = {\n\t\tisScriptableTable: true,\n\t\tisGrouped: false,\n\t\tgroupedColumn: '',\n\t\tgroupByDisplayValue: '',\n\t\tisDBView: false\n\t};\n\n\tconst fetchedTableMetadata = get(listResource, 'metadata', {});\n\n\treturn merge(defaultTableMetadata, fetchedTableMetadata);\n};\n\n/**\n * Get parsedQuery from list resource\n */\nexport const transformParsedQuery = listData => {\n\tconst encodedParsedQuery = get(listData, 'layoutQuery.encodedQuery', false);\n\tif (!encodedParsedQuery) return EMPTY_PARSED_QUERY;\n\n\ttry {\n\t\tconst decodedQuery = decodeURIComponent(escape(atob(encodedParsedQuery)));\n\t\treturn JSON.parse(decodedQuery);\n\t} catch (ex) {\n\t\tLOG.log(`ERROR: failed to decode and parse GlideQueryParse_Query: ${ex}`);\n\t\treturn EMPTY_PARSED_QUERY;\n\t}\n};\n/**\n * Get ParsedQueryModel for use in filter panel & show filter panel button\n * @param {*} parsedQueryResource\n * @param {*} conditions\n * @param {*} relatedListName\n * @param {*} fixedQuery\n * @param {*} dispatch\n * @return {Object}\n */\nexport const getParsedQueryModel = (\n\tparsedQueryResource,\n\tconditions = '',\n\trelatedListName,\n\tfixedQuery\n) => {\n\tconst glideQuery = new GlideQuery(\n\t\tisEmpty(parsedQueryResource) ? EMPTY_PARSED_QUERY : parsedQueryResource\n\t);\n\tconst count =\n\t\tObject.keys(get(glideQuery, 'comparison_id_map', {})).length +\n\t\tget(glideQuery, 'group_by', []).length;\n\n\treturn {\n\t\tglideQuery,\n\t\tcount,\n\t\tfixedQueries: get(fixedQuery, `${relatedListName}`, '')\n\t\t\t.split('^')\n\t\t\t.filter(query => !isEmpty(query)),\n\t\tqueryString: conditions\n\t};\n};\nexport const createFixedQueryMap = (\n\trelatedListName,\n\tconditions,\n\tfixedQuery\n) => {\n\tif (relatedListName && !has(fixedQuery, relatedListName)) {\n\t\treturn {[relatedListName]: conditions};\n\t}\n\n\treturn {};\n};\n\nconst getOrderByForColumn = ({\n\torders,\n\torderByColumn,\n\torderByIsDescending,\n\tcolumnName,\n\tisGrouped\n}) => {\n\t// special case for reference list -> orders will not have the orderBy,\n\t// so we use orderByCol and orderByDescending\n\tif (isGrouped || (orders.length === 0 && orderByColumn)) {\n\t\treturn {\n\t\t\tisSorted: columnName === orderByColumn,\n\t\t\tisDescending: orderByIsDescending\n\t\t};\n\t}\n\n\tconst orderBy = orders.filter(orderBy => orderBy.column_name === columnName);\n\n\treturn {\n\t\tisSorted: orderBy.length > 0,\n\t\tisDescending: orderBy.length > 0 ? !orderBy[0].ascending : true\n\t};\n};\n","module.exports = __TECTONIC__lodash_4_17_4[\"has\"];","module.exports = __TECTONIC__sn_glide_query_19_4_9;","import {DESC, ORDERBY, ORDERBYDESC, QUERY_DELIMITER} from '../../constants';\nimport compact from 'lodash/compact';\nimport isEmpty from 'lodash/isEmpty';\nimport isString from 'lodash/isString';\n\n/**\n * return sort modifier object\n * @param  {String} fieldName\n * @param  {Bool} isDescending\n * @return {Object}\n */\nexport function createSort(fieldName, isDescending) {\n\treturn {\n\t\tcolumnName: fieldName,\n\t\tisDescending: typeof isDescending === 'undefined' ? false : isDescending\n\t};\n}\n\n/**\n * Deserialize encoded table conditions\n * @param {String} conditionsEncodedQuery\n * @returns {Array}\n */\nexport function deserializeTableConditions(conditions) {\n\t// Do we need to check for leading ?\n\tconst conditionsArr = [];\n\tconst conditionArray = conditions.split(QUERY_DELIMITER);\n\n\t// Get orderby\n\tconditionArray.forEach(item => {\n\t\tconst orderBy = item.indexOf(ORDERBY) >= 0;\n\t\tif (orderBy) {\n\t\t\tconst conditionItem = {};\n\t\t\t// Check for DESC\n\t\t\tconst orderSplit = item.split(ORDERBY);\n\t\t\tif (orderSplit[1].indexOf(DESC) >= 0) {\n\t\t\t\tconst descSplit = orderSplit[1];\n\t\t\t\tconditionItem.columnName = descSplit.split(DESC)[1];\n\t\t\t\tconditionItem.isDescending = true;\n\t\t\t} else {\n\t\t\t\t// We don't have a sort direction set a default\n\t\t\t\tconditionItem.columnName = orderSplit[1];\n\t\t\t\tconditionItem.isDescending = false;\n\t\t\t}\n\t\t\tconditionsArr.push(conditionItem);\n\t\t}\n\t});\n\n\treturn conditionsArr;\n}\n\nexport function stripOrderBy(conditions) {\n\tif (!isString(conditions) || isEmpty(conditions)) {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Creates a new array without empty values or items that are ORDERBYs\n\t */\n\treturn stripConditions(conditions, ORDERBY);\n}\n\n/**\n * takes conditions, breaks them apart into an array\n * by QUERY_DELIMITER and filters out what isn't needed\n * @param {String} conditions\t'active=true^nameSTARTSWITHted^ORDERBYname'\n * @param {String} filterBy\t\t'ORDERBY'\n * @return {String} \t\t\tnew string value (ie. 'active=true^nameSTARTSWITHted')\n */\nexport function stripConditions(conditions, filterBy) {\n\treturn compact(conditions.split(QUERY_DELIMITER))\n\t\t.filter(part => part.indexOf(filterBy) === -1)\n\t\t.join(QUERY_DELIMITER);\n}\n\n/**\n * take object of list modifiers and return an SN querystring\n * @param  {Object} modifiers searchTerm, conditions, orderBy\n * @return {String}           SN query string\n */\nexport function toQueryString(modifiers) {\n\tlet encodedQuery = [];\n\n\tif (modifiers.searchTerm) {\n\t\tencodedQuery.push(modifiers.searchTerm);\n\t}\n\n\tif (modifiers.conditions && !isEmpty(modifiers.orderBy)) {\n\t\tconst cond = stripOrderBy(modifiers.conditions);\n\t\tmodifiers.conditions = cond;\n\t}\n\n\tif (modifiers.conditions) {\n\t\tencodedQuery.push(modifiers.conditions);\n\t}\n\n\tif (!isEmpty(modifiers.orderBy)) {\n\t\tconst dir = modifiers.orderBy.isDescending ? ORDERBYDESC : ORDERBY;\n\t\tencodedQuery.push(dir + modifiers.orderBy.columnName);\n\t}\n\n\treturn encodedQuery.join(QUERY_DELIMITER);\n}\n\n/**\n * Takes a query condition string and removes leading delimiters\n *\n * @param  {String} condition\n * @return {String}\n */\nexport function stripLeadingDelimiters(condition) {\n\tif (condition.startsWith('^NQ')) {\n\t\treturn condition.substring(3);\n\t}\n\tif (condition.startsWith(QUERY_DELIMITER)) {\n\t\treturn condition.substring(1);\n\t}\n\treturn condition;\n}\n","module.exports = __TECTONIC__$servicenow_ui_metrics;","module.exports = __TECTONIC__lodash_4_17_4[\"isEqual\"];","export {\n\tdefault as nowRecordListConnected\n} from './components/list/recordListConnected';\nexport {\n\tdefault as nowRecordListConnectedReference\n} from './components/list/recordListConnectedReference';\nexport {\n\tdefault as nowRecordListConnectedRelated\n} from './components/list/recordListConnectedRelated';\nexport {\n\tdefault as nowRecordListConnectedPicker\n} from './components/list/recordListConnectedPicker';\nexport {\n\tdefault as nowRecordListConnectedSnapshot\n} from './components/list/recordListConnectedSnapshot';\nexport {\n\tdefault as listDataProvider\n} from './components/dataProviders/list/listDataProvider';\nexport {\n\tdefault as snListNavigationClient\n} from './components/listNavigationClient/listNavigationClient';\n","import '@servicenow/now-alert';\nimport {\n\tCOMPONENT_DOM_READY,\n\tPROPERTIES_SET\n} from '@servicenow/ui-core/lib/constants';\nimport {\n\tDATA_PROVIDER_BOOTSTRAP,\n\tFETCH_DA,\n\tGRID_CELL_MAXCHAR,\n\tLIST_ID_CHANGED,\n\tLIST_REFRESH_REQUESTED_INTERNAL,\n\tLIST_TYPES,\n\tLIST_TYPE_REFERENCE,\n\tLIST_USER_PREFERENCE_ROWCOUNT,\n\tRECORD_LIST_SELECTED_COUNT_RESET,\n\tSET_ORIGINAL_CONDITONS\n} from '../../constants';\nimport {default as actionHandlers} from './actions/index';\nimport {createCustomElement} from '@servicenow/ui-core';\n/* eslint-disable */\nimport {\n\tdefaultFeatureFlags,\n\tdirtyBehavior,\n\tnowRecordList\n} from '@servicenow/now-record-list';\nimport {types as metrics} from '@servicenow/ui-metrics';\n/* eslint-enable */\nimport {ariaLiveBehavior} from '@devsnc/sn-list-commons';\nimport {getAriaLiveLoadingRegion, getDBViewFeatureFlags} from './listUtils';\nimport {getFeatureFlagsFromProperties} from '../../utils/featureFlags';\nimport {getUserPreference, userPreferencesBehavior} from 'sn-user-preferences';\nimport {default as listDataProvider} from '../dataProviders/list/listDataProvider';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport packageJson from '../../../package.json';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\nimport styles from './list.scss';\n\nconst view = (state, {updateState}) => {\n\tconst {\n\t\tcomponentId,\n\t\tproperties,\n\t\tproperties: {\n\t\t\tactionConfigId,\n\t\t\talertList,\n\t\t\tallRecordsSelected,\n\t\t\tapplyLimit,\n\t\t\tcolumns,\n\t\t\tcolumnsResized,\n\t\t\tcolumnWidths,\n\t\t\tdataUpdatedTime,\n\t\t\tdeclarativeActions,\n\t\t\terror,\n\t\t\texceptedRecords,\n\t\t\tfixedQuery,\n\t\t\thighlightContent,\n\t\t\tisDirty,\n\t\t\tisRefList,\n\t\t\tlistMenuOpen,\n\t\t\tlistTitle,\n\t\t\tlistType,\n\t\t\tloading,\n\t\t\tmaxCharLimit,\n\t\t\tmaxColumns,\n\t\t\tmenuSelection,\n\t\t\tmodel,\n\t\t\tnowMetricTypes,\n\t\t\torderBy,\n\t\t\toriginalConditions,\n\t\t\tpage,\n\t\t\tpanelConfig,\n\t\t\tpanelOpened,\n\t\t\tparsedQueryModel,\n\t\t\tquery,\n\t\t\tselectedListId,\n\t\t\tselectedRecords,\n\t\t\ttable,\n\t\t\ttransitoryLimit,\n\t\t\ttransitoryPage,\n\t\t\tuserPreferenceOrderBy,\n\t\t\tuserPreferences,\n\t\t\tview,\n\t\t\twordWrap,\n\t\t\tworkspaceConfigId,\n\t\t\tcascadeDelete\n\t\t},\n\t\tloadAriaLabel,\n\t\tcolumnWidthsResetRequested,\n\t\tisWorkspace,\n\t\tliveListUpdates,\n\t\tliveListCount = 0,\n\t\tsubscriptionParameters\n\t} = state;\n\n\t// Special case for PRB1341609. EDS will not fix eds modal height until Orlando. Hardcoding reference list height to fit in large modal\n\tconst listHeight = listType === LIST_TYPE_REFERENCE ? '424px' : '100%';\n\tconst hasAlertList = alertList && !isEmpty(alertList);\n\tconst dbViewFeatureFlags = getDBViewFeatureFlags(model);\n\n\t// If we get the title from the tiny request use that, otherwise the one from the list menu\n\tconst title = get(model, 'listTitle', listTitle);\n\tconst liveLists =\n\t\tget(model, `layoutQuery.liveLists`, false) &&\n\t\t!isEmpty(subscriptionParameters);\n\n\treturn (\n\t\t<div style={{height: listHeight}}>\n\t\t\t{hasAlertList ? (\n\t\t\t\t<now-alert-list items={alertList} manageItems={true} />\n\t\t\t) : null}\n\t\t\t{getAriaLiveLoadingRegion({\n\t\t\t\tlistTitle,\n\t\t\t\ttable,\n\t\t\t\tloading,\n\t\t\t\tloadAriaLabel,\n\t\t\t\tupdateState\n\t\t\t})}\n\t\t\t<now-record-list\n\t\t\t\tactionConfigId={actionConfigId}\n\t\t\t\tallRecordsSelected={allRecordsSelected}\n\t\t\t\tcolumns={columns}\n\t\t\t\tcolumnsResized={columnsResized || columnWidths.length > 0}\n\t\t\t\tcolumnWidths={columnWidths}\n\t\t\t\tcolumnWidthsResetRequested={columnWidthsResetRequested}\n\t\t\t\tconditions={query}\n\t\t\t\tdataUpdatedTime={dataUpdatedTime}\n\t\t\t\tdeclarative-actions={declarativeActions}\n\t\t\t\terror={error}\n\t\t\t\texceptedRecords={exceptedRecords}\n\t\t\t\tfixedQuery={fixedQuery}\n\t\t\t\thighlightContent={highlightContent}\n\t\t\t\tinstance-id={componentId}\n\t\t\t\tisDirty={isDirty}\n\t\t\t\tis-ref-list={isRefList}\n\t\t\t\tisWorkspace={isWorkspace}\n\t\t\t\tlimit={applyLimit}\n\t\t\t\tlist-menu-open={listMenuOpen}\n\t\t\t\tlist-model={model}\n\t\t\t\tlistTitle={title}\n\t\t\t\tlist-type={listType}\n\t\t\t\tliveLists={liveLists}\n\t\t\t\tliveListUpdates={liveListUpdates}\n\t\t\t\tliveListCount={liveListCount}\n\t\t\t\tloading={loading}\n\t\t\t\tmaxCharLimit={maxCharLimit}\n\t\t\t\tmaxColumns={maxColumns}\n\t\t\t\tmenuSelection={menuSelection}\n\t\t\t\tnowMetricTypes={nowMetricTypes}\n\t\t\t\tpanelOpened={panelOpened}\n\t\t\t\toriginalConditions={originalConditions}\n\t\t\t\torder-by={isEmpty(orderBy.columnName) ? userPreferenceOrderBy : orderBy}\n\t\t\t\tpage={page}\n\t\t\t\tparsed-query-model={parsedQueryModel}\n\t\t\t\tselectedListId={selectedListId}\n\t\t\t\tselectedRecords={selectedRecords}\n\t\t\t\ttransitoryPage={transitoryPage}\n\t\t\t\ttransitoryLimit={transitoryLimit}\n\t\t\t\tuserPreferences={userPreferences}\n\t\t\t\tcascade-delete={cascadeDelete}\n\t\t\t\twordWrap={wordWrap}\n\t\t\t\tworkspace-config-id={workspaceConfigId}\n\t\t\t\ttable={table}\n\t\t\t\tview={view}\n\t\t\t\t{...getFeatureFlagsFromProperties(properties)}\n\t\t\t\t{...dbViewFeatureFlags}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\n/**\n * Interactive, in-product list of records from a table that enables users to navigate, filter, and access data.\n *\n * ```jsx\n * <now-record-list-connected\n * \ttable=\"incident\" listTitle=\"Incidents\" />\n * ```\n *\n *\n * @seismicElement now-record-list-connected\n * @summary Displays records from a table in configurable columns with sorting and filtering capabilities.\n */\ncreateCustomElement('now-record-list-connected', {\n\trenderer: {\n\t\ttype: snabbdom,\n\t\tview\n\t},\n\tstyles,\n\tproperties: {\n\t\t/**\n\t\t * Configuration used to source specific declarative actions.\n\t\t * Only DEFAULT and RELATED list types are supported.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tactionConfigId: {},\n\n\t\t/**\n\t\t * Highlighted value configuration you want to use for the list. Required if using highlighted values.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\thighlightedValueConfigId: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tdeclarativeActions: {default: []},\n\n\t\t/**\n\t\t * Workspace configuration you want to use for the list. Required if using declarative actions.\n\t\t * Only DEFAULT and RELATED list types are supported.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tworkspaceConfigId: {},\n\n\t\t/**\n\t\t * Current list variant requested. Available options DEFAULT, RELATED, REFERENCE\n\t\t * @private\n\t\t * @type {('DEFAULT'|'RELATED'|'REFERENCE')}\n\t\t */\n\t\tlistType: {default: LIST_TYPES.DEFAULT},\n\n\t\t/**\n\t\t * Title to display at the top of list.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tlistTitle: {default: ''},\n\n\t\t/**\n\t\t * Table to render in the list. Required.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\ttable: {default: ''},\n\n\t\t/**\n\t\t * Comma separated list of columns to render. Overrides the `view` property if the columns to render are different.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tcolumns: {default: ''},\n\n\t\t/**\n\t\t * Platform defined `view` used to determine which columns to render.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tview: {\n\t\t\tdefault: undefined\n\t\t},\n\n\t\t/**\n\t\t * Number of records to render per page.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tlimit: {\n\t\t\tdefault: undefined,\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\tapplyLimit: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Helper to apply Number of records to render per page\n\t\t * @private\n\t\t */\n\t\tapplyLimit: {\n\t\t\tdefault: 20,\n\t\t\tcomputed(state) {\n\t\t\t\tconst {\n\t\t\t\t\tproperties: {limit}\n\t\t\t\t} = state;\n\t\t\t\tconst defaultLimit = 20;\n\t\t\t\treturn limit\n\t\t\t\t\t? limit\n\t\t\t\t\t: parseInt(\n\t\t\t\t\t\t\tgetUserPreference(\n\t\t\t\t\t\t\t\tLIST_USER_PREFERENCE_ROWCOUNT,\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tdefaultLimit\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t10\n\t\t\t\t\t  ) || defaultLimit;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Initial page to render.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tpage: {default: 1},\n\n\t\t/**\n\t\t * Encoded query string to filter results by.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tquery: {\n\t\t\tdefault: '',\n\t\t\tonChange(newVal, oldVal, {dispatch}) {\n\t\t\t\tdispatch(RECORD_LIST_SELECTED_COUNT_RESET);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Number of milliseconds the scroll handle waits to execute.\n\t\t * Changing this value may affect performance.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tscrollHandlerThrottle: {default: '100'},\n\n\t\t/**\n\t\t * Maximum number of columns to display in the list.\n\t\t * Works in conjunction with either `columns` or `view` properties. To return all columns, set the value to 0.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tmaxColumns: {default: 0},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tselectedRecords: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\texceptedRecords: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * When true, all records across all lists are selected.\n\t\t * Required: No\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tallRecordsSelected: {default: false},\n\n\t\t/**\n\t\t * Triggers a refresh\n\t\t * Required: No\n\t\t * @private\n\t\t * @type {{}}\n\t\t */\n\t\trefreshRequested: {\n\t\t\tdefault: {\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tbackground: false,\n\t\t\t\tloaderDuration: 0\n\t\t\t},\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tconst {\n\t\t\t\t\ttimestamp,\n\t\t\t\t\tbackground,\n\t\t\t\t\tloaderDuration,\n\t\t\t\t\tfromButton = false\n\t\t\t\t} = newValue;\n\t\t\t\tif (timestamp === oldValue.timestamp) return;\n\t\t\t\tif (fromButton) return;\n\n\t\t\t\tdispatch(LIST_REFRESH_REQUESTED_INTERNAL, {\n\t\t\t\t\ttimestamp,\n\t\t\t\t\tbackground,\n\t\t\t\t\tloaderDuration\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tdeclarativeActionsRefreshRequested: {\n\t\t\tdefault: {\n\t\t\t\ttimestamp: Date.now()\n\t\t\t},\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tconst {timestamp} = newValue;\n\t\t\t\tif (timestamp === oldValue.timestamp) return;\n\n\t\t\t\tdispatch(FETCH_DA);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tloading: {\n\t\t\tdefault: true,\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tupdateUserPrefs: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tpreferencesParsed: {\n\t\t\tdefault: false\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcolumnWidths: {default: []},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcolumnsResized: {default: false},\n\n\t\t/**\n\t\t * Comes from order by update which is updated in set sort. Check to see if an action is dispatched\n\t\t *\n\t\t * @private\n\t\t */\n\t\torderBy: {\n\t\t\tdefault: {\n\t\t\t\tcolumnName: undefined,\n\t\t\t\tisDescending: undefined\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * For use with the list-menu. Determines which table the list selection comes from. For example, 'sys_aw_list' or 'sys_ux_list'.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tmenuSelection: {default: ''},\n\n\t\t/**\n\t\t * Comes from list model. Can be removed. Does not need to be passed into state.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tselectedListId: {\n\t\t\tdefault: '',\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(LIST_ID_CHANGED);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Passed down to list header props\n\t\t *\n\t\t * @private\n\t\t */\n\t\ttimeAccessed: {default: Date.now()},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tparsedQueryModel: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * When true, reference fields appear as plain text instead of links.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tisRefList: {\n\t\t\tdefault: false\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\talertList: {default: []},\n\n\t\t/**\n\t\t * When true, text wraps in all columns of the list.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\twordWrap: {default: false},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toriginalConditions: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tfixedQuery: {default: {}},\n\n\t\t/**\n\t\t * Sys ID that represents a shared list and its applied conditions.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\ttiny: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tnowMetricTypes: {\n\t\t\tdefault: [metrics.RENDER_TREE, metrics.GQL, metrics.HERO_INTERACTIVE]\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisDirty: {\n\t\t\tdefault: false\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\titemSelectedActionSuffix: {default: ''},\n\n\t\t/**\n\t\t * Indicates that the list has experienced an error.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\terror: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * Indicates which table is selected.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedTable: {\n\t\t\tdefault: '',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates the selected list's Sys ID.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedSysId: {\n\t\t\tdefault: '',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates which query applies to the current table.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedQuery: {\n\t\t\tdefault: '',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates the view of the current table.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedView: {\n\t\t\tdefault: 'workspace',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates available declarative actions that can be mapped to in UI Builder.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tdaClientActionContract: {\n\t\t\tdefault: {},\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates which CRUD (create, read, update, delete) action is requested for the current list.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tlistCrud: {\n\t\t\tdefault: {},\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * When true, the user has collapsed the list menu.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tlistMenuOpen: {\n\t\t\tdefault: true,\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Maximum character limit on the text displayed in grid row cells.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tmaxCharLimit: {\n\t\t\tdefault: GRID_CELL_MAXCHAR\n\t\t},\n\n\t\t/**\n\t\t * Object used to highlight content with given patterns and color.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\thighlightContent: {default: {patterns: [], color: ''}},\n\n\t\t/**\n\t\t * cascadedelete object which holds GraphQL result.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tcascadeDelete: {\n\t\t\tdefault: {}\n\t\t}\n\t},\n\tonConnect(host) {\n\t\tif (!window.listComponentRegistry) {\n\t\t\twindow.listComponentRegistry = new WeakMap();\n\t\t}\n\t\twindow.listComponentRegistry.set(host, packageJson.version);\n\t},\n\tonDisconnect(host) {\n\t\tif (window.listComponentRegistry) {\n\t\t\twindow.listComponentRegistry.delete(host);\n\t\t}\n\t},\n\t// onBootstrap(host, {dispatch}) {\n\t// \tdispatch(SET_ORIGINAL_CONDITONS);\n\t// \tdispatch(DATA_PROVIDER_BOOTSTRAP);\n\t// },\n\tactionHandlers: {\n\t\t...actionHandlers,\n\t\t[COMPONENT_DOM_READY]: {\n\t\t\teffect: ({dispatch}) => {\n\t\t\t\tdispatch(SET_ORIGINAL_CONDITONS);\n\t\t\t\tdispatch(DATA_PROVIDER_BOOTSTRAP);\n\t\t\t}\n\t\t}\n\t},\n\tinitialState: {\n\t\tqueuedUserPrefUpdates: [],\n\t\thasFetched: false,\n\t\tisWorkspace: false,\n\t\tcolumnWidthsResetRequested: {\n\t\t\ttimestamp: Date.now()\n\t\t}\n\t},\n\tbehaviors: [\n\t\tariaLiveBehavior,\n\t\tuserPreferencesBehavior,\n\t\tdefaultFeatureFlags,\n\t\tlistDataProvider,\n\t\tdirtyBehavior\n\t],\n\tdispatches: {\n\t\t/**\n\t\t * Dispatched when the user clicks the first link in a row. Contains all data from the row, including all cells, the table involved, and the Javascript event object.\n\t\t *\n\t\t * @type {{row: {}, table: string, nativeEvent: Event, sys_id: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#ROW_CLICKED': {},\n\n\t\t/**\n\t\t * Dispatched when a row is selected or the list query changes. Contains the number of records selected, whether it includes all records, the arrays of selectedRecords and exceptedRecords, and the table and query that represent the records selected.\n\t\t *\n\t\t * @type {{count: number, allRecordsSelected: boolean, query: string, table: string}}\n\t\t *\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SELECTED_RECORD_COUNT_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when the page changes. Contains the new page, the previous page, and the current table.\n\t\t *\n\t\t * @type {{page: number, prevPage: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#PAGE_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when the limit changes. Contains the new limit, the previous limit, and the current table.\n\t\t *\n\t\t * @type {{limit: number, prevLimit: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#LIMIT_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when the query string changes. Contains the new query, the previous query, and the current table.\n\t\t *\n\t\t * @type {{query: string, prevQuery: string, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#QUERY_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when the user scrolls the list. Triggers once per second. Contains the Unix timestamp and table.\n\t\t *\n\t\t * @type {{timestamp: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SCROLL_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when data is requested by a record list. Contains the Unix timestamp and all required parameters to fetch new list data.\n\t\t *\n\t\t * @type {{timestamp: number, columns: string, limit: number, page: number, query: string, table: string, view: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_REQUESTED': {},\n\n\t\t/**\n\t\t * Dispatched when a data request succeeds. Contains the Unix timestamp and the list model, list title, query, and table.\n\t\t *\n\t\t * @type {{timestamp: string, model: object, listTitle: string, query: string, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_SUCCEEDED': {},\n\n\t\t/**\n\t\t * Dispatched when a data request fails. Contains the error information.\n\t\t *\n\t\t * @type {{error: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_FAILED': {},\n\n\t\t/**\n\t\t * Dispatched when the user selects an item from the list menu. Contains the item name.\n\t\t *\n\t\t * @type {{name: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#MENU_ITEM_SELECTED': {},\n\n\t\t/**\n\t\t * Dispatched when the user clicks the info icon of a field on the quick-edit form.\n\t\t *\n\t\t * @type {{table: string, sys_id: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#FORM_EDIT_PREVIEW_RECORD_CLICKED': {},\n\n\t\t/**\n\t\t * Dispatched when a declarative action with the client action payload key 'RECORD_COMMON#ACTION_CLICKED' is emitted.\n\t\t *\n\t\t * @type {{wrappedAction: string, wrappedPayload: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DA_WRAPPED_CLICKED': {},\n\n\t\t/**\n\t\t * Dispatched when the list refreshes.\n\t\t *\n\t\t * @type {{timestamp: string, fromButton: boolean}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#REFRESH_REQUESTED': {},\n\n\t\t/**\n\t\t * Dispatched when the user selects the Edit columns action from the list actions toolbar.\n\t\t *\n\t\t * @type {{timestamp: string, currentListData: object, update: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#EDIT_COLUMNS_REQUESTED': {},\n\n\t\t/**\n\t\t * Dispatched when the user selects the Delete action from the list actions toolbar.\n\t\t *\n\t\t * @type {{timestamp: string, currentListData: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DELETE_REQUESTED': {},\n\n\t\t/**\n\t\t * Dispatched when the user selects the Rename action from the list actions toolbar.\n\t\t *\n\t\t * @type {{timestamp: string, currentListData: object, update: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#RENAME_REQUESTED': {},\n\n\t\t/**\n\t\t * Dispatched when the user selects the Reset Widths action from the list actions toolbar.\n\t\t *\n\t\t * @type {{columnWidths: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#RESET_COLUMN_WIDTH_REQUESTED': {},\n\n\t\t/**\n\t\t * Dispatched when the user selects the Save As action from the list actions toolbar.\n\t\t *\n\t\t * @type {{timestamp: string, currentListData: object, update: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SAVE_AS_REQUESTED': {},\n\n\t\t/**\n\t\t * Dispatched when the user selects the Save action from the list actions toolbar.\n\t\t *\n\t\t * @type {{timestamp: string, currentListData: object, update: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SAVE_REQUESTED': {},\n\n\t\t/**\n\t\t * Dispatched when the user selects the list menu toggle button.\n\t\t *\n\t\t * @type {{listMenuOpen: boolean}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#LIST_MENU_BUTTON_TOGGLED': {},\n\n\t\t/**\n\t\t * DEPRECATED ACTIONS\n\t\t */\n\t\t/**\n\t\t * Dispatched when page limit is updated.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{limit: number}}\n\t\t */\n\t\tLIST_LIMIT_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when page number is updated.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{page: number}}\n\t\t */\n\t\tLIST_PAGE_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched Fired when user initiates scroll\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{timestamp: number, table: string}}\n\t\t */\n\t\tLIST_SCROLL_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when a list row is clicked to open a record\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{row: object, table: string, nativeEvent: object}}\n\t\t */\n\t\tLIST_ROW_CLICK_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched on change of the conditions to retrieve the data.\n\t\t * example sorting, apply/remove filter conditions, groupby\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{query: string}}\n\t\t */\n\t\tLIST_QUERY_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when list data retrieval is complete.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{timestamp: number, count: number}}\n\t\t */\n\t\tLIST_DATA_FETCH_COMPLETE: {}\n\t}\n});\n","import {\n\tALERT_CONSTANTS,\n\tCASCADE_DELETE_GRAPHQL_EFFECT,\n\tCASCADE_DELETE_GRAPHQL_EFFECT_RESULT,\n\tCASCADE_DELETE_GRAPHQL_POPUP_EFFECT,\n\tCASCADE_DELETE_GRAPHQL_POPUP_EFFECT_RESULT,\n\tLIST_REFRESH_REQUESTED_INTERNAL,\n\tRECORD_LIST_NOTIFICATION_ADDED\n} from '../../../constants';\nimport {\n\tcascadeDeletePopupQuery,\n\tcascadeDeleteQuery\n} from '../../../schemas/cascadeDelete';\nimport {createGraphQLEffect} from '@servicenow/ui-effect-graphql';\nimport {t} from 'sn-translate';\nimport get from 'lodash/get';\n\nconst getAlertContent = (\n\tallRecordsDeleted,\n\trecordsNotDeleted,\n\tselectedRecords\n) => {\n\treturn allRecordsDeleted\n\t\t? t('{0} record(s) have been successfully deleted.', selectedRecords.length)\n\t\t: t('Not able to delete {0} record(s).', recordsNotDeleted);\n};\n\nconst cascadeDeleteGraphQlSuccessEffect = props => {\n\tconst {\n\t\tdispatch,\n\t\tproperties: {selectedRecords},\n\t\tupdateProperties\n\t} = props;\n\tconst deletedRecords = get(\n\t\tprops.action,\n\t\t'payload.data.GlideCascadeDelete_Query.deleteResult',\n\t\t0\n\t);\n\tconst allRecordsDeleted = selectedRecords.length === deletedRecords;\n\n\tconst alertStatus = ALERT_CONSTANTS.STATUS.INFO;\n\tconst alertContent = getAlertContent(\n\t\tallRecordsDeleted,\n\t\tparseInt(selectedRecords.length - deletedRecords, 10),\n\t\tselectedRecords\n\t);\n\tupdateProperties({\n\t\tcascadeDelete: {\n\t\t\trecordsDeleted: true\n\t\t}\n\t});\n\tdispatch(LIST_REFRESH_REQUESTED_INTERNAL, {timestamp: Date.now()});\n\tdispatch(RECORD_LIST_NOTIFICATION_ADDED, {\n\t\talertList: [\n\t\t\t{\n\t\t\t\tid: `cascade_delete_status`,\n\t\t\t\tstatus: alertStatus,\n\t\t\t\tcontent: alertContent,\n\t\t\t\taction: {\n\t\t\t\t\ttype: ALERT_CONSTANTS.ACTION.TYPES.DISMISS,\n\t\t\t\t\tlabel: t('Dismiss')\n\t\t\t\t},\n\t\t\t\ticon: 'check-fill'\n\t\t\t}\n\t\t]\n\t});\n};\n\nexport default {\n\t[CASCADE_DELETE_GRAPHQL_POPUP_EFFECT]: createGraphQLEffect(\n\t\tcascadeDeletePopupQuery,\n\t\t{\n\t\t\tvariableList: ['table', 'objSysId', 'stackName'],\n\t\t\tsuccessActionType: CASCADE_DELETE_GRAPHQL_POPUP_EFFECT_RESULT,\n\t\t\terrorActionType: CASCADE_DELETE_GRAPHQL_POPUP_EFFECT_RESULT\n\t\t}\n\t),\n\t[CASCADE_DELETE_GRAPHQL_POPUP_EFFECT_RESULT]: {\n\t\teffect: props => {\n\t\t\tconst data = get(\n\t\t\t\tprops.action,\n\t\t\t\t'payload.data.GlideCascadeDelete_Query.result',\n\t\t\t\t''\n\t\t\t);\n\t\t\tprops.updateProperties({\n\t\t\t\tcascadeDelete: {\n\t\t\t\t\tcascadeContent: data\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t[CASCADE_DELETE_GRAPHQL_EFFECT]: createGraphQLEffect(cascadeDeleteQuery, {\n\t\tvariableList: ['table', 'objSysIdStr'],\n\t\tsuccessActionType: CASCADE_DELETE_GRAPHQL_EFFECT_RESULT,\n\t\terrorActionType: CASCADE_DELETE_GRAPHQL_EFFECT_RESULT\n\t}),\n\t[CASCADE_DELETE_GRAPHQL_EFFECT_RESULT]: {\n\t\teffect: cascadeDeleteGraphQlSuccessEffect,\n\t\tstopPropagation: true\n\t}\n};\n","export const cascadeDeletePopupQuery = `query($table: String!, $objSysId: String!, $stackName: String!) {\n\tGlideCascadeDelete_Query {\n\t  result : getCascadeDeleteTables(table: $table, objSysId: $objSysId, stackName: $stackName) {\n\t\tcascadeRecords {\n\t\t\tcascadeRecordName\n\t\t\tcascadeTables {\n\t\t\t\tnumRecs\n\t\t\t\trefTableName\n\t\t\t\trecordDetails\n\t\t\t}\n        }\n\t\tlimitExceeded\n\t\ttotalCount\n\t  }\n\t}\n  }`;\n\nexport const cascadeDeleteQuery = `query($table: String!, $objSysIdStr: String!) {\n\tGlideCascadeDelete_Query {\n\t  deleteResult : getProceedWithListDelete(table: $table, objSysIdStr: $objSysIdStr) \n\t}\n  }`;\n","import * as ListActionsService from '../../../services/listActionsService';\nimport {\n\tADD_COMPLEX_FILTER_COMPARISON,\n\tADD_FILTER_COMPARISON,\n\tADD_NOTIFICATIONS,\n\tADVANCED_VIEW_SET_QUERY,\n\tALERT_LIST,\n\tCOMPONENT_PROPERTY_CHANGED,\n\tCONNECTED_LIST_MENU_BUTTON_TOGGLED,\n\tCONNECTED_LIST_RESET_COLUMN_WIDTH_REQUESTED,\n\tCONNECTED_LIST_VIEW_ALL_CLICKED,\n\tDATA_PROVIDER_BOOTSTRAP,\n\tDELETE_COMPLEX_FILTER_COMPARISON,\n\tDELETE_FILTER_COMPARISON,\n\tDOCUMENT_ID,\n\tEQUALS,\n\tGENERIC_REFRESH_REQUESTED,\n\tGRID_CHECKBOX_TOGGLED,\n\tIN,\n\tITEM_SELECTED,\n\tLIMIT_UPDATE,\n\tLIST_ADD_GROUPBY,\n\tLIST_CHECKBOX_TOGGLED,\n\tLIST_DELETE_CONDITION,\n\tLIST_ID_CHANGED,\n\tLIST_LIMIT_UPDATED,\n\tLIST_MENU_CRUD,\n\tLIST_OPEN_GROUP,\n\tLIST_PAGE_RESET,\n\tLIST_PAGE_UPDATED,\n\tLIST_PROP_RESET,\n\tLIST_QUERY_UPDATED,\n\tLIST_REFRESH_REQUESTED,\n\tLIST_REFRESH_REQUESTED_INTERNAL,\n\tLIST_REMOVE_GROUPBY,\n\tLIST_RESTORE_DEFAULTS,\n\tLIST_ROW_CLICK_UPDATED,\n\tLIST_SCROLL_UPDATED,\n\tLIST_SELECTION_COUNT_UPDATED,\n\tLIST_SELECT_FROM_DROPDOWN,\n\tLIST_TYPE_REFERENCE,\n\tLIST_TYPE_RELATED,\n\tLIST_UPDATE_COLUMNS_RESIZED,\n\tLIST_UPDATE_COLUMN_WIDTH_USER_PREF,\n\tLIST_UPDATE_EXPORT_USER_PREF,\n\tLIST_UPDATE_PREFERENCES,\n\tLIST_UPDATE_PREFERENCES_LAZY,\n\tLIST_UPDATE_SORT,\n\tLIST_USER_PREFERENCE,\n\tLIST_USER_PREFERENCE_COL_WIDTH,\n\tMUTATE_COMPLEX_FILTER_COMPARISON,\n\tMUTATE_FILTER_COMPARISON,\n\tOPEN_RECORD,\n\tPAGE_UPDATE,\n\tPARSED_QUERY_SET,\n\tPREF_GROUP_TOGGLE,\n\tPREF_GROUP_TOGGLE_ALL,\n\tPREVIEW_RECORD,\n\tPROPERTIES_SET,\n\tRECORD_LIST_LIMIT_UPDATED,\n\tRECORD_LIST_MENU_ITEM_SELECTED,\n\tRECORD_LIST_NOTIFICATION_ADDED,\n\tRECORD_LIST_PAGE_UPDATED,\n\tRECORD_LIST_QUERY_UPDATED,\n\tRECORD_LIST_ROW_CLICKED,\n\tRECORD_LIST_SCROLL_UPDATED,\n\tRECORD_LIST_SELECTED_COUNT_RESET,\n\tRECORD_LIST_SELECTED_COUNT_UPDATED,\n\tREFERENCE,\n\tSELECT_ALL_RECORDS,\n\tSET_ORIGINAL_CONDITONS,\n\tTOGGLE_LIST_MENU\n} from '../../../constants';\n\nimport {\n\tLIST_RESET_COLUMN_WIDTH_REQUESTED,\n\tLIST_VIEW_ALL_CLICKED\n} from '@servicenow/now-record-list';\n\nimport {Logger} from '../../../utils/logger';\nimport {USER_PREF_MULTI_UPDATE, USER_PREF_UPDATE} from 'sn-user-preferences';\nimport {actionTypes} from '@servicenow/ui-core';\nimport {addConditionToQuery} from '../../../services/listActionsService';\nimport {createFixedQueryMap} from '../listModel';\nimport {\n\tcreateSort,\n\tstripLeadingDelimiters,\n\tstripOrderBy,\n\ttoQueryString\n} from '../../list/listModifierUtils';\nimport {\n\texternalActionService,\n\tgetMutateOptions,\n\tgetNewComplexEncodedQuery,\n\tgetNewGlideQuery,\n\tgetQuery,\n\tisDirtyFormAndBackgroundRefreshRequest,\n\tmodifyComparison,\n\torderSelectedChoices,\n\tremoveComparisonsFromCompound,\n\tremoveSingleComparisonFromCompound\n} from '../../list/listUtils';\nimport {getInteractionId, mark, types as metrics} from '@servicenow/ui-metrics';\nimport {limitUserPrefUpdate, sortUserPrefUpdate} from '../../list/listReducers';\nimport castArray from 'lodash/castArray';\nimport cloneDeep from 'lodash/cloneDeep';\nimport cuid from 'cuid';\nimport debounce from 'lodash/debounce';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport isUndefined from 'lodash/isUndefined';\nimport keyBy from 'lodash/keyBy';\nimport toArray from 'lodash/toArray';\nimport uniq from 'lodash/uniq';\nimport without from 'lodash/without';\n\nconst {COMPONENT_TREE_RENDERED} = actionTypes;\nconst LOG = Logger().createLog('ListComponentActions');\n\nconst handlePropertyChanged = coeffects => {\n\tconst {\n\t\tdispatch,\n\t\taction: {payload},\n\t\tproperties: {isDirty, model},\n\t\tstate: {isWorkspace}\n\t} = coeffects;\n\tconst {name, value, previousValue} = payload;\n\tconst dependentProperties = [\n\t\t'chars',\n\t\t'columns',\n\t\t'encodedRecord',\n\t\t'field',\n\t\t'groupLimit',\n\t\t'id',\n\t\t'ignoreRefQual',\n\t\t'limit',\n\t\t'listTitle',\n\t\t'listType',\n\t\t'maxColumns',\n\t\t'page',\n\t\t'parentTable',\n\t\t'query',\n\t\t'recordSysId',\n\t\t'refresh',\n\t\t'refreshRequested',\n\t\t'relatedListName',\n\t\t'selectedListId',\n\t\t'serializedChanges',\n\t\t'sortBy',\n\t\t'sortDescending',\n\t\t'table',\n\t\t'tiny',\n\t\t'view'\n\t];\n\n\tif (isDirtyFormAndBackgroundRefreshRequest(value, isDirty)) return;\n\n\tif (dependentProperties.includes(name) && !isEqual(value, previousValue)) {\n\t\tif (\n\t\t\tname === 'refreshRequested' &&\n\t\t\tvalue.timestamp === previousValue.timestamp\n\t\t)\n\t\t\treturn;\n\n\t\t// tinyFields will be used to hydrate the list props, but shouldn't cause an extra request to go out\n\t\tif (get(model, `tinyFields.${name}`) === value) return;\n\n\t\tif (name === 'tiny' && isWorkspace) return;\n\n\t\tdispatch(DATA_PROVIDER_BOOTSTRAP);\n\t}\n};\n\nconst pageUpdateEffect = ({action, properties, dispatch}) => {\n\tconst page = get(action, 'payload.page');\n\tconst {table, page: prevPage} = properties;\n\n\tdispatch(PROPERTIES_SET, {\n\t\t...LIST_PAGE_RESET,\n\t\tpage,\n\t\tloading: true\n\t});\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_PAGE_UPDATED,\n\t\t{\n\t\t\tpage,\n\t\t\ttable,\n\t\t\tprevPage\n\t\t},\n\t\tLIST_PAGE_UPDATED\n\t);\n};\n\nconst limitUpdateEffect = ({action, properties, dispatch}) => {\n\tconst limit = get(action, 'payload.limit');\n\tconst {table, limit: prevLimit} = properties;\n\n\tconst updateUserPrefs = limitUserPrefUpdate(limit);\n\tdispatch(USER_PREF_UPDATE, updateUserPrefs);\n\n\tdispatch(PROPERTIES_SET, {\n\t\t...LIST_PAGE_RESET,\n\t\tlimit,\n\t\tloading: true\n\t});\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_LIMIT_UPDATED,\n\t\t{\n\t\t\tprevLimit,\n\t\t\tlimit,\n\t\t\ttable\n\t\t},\n\t\tLIST_LIMIT_UPDATED\n\t);\n};\n\nconst advancedViewSetQueryEffect = ({action, dispatch, updateProperties}) => {\n\tconst {\n\t\tpayload: {query}\n\t} = action;\n\tupdateProperties({query, page: 1});\n\tListActionsService.dispatchListQueryUpdate({dispatch, query});\n};\n\nconst selectFromDropdown = ({action, dispatch, properties}) => {\n\tconst {\n\t\tpayload: {index, dropdownName, context, recordCount}\n\t} = action;\n\n\tconst dropdownItem = ListActionsService.getOptionItem(\n\t\t!dropdownName ? properties.menuSelection : dropdownName,\n\t\tindex\n\t);\n\n\tdropdownItem.action(\n\t\tcontext\n\t\t\t? {...properties, dispatch, context, recordCount}\n\t\t\t: {...properties, dispatch, recordCount}\n\t);\n\n\texternalActionService(dispatch, RECORD_LIST_MENU_ITEM_SELECTED, {\n\t\tname: dropdownItem.value\n\t});\n};\n\nconst refreshRequested = coeffects => {\n\tconst {\n\t\tstate: {queuedLiveListUpdates = {}},\n\t\tproperties,\n\t\taction,\n\t\tdispatch,\n\t\tupdateState\n\t} = coeffects;\n\tconst {payload} = action;\n\tconst {isDirty, page} = properties;\n\tconst newProps = {\n\t\trefreshRequested: {...payload},\n\t\t...LIST_PROP_RESET\n\t};\n\n\tif (get(payload, 'background', false)) {\n\t\tif (isDirty) return;\n\t\tnewProps.page = page;\n\t}\n\n\t// DEF0079979: Reset omit count state on refresh. Otherwise pages will be stale\n\n\tupdateState({\n\t\tomitCountState: {},\n\t\tqueuedLiveListUpdates: {},\n\t\trefreshLiveListUpdates: queuedLiveListUpdates,\n\t\tliveListCount: 0\n\t});\n\tdispatch(PROPERTIES_SET, newProps);\n\n\t//DEPRECATED API\n\tdispatch(LIST_REFRESH_REQUESTED, {\n\t\t...action.payload\n\t});\n};\n\nexport const updateSort = ({action, properties, dispatch}) => {\n\tconst {query, searchTerm} = properties;\n\tconst table = get(properties, 'model.layoutQuery.table');\n\n\tconst {\n\t\tpayload: {column, nextDirection}\n\t} = action;\n\n\tconst updateOrderBy = createSort(column.columnName, nextDirection);\n\tconst updateUserPrefs = sortUserPrefUpdate(updateOrderBy, table);\n\n\tdispatch(USER_PREF_UPDATE, updateUserPrefs[0]);\n\tdispatch(USER_PREF_UPDATE, updateUserPrefs[1]);\n\n\tconst updatedCondition = toQueryString({\n\t\tconditions: query,\n\t\torderBy: updateOrderBy,\n\t\tsearchTerm\n\t});\n\tdispatch(PROPERTIES_SET, {\n\t\t...LIST_PROP_RESET,\n\t\tquery: updatedCondition,\n\t\torderBy: updateOrderBy\n\t});\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_QUERY_UPDATED,\n\t\t{\n\t\t\tprevQuery: query,\n\t\t\ttable,\n\t\t\tquery: updatedCondition\n\t\t},\n\t\tLIST_QUERY_UPDATED\n\t);\n};\n\nconst updateExportPrefs = ({action: {payload}, dispatch}) => {\n\tdispatch(USER_PREF_MULTI_UPDATE, {preferences: payload.preferences});\n};\n\nconst updatePrefs = ({action: {payload}, dispatch}) =>\n\tdispatch(USER_PREF_MULTI_UPDATE, {preferences: payload});\n\nconst updatePrefsLazy = seismicActionObject => {\n\tconst {action, dispatch, state, updateState} = seismicActionObject;\n\tconst {payload} = action;\n\tconst {queuedUserPrefUpdates} = state;\n\t// TODO: Hacky solution for now, but it seems like the lowest touch option.\n\t// We need to revisit this... either we change the `fromModule` aspect\n\t// of the action payload OR we should expect the payload to have the\n\t// `fromModule` and have our code work around that expectation.\n\tdelete payload.fromModule;\n\n\t// Merge new preference updates with existing array,\n\t// allowing new updates to override previous states\n\tconst mergedPrefs = toArray({\n\t\t...keyBy(queuedUserPrefUpdates, 'name'),\n\t\t...keyBy(payload, 'name')\n\t});\n\n\tupdateState({\n\t\tpath: 'queuedUserPrefUpdates',\n\t\tvalue: mergedPrefs,\n\t\toperation: 'set'\n\t});\n\n\tupdatePrefDebounced({action, dispatch, mergedPrefs, updateState});\n};\n\nconst updatePrefDebounced = debounce(normalArgs => {\n\tconst {updateState, mergedPrefs} = normalArgs;\n\n\tconst newArgs = {\n\t\t...normalArgs,\n\t\taction: {\n\t\t\tpayload: mergedPrefs\n\t\t}\n\t};\n\n\tLOG.log(\n\t\t`Queueing sys_user_preference update with values: ${JSON.stringify(\n\t\t\tmergedPrefs\n\t\t)}`\n\t);\n\n\tupdatePrefs(newArgs);\n\n\tupdateState({\n\t\tpath: 'queuedUserPrefUpdates',\n\t\tvalue: [],\n\t\toperation: 'set'\n\t});\n}, 3000);\n\nexport const getRecordClickedAction = ({\n\titemSelectedActionSuffix = '',\n\tlistType\n}) => {\n\t// Related lists should use preview record to open record in subtab of main agent workspace chrome tab\n\tconst actionPrefix =\n\t\tlistType === LIST_TYPE_RELATED ? PREVIEW_RECORD : ITEM_SELECTED;\n\n\t/**\n\t * This is a special case for PRB1338815\n\t *\n\t * This should be removed once workspace is not running in compatibility mode. Because Agent Workspace\n\t * Chrome has legacyHandleAllActions enabled, in referenceSearch, stop propagation of ITEM_SELECTED does not work.\n\t * This causes a new tab to open when a record is selected for reference fields on forms.\n\t *\n\t */\n\treturn `${actionPrefix}${itemSelectedActionSuffix}`;\n};\n\nconst getTableToDispatch = ({\n\tisReference,\n\tisDocumentId,\n\tdocumentIdReference,\n\ttableName,\n\tisDBView,\n\tclassName\n}) => {\n\tif (isDocumentId) return documentIdReference;\n\tif (isReference || isDBView) return tableName;\n\n\treturn className;\n};\n\nconst getRowToDispatch = ({\n\tisReference,\n\tisDBView,\n\tisDocumentId,\n\tcell,\n\tdbViewSysId,\n\trowId,\n\trowDisplayValue,\n\trowData\n}) => {\n\tconst displayValue = {\n\t\tvalue: get(cell, 'columnData.displayValue')\n\t};\n\n\tif (isReference || isDocumentId) {\n\t\treturn {\n\t\t\tsys_id: {\n\t\t\t\tvalue: get(cell, 'columnData.value')\n\t\t\t},\n\t\t\tdisplayValue,\n\t\t\trowData: {\n\t\t\t\tvalue: rowData\n\t\t\t}\n\t\t};\n\t}\n\n\tif (isDBView) {\n\t\treturn {\n\t\t\tsys_id: {\n\t\t\t\tvalue: dbViewSysId\n\t\t\t},\n\t\t\tdisplayValue,\n\t\t\trowData: {\n\t\t\t\tvalue: rowData\n\t\t\t}\n\t\t};\n\t}\n\n\treturn {\n\t\tsys_id: {\n\t\t\tvalue: rowId\n\t\t},\n\t\tdisplayValue: {\n\t\t\tvalue: rowDisplayValue\n\t\t},\n\t\trowData: {\n\t\t\tvalue: rowData\n\t\t}\n\t};\n};\n\nexport const openRecordHandler = ({state, properties, action, dispatch}) => {\n\tconst {\n\t\tpayload: {row, cell, evt}\n\t} = action;\n\tconst {isWorkspace} = state;\n\tconst {itemSelectedActionSuffix, listType, query} = properties;\n\n\tconst {uniqueId, displayValue, className, rowData} = row;\n\tconst {columnName} = cell;\n\tconst allColumns = get(properties, 'model.allColumns', new Map());\n\tconst column = allColumns.get(columnName);\n\n\tconst listTable = get(properties, 'table');\n\tconst isDBView = get(properties, 'model.tableMetadata.isDBView', false);\n\tconst tableName = get(column, 'columnData.tableName');\n\n\tconst isReference =\n\t\tget(column, 'columnData.internalType') === REFERENCE &&\n\t\tlistType !== LIST_TYPE_REFERENCE;\n\tconst isDocumentId = get(column, 'columnData.internalType') === DOCUMENT_ID;\n\tconst documentIdReference = isDocumentId\n\t\t? get(cell, 'columnData.documentIdReference')\n\t\t: '';\n\n\t// DBView\n\tconst elementSysId = get(column, 'columnData.elementSysId');\n\tconst dbViewData = get(row, 'dbViewData', new Map());\n\tconst dbViewSysId = dbViewData.get(elementSysId);\n\n\t// If we get the title from the tiny request use that\n\tconst listTitle = get(\n\t\tget(properties, 'model', {}),\n\t\t'listTitle',\n\t\tget(properties, 'listTitle', '')\n\t);\n\n\tconst tableToDispatch = getTableToDispatch({\n\t\tisReference,\n\t\tisDocumentId,\n\t\tdocumentIdReference,\n\t\ttableName,\n\t\tisDBView,\n\t\tclassName\n\t});\n\n\tconst rowToDispatch = getRowToDispatch({\n\t\tisReference,\n\t\tisDBView,\n\t\tisDocumentId,\n\t\tcell,\n\t\tdbViewSysId,\n\t\trowId: uniqueId,\n\t\trowDisplayValue: displayValue,\n\t\trowData\n\t});\n\n\tconst sysId = get(rowToDispatch, 'sys_id.value', '');\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_ROW_CLICKED,\n\t\t{\n\t\t\tlistTable,\n\t\t\tlistTitle,\n\t\t\tnativeEvent: evt,\n\t\t\trecordTable: tableToDispatch,\n\t\t\trow: rowToDispatch,\n\t\t\ttable: tableToDispatch,\n\t\t\tsys_id: sysId\n\t\t},\n\t\tLIST_ROW_CLICK_UPDATED\n\t);\n\n\tif (isWorkspace && listType !== LIST_TYPE_REFERENCE) {\n\t\tconst actionDispatch = getRecordClickedAction({\n\t\t\titemSelectedActionSuffix,\n\t\t\tlistType\n\t\t});\n\t\tdispatch(actionDispatch, {\n\t\t\trow: rowToDispatch,\n\t\t\ttable: tableToDispatch,\n\t\t\tnativeEvent: evt,\n\t\t\tsys_id: sysId\n\t\t});\n\t} else {\n\t\t// UIB: For use in selectable props\n\t\tdispatch(PROPERTIES_SET, {\n\t\t\trecordSelectedTable: isReference ? tableName : listTable,\n\t\t\trecordSelectedSysId: sysId,\n\t\t\trecordSelectedQuery: query\n\t\t});\n\t}\n};\n\nconst restoreDefaultsEffect = ({dispatch, action, properties}) => {\n\tconst originalConditions = get(action, 'payload.originalConditions');\n\tconst {table, query: prevQuery} = properties;\n\tdispatch(PROPERTIES_SET, {\n\t\t...LIST_PROP_RESET,\n\t\tquery: originalConditions\n\t});\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_QUERY_UPDATED,\n\t\t{\n\t\t\tquery: originalConditions,\n\t\t\ttable,\n\t\t\tprevQuery\n\t\t},\n\t\tLIST_QUERY_UPDATED\n\t);\n};\n\nconst deleteConditionEffect = ({properties, dispatch, action}) => {\n\tconst item = get(action, 'payload.item');\n\tconst glideQuery = get(action, 'payload.glideQuery');\n\tconst {table, query: prevQuery, panelConfig, panelOpened} = properties;\n\tconst {predicates} = glideQuery;\n\tconst indices = glideQuery.getComparisonIndices(item.id);\n\tconst {predicateIndex, subPredicateIndex, compoundIndex} = indices;\n\tconst compound = predicates[predicateIndex].subpredicates[subPredicateIndex];\n\tconst subCompound = compound.subpredicates[compoundIndex];\n\n\tif (!compound || !subCompound || !item) {\n\t\tthrow new Error(\n\t\t\t`Compound ${compound}, SubCompount ${subCompound}, Comparison ${item}`\n\t\t);\n\t}\n\tsubCompound.removeSubpredicate(item);\n\tif (subCompound.isEmpty() && compound.subpredicates.length >= compoundIndex) {\n\t\tcompound.subpredicates.splice(compoundIndex, 1);\n\t}\n\tconst newQuery = stripLeadingDelimiters(glideQuery.toQueryString());\n\tdispatch(PROPERTIES_SET, {\n\t\t...LIST_PROP_RESET,\n\t\tquery: newQuery\n\t});\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_QUERY_UPDATED,\n\t\t{\n\t\t\tquery: newQuery,\n\t\t\ttable,\n\t\t\tprevQuery\n\t\t},\n\t\tLIST_QUERY_UPDATED\n\t);\n};\n\nconst dismissAlertEffect = ({dispatch, action}) => {\n\t// Remove the alert from the list\n\tdispatch(PROPERTIES_SET, {alertList: get(action, 'payload.value', [])});\n};\n\nconst recordCheckedEffect = ({dispatch, action, properties}) => {\n\tLOG.log('Record Checked action called', action);\n\tconst {\n\t\tpayload: {value, checked, totalRecordCount}\n\t} = action;\n\tconst {\n\t\tselectedRecords,\n\t\texceptedRecords,\n\t\tallRecordsSelected = false,\n\t\ttable\n\t} = properties;\n\n\tlet newSelectedRecords = [...selectedRecords];\n\tlet newExceptedRecords = [...exceptedRecords];\n\n\tconst arrValue = castArray(value);\n\n\tif (!allRecordsSelected) {\n\t\tnewSelectedRecords = uniq(\n\t\t\tchecked\n\t\t\t\t? newSelectedRecords.concat(arrValue)\n\t\t\t\t: without(newSelectedRecords, ...arrValue)\n\t\t);\n\t} else {\n\t\tnewExceptedRecords = uniq(\n\t\t\t!checked\n\t\t\t\t? newExceptedRecords.concat(arrValue)\n\t\t\t\t: without(newExceptedRecords, ...arrValue)\n\t\t);\n\t}\n\n\tconst payload = {\n\t\tselectedRecords: newSelectedRecords,\n\t\texceptedRecords: newExceptedRecords\n\t};\n\tdispatch(PROPERTIES_SET, payload);\n\tdispatch(LIST_CHECKBOX_TOGGLED, payload);\n\n\tconst selectionCount = !allRecordsSelected\n\t\t? newSelectedRecords.length\n\t\t: totalRecordCount - newExceptedRecords.length;\n\n\tconst query = newSelectedRecords.length\n\t\t? `sys_idIN${newSelectedRecords.join(',')}`\n\t\t: newExceptedRecords.length\n\t\t? `sys_idNOT IN${newExceptedRecords.join(',')}`\n\t\t: '';\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_SELECTED_COUNT_UPDATED,\n\t\t{\n\t\t\tallRecordsSelected,\n\t\t\t...payload,\n\t\t\tselectionCount,\n\t\t\tquery,\n\t\t\ttable\n\t\t},\n\t\tLIST_SELECTION_COUNT_UPDATED\n\t);\n};\n\nconst parsedQuerySetEffect = ({dispatch, action: {payload}}) => {\n\tdispatch(PROPERTIES_SET, {...payload});\n};\n\nconst updateNewQueryFilter = (dispatch, table, prevQuery, newQuery) => {\n\tdispatch(PROPERTIES_SET, {query: newQuery, page: 1});\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_QUERY_UPDATED,\n\t\t{\n\t\t\tquery: newQuery,\n\t\t\ttable,\n\t\t\tprevQuery\n\t\t},\n\t\tLIST_QUERY_UPDATED\n\t);\n};\n\nconst addFilterComparisonEffect = ({dispatch, properties, action}) => {\n\tconst {\n\t\tpayload: {field, operator, value}\n\t} = action;\n\n\tconst {query: prevQuery, table} = properties;\n\tconst newCondition = getQuery(\n\t\tfield,\n\t\toperator,\n\t\tisArray(value) ? value.join('@') : value\n\t);\n\tconst newQuery = addConditionToQuery(prevQuery, newCondition);\n\n\tupdateNewQueryFilter(dispatch, table, prevQuery, newQuery);\n};\n\nconst addComplexFilterComparisonEffect = ({dispatch, properties, action}) => {\n\tconst {\n\t\tpayload: {field, value}\n\t} = action;\n\tconst {query: prevQuery, table} = properties;\n\tconst orderedChoices = orderSelectedChoices([...value]);\n\tconst newCondition = getNewComplexEncodedQuery(field, orderedChoices);\n\tconst newQuery = addConditionToQuery(prevQuery, newCondition);\n\n\tupdateNewQueryFilter(dispatch, table, prevQuery, newQuery);\n};\n\nconst mutateFilterComparisonEffect = ({\n\tdispatch,\n\tproperties,\n\taction: {\n\t\tpayload: {comparisonId, field, operator, value}\n\t}\n}) => {\n\tconst {parsedQueryModel, table, query: prevQuery} = properties;\n\n\tif (!parsedQueryModel) return LOG.log(`Parsed Query Model not initialized`);\n\n\tconst newQuery = getNewGlideQuery(\n\t\tparsedQueryModel,\n\t\tcomparisonId,\n\t\tfield,\n\t\toperator,\n\t\tvalue\n\t).toQueryString();\n\tupdateNewQueryFilter(dispatch, table, prevQuery, newQuery);\n};\n\nconst mutateComplexFilterComparisonEffect = ({\n\tdispatch,\n\tproperties,\n\taction: {\n\t\tpayload: {comparisonMap, field, value}\n\t}\n}) => {\n\tconst {parsedQueryModel, table, query: prevQuery} = properties;\n\n\tif (!parsedQueryModel) return LOG.log(`Parsed Query Model not initialized`);\n\n\tconst orderedChoices = orderSelectedChoices([...value]);\n\tconst newParsedQueryModel = cloneDeep(parsedQueryModel);\n\tconst {glideQuery: newGlideQuery} = newParsedQueryModel;\n\tconst {modifyId, removeIds, valueToAdd, delimeter} = getMutateOptions(\n\t\tcomparisonMap,\n\t\torderedChoices\n\t);\n\tmodifyComparison(\n\t\tnewGlideQuery,\n\t\tcomparisonMap,\n\t\tmodifyId,\n\t\tfield,\n\t\torderedChoices.nonEmpty\n\t);\n\tremoveComparisonsFromCompound(newGlideQuery, removeIds);\n\tconst newQuery = !isEmpty(valueToAdd)\n\t\t? newGlideQuery.toQueryString() +\n\t\t  delimeter +\n\t\t  getQuery(field, valueToAdd === 'null' ? EQUALS : IN, valueToAdd)\n\t\t: null;\n\tupdateNewQueryFilter(\n\t\tdispatch,\n\t\ttable,\n\t\tprevQuery,\n\t\tisEmpty(newQuery) ? newGlideQuery.toQueryString() : newQuery\n\t);\n};\n\nconst deleteFilterComparisonEffect = ({\n\tdispatch,\n\tproperties,\n\taction: {\n\t\tpayload: {comparisonId}\n\t}\n}) => {\n\tconst {parsedQueryModel, table, query: prevQuery} = properties;\n\n\tif (!parsedQueryModel) return LOG.log(`Parsed Query Model not initialized`);\n\n\tconst newParsedQueryModel = cloneDeep(parsedQueryModel);\n\tconst {glideQuery} = newParsedQueryModel;\n\n\tremoveSingleComparisonFromCompound(glideQuery, comparisonId, 0);\n\n\tupdateNewQueryFilter(dispatch, table, prevQuery, glideQuery.toQueryString());\n};\n\nconst deleteComplexFilterComparisonEffect = ({\n\tdispatch,\n\tproperties,\n\taction: {\n\t\tpayload: {comparisonMap}\n\t}\n}) => {\n\tconst {parsedQueryModel, table, query: prevQuery} = properties;\n\n\tif (!parsedQueryModel) return LOG.log(`Parsed Query Model not initialized`);\n\n\tconst newParsedQueryModel = cloneDeep(parsedQueryModel);\n\tconst {glideQuery: newGlideQuery} = newParsedQueryModel;\n\tconst compIds = Object.keys(comparisonMap);\n\n\tremoveComparisonsFromCompound(newGlideQuery, compIds);\n\n\tupdateNewQueryFilter(\n\t\tdispatch,\n\t\ttable,\n\t\tprevQuery,\n\t\tnewParsedQueryModel.glideQuery.toQueryString()\n\t);\n};\n\nconst listOpenGroup = ({dispatch, properties, action}) => {\n\tconst {query: prevQuery, table} = properties;\n\tconst {\n\t\tpayload: {field, value}\n\t} = action;\n\tconst queryWithoutGroupByCondition = ListActionsService.removeGroupByCondition(\n\t\tprevQuery\n\t);\n\tconst newQuery = ListActionsService.addGroupToQuery(\n\t\tqueryWithoutGroupByCondition,\n\t\tfield,\n\t\tvalue\n\t);\n\n\tdispatch(PROPERTIES_SET, {\n\t\t...LIST_PROP_RESET,\n\t\tquery: newQuery\n\t});\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_QUERY_UPDATED,\n\t\t{\n\t\t\tquery: newQuery,\n\t\t\tprevQuery,\n\t\t\ttable\n\t\t},\n\t\tLIST_QUERY_UPDATED\n\t);\n};\n\nconst toggleGroup = ({dispatch, action}) => {\n\tconst {\n\t\tpayload: {preference}\n\t} = action;\n\n\tdispatch(LIST_UPDATE_PREFERENCES_LAZY, [preference]);\n};\n\nconst toggleAllGroups = ({dispatch, action}) => {\n\tconst {\n\t\tpayload: {table, column, value}\n\t} = action;\n\n\tdispatch(LIST_UPDATE_PREFERENCES_LAZY, [\n\t\t{\n\t\t\tname: `workspace.list.${table}.groupBy.${column}.defaultAsOpen`,\n\t\t\tvalue\n\t\t},\n\t\t{\n\t\t\tname: `workspace.list.${table}.groupBy.${column}.exceptions`,\n\t\t\tvalue: ''\n\t\t}\n\t]);\n};\n\nconst listAddGroupBy = ({dispatch, properties, action}) => {\n\tconst {query: prevQuery, table} = properties;\n\tconst {\n\t\tpayload: {field}\n\t} = action;\n\n\tconst newQuery = ListActionsService.addGroupbyCondition(prevQuery, field);\n\n\tdispatch(PROPERTIES_SET, {\n\t\t...LIST_PROP_RESET,\n\t\tquery: newQuery\n\t});\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_QUERY_UPDATED,\n\t\t{\n\t\t\tquery: newQuery,\n\t\t\tprevQuery,\n\t\t\ttable\n\t\t},\n\t\tLIST_QUERY_UPDATED\n\t);\n};\n\nconst listRemoveGroupBy = ({dispatch, properties}) => {\n\tconst {query: prevQuery, table} = properties;\n\n\tconst newQuery = ListActionsService.removeGroupByCondition(prevQuery);\n\n\tdispatch(PROPERTIES_SET, {\n\t\t...LIST_PROP_RESET,\n\t\tquery: newQuery\n\t});\n\n\texternalActionService(\n\t\tdispatch,\n\t\tRECORD_LIST_QUERY_UPDATED,\n\t\t{\n\t\t\tquery: newQuery,\n\t\t\tprevQuery,\n\t\t\ttable\n\t\t},\n\t\tLIST_QUERY_UPDATED\n\t);\n};\n\nconst listIdChangedEffect = ({state, updateProperties}) => {\n\tconst {\n\t\tproperties: {query, relatedListName, fixedQuery: fq}\n\t} = state;\n\n\tconst fixedQuery = createFixedQueryMap(relatedListName, query, fq);\n\treturn updateProperties({\n\t\tpage: 1,\n\t\tselectedRecords: [],\n\t\texceptedRecords: [],\n\t\tallRecordsSelected: false,\n\t\toriginalConditions: stripOrderBy(query),\n\t\tfixedQuery,\n\t\torderBy: {\n\t\t\tcolumnName: undefined,\n\t\t\tascending: undefined\n\t\t}\n\t});\n};\n\nconst _hasHtml = message => {\n\tconst node = document.createElement('div');\n\tnode.innerHTML = message;\n\treturn (\n\t\tArray.from(node.childNodes).findIndex(child => child.nodeType === 1) !== -1\n\t);\n};\n\nconst addNotifications = ({action, updateProperties}) => {\n\tconst {\n\t\tpayload: {notifications}\n\t} = action;\n\n\tconst notificationsToAdd = notifications\n\t\t.filter(currentNotification => {\n\t\t\treturn (\n\t\t\t\thas(currentNotification, 'message') &&\n\t\t\t\thas(currentNotification, 'type') &&\n\t\t\t\tget(currentNotification, 'type', '') === 'error'\n\t\t\t);\n\t\t})\n\t\t.map(currentNotification => {\n\t\t\tconst message = get(currentNotification, 'message', '');\n\t\t\tconst isHtml = _hasHtml(message);\n\t\t\tconst content = {\n\t\t\t\ttype: isHtml ? 'html' : 'string',\n\t\t\t\tvalue: isHtml ? `<div>${message}</div>` : message\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\tstatus: 'critical',\n\t\t\t\tcontent: content,\n\t\t\t\taction: {type: 'dismiss'},\n\t\t\t\tid: `now_alert_error_${cuid()}`\n\t\t\t};\n\t\t});\n\n\tif (notificationsToAdd.length > 0) {\n\t\treturn updateProperties({\n\t\t\tpath: 'alertList',\n\t\t\tvalue: notificationsToAdd,\n\t\t\toperation: 'push'\n\t\t});\n\t}\n\n\treturn;\n};\n\nconst recordConnectedNotifications = ({\n\taction: {\n\t\tpayload: {alertList}\n\t},\n\tupdateProperties\n}) => {\n\treturn updateProperties({alertList});\n};\n\nconst setFixedQueryEffect = ({state, updateProperties}) => {\n\t// update fixed query here\n\tconst {relatedListName, query, fixedQuery: fq} = state.properties;\n\n\tconst fixedQuery = createFixedQueryMap(relatedListName, query, fq);\n\tconst strippedQuery = isUndefined(query) ? undefined : stripOrderBy(query);\n\treturn updateProperties({\n\t\toriginalConditions: strippedQuery,\n\t\tfixedQuery\n\t});\n};\n\nconst manageColumnWidthsEffect = ({\n\tstate: {\n\t\tproperties: {model, selectedListId}\n\t},\n\taction: {\n\t\tpayload: {columnWidths}\n\t},\n\tupdateState,\n\tdispatch\n}) => {\n\tconst colResizingId = selectedListId || model.tinyUrl;\n\n\tdispatch(USER_PREF_UPDATE, {\n\t\tname: `${LIST_USER_PREFERENCE}.${LIST_USER_PREFERENCE_COL_WIDTH}.${colResizingId}`,\n\t\tvalue: columnWidths\n\t});\n\tif (columnWidths.length === 0) {\n\t\tupdateState({\n\t\t\tcolumnWidthsResetRequested: {\n\t\t\t\ttimestamp: Date.now()\n\t\t\t}\n\t\t});\n\t}\n};\n\nconst setColumnsResizedEffect = ({\n\taction: {\n\t\tpayload: {columnsResized, columnWidths}\n\t},\n\tdispatch\n}) => {\n\tdispatch(PROPERTIES_SET, {columnsResized, columnWidths});\n};\n\nexport default {\n\t[SELECT_ALL_RECORDS]: {\n\t\teffect: ({action, dispatch, properties}) => {\n\t\t\tconst {payload} = action;\n\t\t\tconst {query, table} = properties;\n\t\t\tconst {selectionCount = 0, allRecordsSelected} = payload;\n\t\t\tdispatch(PROPERTIES_SET, payload);\n\n\t\t\texternalActionService(\n\t\t\t\tdispatch,\n\t\t\t\tRECORD_LIST_SELECTED_COUNT_UPDATED,\n\t\t\t\t{\n\t\t\t\t\tselectionCount,\n\t\t\t\t\tallRecordsSelected,\n\t\t\t\t\tselectedRecords: [],\n\t\t\t\t\texceptedRecords: [],\n\t\t\t\t\tquery,\n\t\t\t\t\ttable\n\t\t\t\t},\n\t\t\t\tLIST_SELECTION_COUNT_UPDATED\n\t\t\t);\n\t\t},\n\t\tstopPropagation: true,\n\t\tprivate: true\n\t},\n\t[GENERIC_REFRESH_REQUESTED]: {\n\t\teffect: ({dispatch}) => {\n\t\t\tconst now = Date.now();\n\t\t\tdispatch(LIST_REFRESH_REQUESTED_INTERNAL, {timestamp: now});\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t///////////////////////////PAGINATION HANDLERS//////////////////////////////\n\n\t// We want to update the state first for pagination properties and then dispatch\n\t// an update event up to the sn-list-component to pass props to data provider\n\t[PAGE_UPDATE]: {\n\t\teffect: pageUpdateEffect,\n\t\tstopPropagation: true\n\t},\n\t[GRID_CHECKBOX_TOGGLED]: {\n\t\teffect: recordCheckedEffect,\n\t\tstopPropagation: true\n\t},\n\t[LIMIT_UPDATE]: {\n\t\teffect: limitUpdateEffect,\n\t\tstopPropagation: true\n\t},\n\t////////////////////////////////////GRID HANDLERS////////////////////////////////////////\n\t[ADVANCED_VIEW_SET_QUERY]: {\n\t\teffect: advancedViewSetQueryEffect,\n\t\tstopPropagation: true\n\t},\n\t[LIST_SELECT_FROM_DROPDOWN]: {\n\t\teffect: selectFromDropdown,\n\t\tstopPropagation: true\n\t},\n\t[LIST_REFRESH_REQUESTED_INTERNAL]: {\n\t\teffect: refreshRequested,\n\t\tstopPropagation: true\n\t},\n\t[LIST_UPDATE_SORT]: {\n\t\teffect: updateSort,\n\t\tstopPropagation: true\n\t},\n\t[LIST_UPDATE_PREFERENCES]: {\n\t\teffect: updatePrefs,\n\t\tstopPropagation: true,\n\t\tprivate: true\n\t},\n\t[LIST_UPDATE_PREFERENCES_LAZY]: {\n\t\teffect: updatePrefsLazy,\n\t\tstopPropagation: true,\n\t\tprivate: true\n\t},\n\t[LIST_UPDATE_COLUMN_WIDTH_USER_PREF]: {\n\t\teffect: manageColumnWidthsEffect,\n\t\tstopPropagation: true\n\t},\n\t[LIST_UPDATE_COLUMNS_RESIZED]: {\n\t\teffect: setColumnsResizedEffect,\n\t\tstopPropagation: true\n\t},\n\t[LIST_UPDATE_EXPORT_USER_PREF]: {\n\t\teffect: updateExportPrefs,\n\t\tstopPropagation: true\n\t},\n\t[OPEN_RECORD]: {\n\t\teffect: openRecordHandler,\n\t\tstopPropagation: true\n\t},\n\t[LIST_RESTORE_DEFAULTS]: {\n\t\teffect: restoreDefaultsEffect,\n\t\tstopPropagation: true,\n\t\tprivate: true\n\t},\n\t[LIST_DELETE_CONDITION]: {\n\t\teffect: deleteConditionEffect,\n\t\tstopPropagation: true,\n\t\tprivate: true\n\t},\n\t[ALERT_LIST.ITEMS_SET]: {\n\t\teffect: dismissAlertEffect,\n\t\tstopPropagation: true\n\t},\n\t[PARSED_QUERY_SET]: {\n\t\teffect: parsedQuerySetEffect,\n\t\tstopPropagation: true\n\t},\n\t[PREF_GROUP_TOGGLE]: {\n\t\teffect: toggleGroup,\n\t\tstopPropagation: true\n\t},\n\t[PREF_GROUP_TOGGLE_ALL]: {\n\t\teffect: toggleAllGroups,\n\t\tstopPropagation: true\n\t},\n\t[ADD_FILTER_COMPARISON]: {\n\t\teffect: addFilterComparisonEffect,\n\t\tstopPropagation: true\n\t},\n\t[ADD_COMPLEX_FILTER_COMPARISON]: {\n\t\teffect: addComplexFilterComparisonEffect,\n\t\tstopPropagation: true\n\t},\n\t[MUTATE_FILTER_COMPARISON]: {\n\t\teffect: mutateFilterComparisonEffect,\n\t\tstopPropagation: true\n\t},\n\t[MUTATE_COMPLEX_FILTER_COMPARISON]: {\n\t\teffect: mutateComplexFilterComparisonEffect,\n\t\tstopPropagation: true\n\t},\n\t[DELETE_FILTER_COMPARISON]: {\n\t\teffect: deleteFilterComparisonEffect,\n\t\tstopPropagation: true\n\t},\n\t[DELETE_COMPLEX_FILTER_COMPARISON]: {\n\t\teffect: deleteComplexFilterComparisonEffect,\n\t\tstopPropagation: true\n\t},\n\t[LIST_OPEN_GROUP]: {\n\t\teffect: listOpenGroup,\n\t\tstopPropagation: true\n\t},\n\t[LIST_ADD_GROUPBY]: {\n\t\teffect: listAddGroupBy,\n\t\tstopPropagation: true\n\t},\n\t[LIST_REMOVE_GROUPBY]: {\n\t\teffect: listRemoveGroupBy,\n\t\tstopPropagation: true\n\t},\n\t[LIST_ID_CHANGED]: {\n\t\teffect: listIdChangedEffect,\n\t\tstopPropagation: true\n\t},\n\t[ADD_NOTIFICATIONS]: {effect: addNotifications},\n\t[RECORD_LIST_NOTIFICATION_ADDED]: {\n\t\teffect: recordConnectedNotifications\n\t},\n\t[SET_ORIGINAL_CONDITONS]: {\n\t\teffect: setFixedQueryEffect,\n\t\tstopPropagation: true\n\t},\n\t[COMPONENT_PROPERTY_CHANGED]: {\n\t\teffect: handlePropertyChanged\n\t},\n\t[LIST_SCROLL_UPDATED]: {\n\t\teffect: ({action, dispatch}) => {\n\t\t\tconst {payload} = action;\n\t\t\tdispatch(RECORD_LIST_SCROLL_UPDATED, {...payload});\n\t\t}\n\t},\n\t[RECORD_LIST_SELECTED_COUNT_RESET]: {\n\t\teffect: ({dispatch}) => {\n\t\t\tconst payload = {\n\t\t\t\tallRecordsSelected: false,\n\t\t\t\tselectedRecords: [],\n\t\t\t\texceptedRecords: []\n\t\t\t};\n\t\t\texternalActionService(\n\t\t\t\tdispatch,\n\t\t\t\tRECORD_LIST_SELECTED_COUNT_UPDATED,\n\t\t\t\t{\n\t\t\t\t\t...payload,\n\t\t\t\t\tselectionCount: 0,\n\t\t\t\t\tquery: ''\n\t\t\t\t},\n\t\t\t\tLIST_SELECTION_COUNT_UPDATED\n\t\t\t);\n\t\t}\n\t},\n\t[LIST_VIEW_ALL_CLICKED]: {\n\t\teffect: ({action, dispatch}) => {\n\t\t\tconst {payload} = action;\n\t\t\tdispatch(CONNECTED_LIST_VIEW_ALL_CLICKED, payload);\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t[LIST_RESET_COLUMN_WIDTH_REQUESTED]: {\n\t\teffect: ({action, dispatch}) => {\n\t\t\tconst {payload} = action;\n\t\t\tdispatch(CONNECTED_LIST_RESET_COLUMN_WIDTH_REQUESTED, payload);\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t[LIST_MENU_CRUD]: {\n\t\teffect: ({action: {payload}, updateProperties}) => {\n\t\t\tupdateProperties({listCrud: {...payload}});\n\t\t}\n\t},\n\t[TOGGLE_LIST_MENU]: {\n\t\teffect: ({state, updateProperties, dispatch}) => {\n\t\t\tconst {\n\t\t\t\tproperties: {listMenuOpen: open}\n\t\t\t} = state;\n\t\t\tdispatch(CONNECTED_LIST_MENU_BUTTON_TOGGLED, {listMenuOpen: !open});\n\t\t\tupdateProperties({listMenuOpen: !open});\n\t\t}\n\t},\n\t[COMPONENT_TREE_RENDERED]({\n\t\thost,\n\t\taction: {meta},\n\t\tstate: {\n\t\t\thasFetched,\n\t\t\tinteractive,\n\t\t\tproperties: {loading}\n\t\t},\n\t\tupdateState\n\t}) {\n\t\tif (hasFetched && !loading && !interactive) {\n\t\t\tmark(host, getInteractionId(meta), metrics.HERO_INTERACTIVE);\n\t\t\tupdateState({\n\t\t\t\tshouldRender: false,\n\t\t\t\tpath: 'interactive',\n\t\t\t\tvalue: true,\n\t\t\t\toperation: 'set'\n\t\t\t});\n\t\t}\n\t}\n};\n","import {\n\tEQUALS,\n\tGLIDE_CURRENCY,\n\tGLIDE_DATE_TIME,\n\tGRID_CELL_FILTER_OUT,\n\tGRID_CELL_LIST,\n\tGRID_CELL_SHOW_MATCHING,\n\tGROUP_BY,\n\tINVALID_ACTION_ITEM,\n\tLIST_PROP_RESET,\n\tLIST_QUERY_UPDATED,\n\tNEW_QUERY_DELIMITER,\n\tQUERY_DELIMITER\n} from '../constants';\nimport {Logger} from '../utils/logger';\nimport {PROPERTIES_SET} from '@seismic/core/lib/constants';\nimport {t} from 'sn-translate';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport padStart from 'lodash/padStart';\n\nconst LOG = Logger().createLog('ListActionsService');\n\nconst _gridCellDropdown = [\n\t{\n\t\tvalue: GRID_CELL_SHOW_MATCHING,\n\t\ttitle: t('Show matching'),\n\t\tenabled: true,\n\t\tselected: false,\n\t\tshowSeparator: false,\n\t\taction: props => {\n\t\t\ttry {\n\t\t\t\t_filterByCell(props, GRID_CELL_SHOW_MATCHING, window);\n\t\t\t} catch (ex) {\n\t\t\t\tLOG.error(\n\t\t\t\t\t`Request to filter by cell failed. Invalid filter type: ${GRID_CELL_SHOW_MATCHING}. Error: ${ex}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tvalue: GRID_CELL_FILTER_OUT,\n\t\ttitle: t('Filter out'),\n\t\tenabled: true,\n\t\tselected: false,\n\t\tshowSeparator: false,\n\t\taction: props => {\n\t\t\ttry {\n\t\t\t\t_filterByCell(props, GRID_CELL_FILTER_OUT, window);\n\t\t\t} catch (ex) {\n\t\t\t\tLOG.error(\n\t\t\t\t\t`Request to filter by cell failed. Invalid filter type: ${GRID_CELL_FILTER_OUT}. Error: ${ex}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n];\n\nconst _dropdownOptions = {\n\t[GRID_CELL_LIST]: _gridCellDropdown\n};\n\n/**\n * Private method for adding query via\n * show matching or filter out by cell.\n *\n * @param props\n * @param filterType i.e. GRID_CELL_SHOW_MATCHING or GRID_CELL_FILTER_OUT\n */\nfunction _filterByCell(props, filterType, globals) {\n\tconst {query, dispatch, context, model, table} = props;\n\tconst columnMap = get(model, 'allColumns', new Map());\n\tconst columnName = get(context, 'columnName', '');\n\tconst column = columnMap.get(columnName);\n\tconst value = _getValueBasedOnDataType({context, column, globals});\n\tconst newQuery =\n\t\tfilterType === GRID_CELL_SHOW_MATCHING\n\t\t\t? _getShowMatchingQuery({query, cell: context, value, column, table})\n\t\t\t: _getFilterOutQuery({query, cell: context, value, column, table});\n\n\tLOG.log('Modifying query (' + filterType + '): ', newQuery);\n\tdispatch(PROPERTIES_SET, {\n\t\t...LIST_PROP_RESET,\n\t\tquery: newQuery\n\t});\n\tdispatchListQueryUpdate({dispatch, query: newQuery});\n}\n\n/**\n * Private method for removing a query excess delimeters\n *\n * @param query\n * @param delimiter\n * @return [String] Trimmed condition\n */\nconst _trimQueryOfDelimiter = (query, delimiter = QUERY_DELIMITER) => {\n\tif (isEmpty(query)) return query;\n\n\tif (query.substr(query.length - 1) === delimiter) {\n\t\treturn query.substr(0, query.length - 1);\n\t}\n\n\treturn query;\n};\n\n/**\n * Adds a new condition to an existing query.\n *\n * @param query Exisiting condition, if any\n * @param {*} newCondition New condition\n */\nexport const addConditionToQuery = (query, newCondition) => {\n\tif (isEmpty(query)) {\n\t\treturn newCondition;\n\t} else if (query.indexOf(NEW_QUERY_DELIMITER) > 0) {\n\t\tconst criteria = query.split(NEW_QUERY_DELIMITER);\n\t\tconst result = criteria.reduce((acc, currCondition, index) => {\n\t\t\treturn index === 1\n\t\t\t\t? `${acc}${QUERY_DELIMITER}${newCondition}${NEW_QUERY_DELIMITER}${currCondition}${QUERY_DELIMITER}${newCondition}`\n\t\t\t\t: `${acc}${NEW_QUERY_DELIMITER}${currCondition}${QUERY_DELIMITER}${newCondition}`;\n\t\t});\n\t\treturn result;\n\t} else {\n\t\treturn `${query}${QUERY_DELIMITER}${newCondition}`;\n\t}\n};\n\n/**\n * Private method for retreiving conditions for Show Matching\n *\n * @param query Exisiting condition, if any\n * @param cell Cell context the filter condition is based off of\n * @return [String] New condition\n */\nconst _getShowMatchingQuery = ({query, cell, value, column, table}) => {\n\tconst {columnName} = cell;\n\tconst {internalType} = column;\n\tconst isCurrentQueryEmpty = isEmpty(query);\n\tconst trimmedQuery = _trimQueryOfDelimiter(query);\n\n\tif (internalType === GLIDE_DATE_TIME && value !== null) {\n\t\tconst showMatchingDate = `${columnName}ON${value}@javascript:gs.dateGenerate('${value}','start')@javascript:gs.dateGenerate('${value}','end')`;\n\n\t\treturn isCurrentQueryEmpty\n\t\t\t? showMatchingDate\n\t\t\t: addConditionToQuery(trimmedQuery, showMatchingDate);\n\t}\n\tif (internalType === GLIDE_CURRENCY && value !== null) {\n\t\tconst filterOutCurrency = `${columnName}=javascript:global.getCurrencyFilter('${table}','${columnName}', 'USD;${value}')`;\n\n\t\treturn isCurrentQueryEmpty\n\t\t\t? filterOutCurrency\n\t\t\t: addConditionToQuery(trimmedQuery, filterOutCurrency);\n\t}\n\n\tconst newCondition = `${columnName}=${value}`;\n\treturn isCurrentQueryEmpty\n\t\t? newCondition\n\t\t: addConditionToQuery(trimmedQuery, newCondition);\n};\n\n/**\n * Private method for retreiving conditions for Filter Out\n *\n * @param query Exisiting condition, if any\n * @param cell Cell context the filter condition is based off of\n * @return [String] New condition\n */\nconst _getFilterOutQuery = ({query, cell, value, column, table}) => {\n\tconst {columnName} = cell;\n\tconst {internalType} = column;\n\tconst isCurrentQueryEmpty = isEmpty(query);\n\tconst trimmedQuery = trimConditionsOfDelimiter(query, QUERY_DELIMITER);\n\n\tif (value === null) {\n\t\treturn isCurrentQueryEmpty\n\t\t\t? `${columnName}!=${value}`\n\t\t\t: addConditionToQuery(trimmedQuery, `${columnName}!=${value}`);\n\t}\n\tif (internalType === GLIDE_DATE_TIME) {\n\t\tconst filterOutDates = `${columnName}NOTON${value}@javascript:gs.dateGenerate('${value}','start')@javascript:gs.dateGenerate('${value}','end')^OR${columnName}=NULL`;\n\n\t\treturn isCurrentQueryEmpty\n\t\t\t? filterOutDates\n\t\t\t: addConditionToQuery(trimmedQuery, filterOutDates);\n\t}\n\tif (internalType === GLIDE_CURRENCY) {\n\t\tconst filterOutCurrency = `${columnName}!=javascript:global.getCurrencyFilter('${table}','${columnName}', 'USD;${value}')^OR${columnName}=NULL`;\n\n\t\treturn isCurrentQueryEmpty\n\t\t\t? filterOutCurrency\n\t\t\t: addConditionToQuery(trimmedQuery, filterOutCurrency);\n\t}\n\treturn isCurrentQueryEmpty\n\t\t? `${columnName}!=${value}^OR${columnName}=NULL`\n\t\t: addConditionToQuery(\n\t\t\t\ttrimmedQuery,\n\t\t\t\t`${columnName}!=${value}^OR${columnName}=NULL`\n\t\t  );\n};\n\nconst _dateToYMD = date => {\n\tif (Object.prototype.toString.call(date) !== '[object Date]')\n\t\tthrow 'Invalid argument: date must be Date Object Type';\n\n\tvar day = padStart(date.getDate(), 2, '0');\n\tvar month = padStart(date.getMonth() + 1, 2, '0');\n\tvar year = date.getFullYear();\n\treturn `${year}-${month}-${day}`;\n};\n\n/**\n * Private method for retreiving cell value based\n * on the data type.\n *\n * @param cell\n * @return [String]\n */\nfunction _getValueBasedOnDataType({context, column, globals}) {\n\tconst {\n\t\tcolumnData: {value}\n\t} = context;\n\tconst {internalType} = column;\n\n\tif (value === null || value === undefined || value === '') {\n\t\treturn null;\n\t}\n\tif (internalType === GLIDE_DATE_TIME) {\n\t\t// Date time string needs to be in ISO format to be valid in Safari\n\t\tconst date = new Date(value.replace(/\\s/, 'T'));\n\t\tconst millisecondsInHour = -60000;\n\t\tconst defaultOffset = date.getTimezoneOffset() * millisecondsInHour;\n\t\tconst offset = get(\n\t\t\tglobals,\n\t\t\t\"uxGlobals.presource['sn-workspace-header:wsUserData'].data.GlideDomain_Query.user.timeZoneOffset\",\n\t\t\tdefaultOffset\n\t\t);\n\t\tdate.setTime(date.getTime() + offset);\n\t\treturn _dateToYMD(date);\n\t}\n\tif (internalType === GLIDE_CURRENCY) {\n\t\tconst currency = value.toString().split('.');\n\t\tif (currency[1] === '00') {\n\t\t\treturn parseInt(currency[0], 10);\n\t\t}\n\t}\n\treturn value;\n}\n\n/**\n * Simple getter for retrieving a single item from a dropdown\n *\n * @param name The name of the dropdown to get an item from\n * i.e. 'sys_aw_list' or 'sys_aw_my_list' or 'grid_cell_list'\n * @param index i.e. index of the dropdown item\n * @return {Object}\n */\nexport function getOptionItem(name, index) {\n\treturn get(_dropdownOptions, `${name}.${index}`, {\n\t\tvalue: INVALID_ACTION_ITEM\n\t});\n}\n\n/**\n * Public access to _trimQueryOfDelimiter for use in testing only\n */\nexport const trimConditionsOfDelimiter = (conditions, delimiter) =>\n\t_trimQueryOfDelimiter(conditions, delimiter);\n\n// TODO: move this dipatch to data-provider once onChange is available from seismic-next\nexport const dispatchListQueryUpdate = ({dispatch, query}) => {\n\tdispatch(LIST_QUERY_UPDATED, {\n\t\tquery\n\t});\n\tLOG.log(`Dispatched: (LIST_QUERY_UPDATED, {query:${query}})`);\n};\n\nexport function removeGroupByCondition(conditions) {\n\tif (!conditions) return '';\n\n\tconst queryArray = conditions.split(QUERY_DELIMITER);\n\tfor (let i = 0; i < queryArray.length; i++) {\n\t\tif (queryArray[i].indexOf(GROUP_BY) == 0) queryArray.splice(i, 1);\n\t}\n\treturn queryArray.join(QUERY_DELIMITER);\n}\n\nexport function addGroupbyCondition(conditions, columnName) {\n\tconst queryArray = removeGroupByCondition(conditions);\n\treturn (\n\t\tqueryArray +\n\t\t(queryArray.endsWith('^') ? '' : QUERY_DELIMITER) +\n\t\tGROUP_BY +\n\t\tcolumnName\n\t);\n}\n\nexport const addGroupToQuery = (query, field, value) =>\n\tquery + QUERY_DELIMITER + field + EQUALS + (isEmpty(value) ? null : value);\n","module.exports = __TECTONIC__lodash_4_17_4[\"padStart\"];","import {\n\tCHOICE_FILTER,\n\tDATE_FILTER,\n\tFILTER_TYPE_FLAGS,\n\tGENERIC_FILTER,\n\tGLIDE_DATE,\n\tGLIDE_DATE_TIME,\n\tGLIDE_REFERNCE,\n\tNUMERIC_FILTER,\n\tREFERENCE_FILTER,\n\tUNSUPPORTED_FILTER\n} from '../constants';\n\nimport get from 'lodash/get';\n\nconst getInternalType = column => get(column, 'columnData.internalType', '');\n\nconst isUnsupportedColumn = column =>\n\tFILTER_TYPE_FLAGS[UNSUPPORTED_FILTER].indexOf(getInternalType(column)) !== -1;\n\nconst isChoiceColumn = column => get(column, 'columnData.isChoice', false);\n\nconst isNumericColumn = column =>\n\tFILTER_TYPE_FLAGS[NUMERIC_FILTER].dataTypesSupported.indexOf(\n\t\tgetInternalType(column)\n\t) !== -1;\n\nconst isDateColumn = column =>\n\tgetInternalType(column) === GLIDE_DATE ||\n\tgetInternalType(column) === GLIDE_DATE_TIME;\n\nconst isReferenceColumn = column => getInternalType(column) === GLIDE_REFERNCE;\n\nexport const getFilterTypeForColumn = (column = {}) => {\n\tif (isUnsupportedColumn(column)) return UNSUPPORTED_FILTER;\n\n\tif (isChoiceColumn(column)) return CHOICE_FILTER;\n\n\tif (isNumericColumn(column)) return NUMERIC_FILTER;\n\n\tif (isDateColumn(column)) return DATE_FILTER;\n\n\tif (isReferenceColumn(column)) return REFERENCE_FILTER;\n\n\treturn GENERIC_FILTER;\n};\n","module.exports = __TECTONIC__lodash_4_17_4[\"merge\"];","module.exports = __TECTONIC__lodash_4_17_4[\"compact\"];","module.exports = __TECTONIC__lodash_4_17_4[\"isString\"];","module.exports = __TECTONIC__lodash_4_17_4[\"set\"];","import {ASC, DESC, LIST_USER_PREFERENCE_ROWCOUNT} from '../../constants';\n\nexport function limitUserPrefUpdate(value) {\n\treturn {\n\t\tname: LIST_USER_PREFERENCE_ROWCOUNT,\n\t\tvalue\n\t};\n}\n\nexport function sortUserPrefUpdate(nextOrderBy, table) {\n\tconst {isDescending, columnName} = nextOrderBy;\n\n\tconst orderPrefName = `${table}.db.order`;\n\tconst orderPrefValue = columnName;\n\tconst directionPrefName = `${table}.db.order.direction`;\n\tconst directionPrefValue = isDescending ? DESC : ASC;\n\treturn [\n\t\t{\n\t\t\tname: orderPrefName,\n\t\t\tvalue: orderPrefValue\n\t\t},\n\t\t{\n\t\t\tname: directionPrefName,\n\t\t\tvalue: directionPrefValue\n\t\t}\n\t];\n}\n","module.exports = __TECTONIC__lodash_4_17_4[\"castArray\"];","module.exports = __TECTONIC__lodash_4_17_4[\"cloneDeep\"];","module.exports = __TECTONIC__cuid_2_1_8;","module.exports = __TECTONIC__lodash_4_17_4[\"debounce\"];","module.exports = __TECTONIC__lodash_4_17_4[\"isArray\"];","module.exports = __TECTONIC__lodash_4_17_4[\"keyBy\"];","module.exports = __TECTONIC__lodash_4_17_4[\"toArray\"];","module.exports = __TECTONIC__lodash_4_17_4[\"uniq\"];","module.exports = __TECTONIC__lodash_4_17_4[\"without\"];","import {\n\tADD_NOTIFICATIONS,\n\tCONNECTED_ADD_NOTIFICATIONS,\n\tCONNECTED_DA_WRAPPED_CLICKED,\n\tCONNECTED_FORM_EDIT_PREVIEW_RECORD_CLICKED,\n\tCONNECTED_PREVIEW_RECORD,\n\tCONNECTED_REFRESH_REQUESTED,\n\tLIST_DA_WRAPPED_CLICKED,\n\tLIST_REFRESH_REQUESTED,\n\tRECORD_LIST_ROW_CLICKED\n} from '../../../constants';\nimport {\n\tLIST_DA_ACTIONS_CONTRACT_GENERATED,\n\tLIST_FORM_EDIT_PREVIEW_RECORD_CLICKED,\n\tLIST_FORM_EDIT_WRAPPED_CLICKED\n} from '@servicenow/now-record-list';\nimport isEmpty from 'lodash/isEmpty';\n\nconst RELATED_LIST = 'related';\n\nconst getComponentName = (host = {}) => {\n\tconst {localName} = host;\n\n\tif (isEmpty(localName)) return '';\n\treturn localName;\n};\n\nconst wrappedClickedEffect = ({action, dispatch}) => {\n\tconst {payload} = action;\n\tconst {wrappedAction, wrappedPayload} = payload;\n\tdispatch(CONNECTED_DA_WRAPPED_CLICKED, payload);\n\n\tif (!isEmpty(wrappedAction)) dispatch(wrappedAction, wrappedPayload);\n};\n\nexport default {\n\t[LIST_REFRESH_REQUESTED]: {\n\t\teffect: coeffects => {\n\t\t\tconst {state, action, dispatch} = coeffects;\n\t\t\tif (!state.isWorkspace) {\n\t\t\t\taction.stopPropagation();\n\t\t\t\tdispatch(CONNECTED_REFRESH_REQUESTED, action.payload);\n\t\t\t}\n\t\t}\n\t},\n\t[RECORD_LIST_ROW_CLICKED]: {\n\t\teffect: coeffects => {\n\t\t\tconst {state, host, action, dispatch} = coeffects;\n\t\t\tif (!state.isWorkspace && getComponentName(host).includes(RELATED_LIST)) {\n\t\t\t\tdispatch(CONNECTED_PREVIEW_RECORD, action.payload);\n\t\t\t}\n\t\t}\n\t},\n\t[ADD_NOTIFICATIONS]: {\n\t\teffect: coeffects => {\n\t\t\tconst {state, host, action, dispatch} = coeffects;\n\t\t\tif (state.isWorkspace && getComponentName(host).includes(RELATED_LIST)) {\n\t\t\t\taction.stopPropagation();\n\t\t\t} else if (!state.isWorkspace) {\n\t\t\t\taction.stopPropagation();\n\t\t\t\tdispatch(CONNECTED_ADD_NOTIFICATIONS, action.payload);\n\t\t\t}\n\t\t}\n\t},\n\t[LIST_DA_WRAPPED_CLICKED]: {\n\t\teffect: wrappedClickedEffect,\n\t\tstopPropagation: true\n\t},\n\t[LIST_FORM_EDIT_WRAPPED_CLICKED]: {\n\t\teffect: wrappedClickedEffect,\n\t\tstopPropagation: true\n\t},\n\t[LIST_FORM_EDIT_PREVIEW_RECORD_CLICKED]: {\n\t\teffect: coeffects => {\n\t\t\tconst {\n\t\t\t\tstate: {isWorkspace},\n\t\t\t\taction: {payload},\n\t\t\t\tdispatch\n\t\t\t} = coeffects;\n\n\t\t\tif (!isWorkspace)\n\t\t\t\tdispatch(CONNECTED_FORM_EDIT_PREVIEW_RECORD_CLICKED, payload);\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t[LIST_DA_ACTIONS_CONTRACT_GENERATED]: {\n\t\teffect: ({action, updateProperties}) => {\n\t\t\tconst {payload} = action;\n\t\t\tupdateProperties({daClientActionContract: payload});\n\t\t}\n\t},\n\tstopPropagation: true\n};\n","import {\n\tCONNECTED_LIST_DELETE_REQUESTED,\n\tCONNECTED_LIST_EDIT_COLUMNS_REQUESTED,\n\tCONNECTED_LIST_RENAME_REQUESTED,\n\tCONNECTED_LIST_SAVE_AS_REQUESTED,\n\tCONNECTED_LIST_SAVE_REQUESTED\n} from '../../../constants';\n\nimport {\n\tLIST_DELETE_REQUESTED,\n\tLIST_EDIT_COLUMN_REQUESTED,\n\tLIST_RENAME_REQUESTED,\n\tLIST_SAVE_AS_REQUESTED,\n\tLIST_SAVE_REQUESTED\n} from '@servicenow/now-record-list';\n\nexport default {\n\t[LIST_EDIT_COLUMN_REQUESTED]: {\n\t\teffect: ({action, dispatch}) => {\n\t\t\tconst {payload} = action;\n\t\t\tdispatch(CONNECTED_LIST_EDIT_COLUMNS_REQUESTED, payload);\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t[LIST_DELETE_REQUESTED]: {\n\t\teffect: ({action, dispatch}) => {\n\t\t\tconst {payload} = action;\n\t\t\tdispatch(CONNECTED_LIST_DELETE_REQUESTED, payload);\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t[LIST_RENAME_REQUESTED]: {\n\t\teffect: ({action, dispatch}) => {\n\t\t\tconst {payload} = action;\n\t\t\tdispatch(CONNECTED_LIST_RENAME_REQUESTED, payload);\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t[LIST_SAVE_AS_REQUESTED]: {\n\t\teffect: ({action, dispatch}) => {\n\t\t\tconst {payload} = action;\n\t\t\tdispatch(CONNECTED_LIST_SAVE_AS_REQUESTED, payload);\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t[LIST_SAVE_REQUESTED]: {\n\t\teffect: ({action, dispatch}) => {\n\t\t\tconst {payload} = action;\n\t\t\tdispatch(CONNECTED_LIST_SAVE_REQUESTED, payload);\n\t\t},\n\t\tstopPropagation: true\n\t}\n};\n","module.exports = __TECTONIC__sn_uxpage_presource_18_0_4;","import * as DeclarativeActionsDataService from '../../../services/declarativeActionsDataService';\nimport * as ListDataService from '../../../services/listDataService';\nimport {\n\tCONNECTED_TINY_ID_UPDATED,\n\tDATA_PROVIDER_BOOTSTRAP,\n\tDATA_PROVIDER_FETCH_COMPLETED,\n\tDATA_PROVIDER_FETCH_FAILED,\n\tDATA_PROVIDER_FETCH_SUCCEEDED,\n\tDESC,\n\tFETCH_LIST_DATA,\n\tFETCH_LIST_DATA_ERROR,\n\tFETCH_REFERENCELIST_DATA,\n\tFETCH_TINY_LIST_DATA,\n\tLIST_DATA_FETCH_COMPLETE,\n\tLIST_TYPE_DEFAULT,\n\tLIST_TYPE_REFERENCE,\n\tLIST_TYPE_RELATED,\n\tLIVE_LIST_QUERY_TEMPLATE_FIELD_COLUMNS,\n\tLIVE_LIST_QUERY_TEMPLATE_FIELD_QUERY,\n\tLIVE_LIST_QUERY_TEMPLATE_FIELD_TABLE,\n\tLIVE_LIST_SUBSCRIBE,\n\tPARSED_QUERY_SET,\n\tRECORD_LIST_DATA_FETCH_FAILED,\n\tRECORD_LIST_DATA_FETCH_REQUESTED,\n\tRECORD_LIST_DATA_FETCH_SUCCEEDED,\n\tUPDATE_FETCHING\n} from '../../../constants';\nimport {Logger} from '../../../utils/logger';\nimport {PROPERTIES_SET} from '@seismic/core/lib/constants';\nimport {createGraphQLEffect} from '@servicenow/ui-effect-graphql';\nimport {createSort, stripOrderBy} from '../../list/listModifierUtils';\nimport {\n\texternalActionService,\n\tgetPaginationObject,\n\tgetQueryCategory\n} from '../../list/listUtils';\nimport {\n\tgetColumnTemplateString,\n\tliveListUnsubscribe,\n\tsubscriptionActionHandlers\n} from './actionHandlers/subscriptionActionHandlers';\nimport {getParsedQueryModel, transformParsedQuery} from '../../list/listModel';\nimport {getWorkspaceConfigId} from '../../../utils/presourceGetter';\nimport {\n\tlistQueryModel,\n\treferenceListModel,\n\ttinyListModel\n} from '../../../schemas/list';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nconst LOG = Logger().createLog('ListDataProviderActions');\n\nconst fetchListEffect = createGraphQLEffect(listQueryModel, {\n\tvariableList: [\n\t\t'table',\n\t\t'view',\n\t\t'columns',\n\t\t'query',\n\t\t'pagination',\n\t\t'limit',\n\t\t'offset',\n\t\t'groupPagination',\n\t\t'parentTable',\n\t\t'parentRecordSysId',\n\t\t'queryCategory',\n\t\t'relatedListName',\n\t\t'maxColumns',\n\t\t'workspaceConfigId',\n\t\t'actionConfigId',\n\t\t'highlightedValueConfigId',\n\t\t'listId',\n\t\t'listTitle',\n\t\t'runHighlightedValuesQuery',\n\t\t'runQuery',\n\t\t'isDeclarativeActionsRequired',\n\t\t'source',\n\t\t'disableLiveList'\n\t],\n\tsuccessActionType: DATA_PROVIDER_FETCH_COMPLETED,\n\terrorActionType: DATA_PROVIDER_FETCH_FAILED\n});\n\nconst fetchTinyListEffect = createGraphQLEffect(tinyListModel, {\n\tvariableList: [\n\t\t'tiny',\n\t\t'runQuery',\n\t\t'isDeclarativeActionsRequired',\n\t\t'runHighlightedValuesQuery',\n\t\t'limit',\n\t\t'offset',\n\t\t'disableLiveList'\n\t],\n\tsuccessActionType: DATA_PROVIDER_FETCH_COMPLETED,\n\terrorActionType: DATA_PROVIDER_FETCH_FAILED\n});\n\nconst fetchReferenceListEffect = createGraphQLEffect(referenceListModel, {\n\tvariableList: [\n\t\t'table',\n\t\t'field',\n\t\t'sysId',\n\t\t'serializedChanges',\n\t\t'encodedRecord',\n\t\t'chars',\n\t\t'ignoreDepAsRefQual',\n\t\t'ignoreRefQual',\n\t\t'limit',\n\t\t'offset',\n\t\t'sortBy',\n\t\t'sortDescending',\n\t\t'searchOperator',\n\t\t'query',\n\t\t'queryCategory',\n\t\t'refTableName',\n\t\t'runQuery',\n\t\t'runHighlightedValuesQuery',\n\t\t'isDeclarativeActionsRequired',\n\t\t'tiny'\n\t],\n\tsuccessActionType: DATA_PROVIDER_FETCH_COMPLETED,\n\terrorActionType: DATA_PROVIDER_FETCH_FAILED\n});\n\nconst dispatchFetchRequested = (dispatch, params) => {\n\tconst timestamp = Date.now();\n\n\texternalActionService(dispatch, RECORD_LIST_DATA_FETCH_REQUESTED, {\n\t\ttimestamp,\n\t\t...params\n\t});\n};\n\nconst handleBootStrapEffect = coeffects => {\n\tconst {dispatch, state, properties, updateState} = coeffects;\n\tconst {\n\t\tactionConfigId,\n\t\tapplyLimit,\n\t\tchars,\n\t\tcolumns,\n\t\tencodedRecord,\n\t\tfield,\n\t\tignoreDepAsRefQual,\n\t\tignoreRefQual,\n\t\thideDeclarativeActions,\n\t\thideHighlightedValues,\n\t\thideLiveList,\n\t\thighlightedValueConfigId = '',\n\t\tlistTitle,\n\t\tlistType,\n\t\tmaxColumns,\n\t\tpage,\n\t\tparentTable,\n\t\tparentRecordSysId,\n\t\tquery,\n\t\trecordSysId,\n\t\trefTableName,\n\t\trelatedListName,\n\t\tsearchOperator,\n\t\tselectedListId,\n\t\tserializedChanges = '',\n\t\tsortBy,\n\t\tsortDescending,\n\t\ttable,\n\t\ttiny,\n\t\tview,\n\t\tworkspaceConfigId = getWorkspaceConfigId(window)\n\t} = properties;\n\n\tconst {hasFetched} = state;\n\n\tif (\n\t\tListDataService.requiredPropsMissingByType(properties, listType) &&\n\t\t!(tiny && !hasFetched)\n\t)\n\t\treturn;\n\n\tLOG.log('handleBootStrapEffect STATE: ', state);\n\n\tif (!get(state, 'properties.refreshRequested.background', false))\n\t\tdispatch(PROPERTIES_SET, {loading: true});\n\n\tdispatch(UPDATE_FETCHING, {fetching: true});\n\n\tconst isDeclarativeActionsRequired =\n\t\t!hideDeclarativeActions &&\n\t\t[LIST_TYPE_RELATED, LIST_TYPE_DEFAULT].indexOf(listType) !== -1;\n\n\tconst declarativeActionPayload = isDeclarativeActionsRequired\n\t\t? DeclarativeActionsDataService.getActionPayload({\n\t\t\t\ttable,\n\t\t\t\tview,\n\t\t\t\trelatedListName,\n\t\t\t\tactionConfigId,\n\t\t\t\tworkspaceConfigId,\n\t\t\t\tparentTable,\n\t\t\t\tparentRecordSysId\n\t\t  })\n\t\t: {};\n\n\tliveListUnsubscribe(coeffects);\n\n\tif (listType === LIST_TYPE_REFERENCE) {\n\t\tdispatch(FETCH_REFERENCELIST_DATA, {\n\t\t\tchars,\n\t\t\tencodedRecord,\n\t\t\tfield,\n\t\t\tignoreRefQual,\n\t\t\tignoreDepAsRefQual,\n\t\t\tisDeclarativeActionsRequired,\n\t\t\tquery,\n\t\t\trunHighlightedValuesQuery: false,\n\t\t\trunQuery: true,\n\t\t\tsearchOperator,\n\t\t\tserializedChanges,\n\t\t\tsortBy,\n\t\t\tsortDescending,\n\t\t\tsysId: recordSysId,\n\t\t\ttable,\n\t\t\trefTableName,\n\t\t\t...getPaginationObject(applyLimit, page)\n\t\t});\n\n\t\tdispatchFetchRequested(dispatch, {\n\t\t\tchars,\n\t\t\tencodedRecord,\n\t\t\tfield,\n\t\t\tignoreRefQual,\n\t\t\tisDeclarativeActionsRequired,\n\t\t\tmaxColumns,\n\t\t\tpaginationLimit: applyLimit,\n\t\t\tpaginationOffset: (page - 1) * applyLimit,\n\t\t\tquery,\n\t\t\tsearchOperator,\n\t\t\tserializedChanges,\n\t\t\tsortBy,\n\t\t\tsortDescending,\n\t\t\tsys_id: recordSysId,\n\t\t\ttable,\n\t\t\t...declarativeActionPayload\n\t\t});\n\t} else if (!hasFetched && tiny) {\n\t\tdispatch(FETCH_TINY_LIST_DATA, {\n\t\t\ttiny,\n\t\t\trunQuery: true,\n\t\t\tisDeclarativeActionsRequired,\n\t\t\trunHighlightedValuesQuery: !hideHighlightedValues,\n\t\t\tdisableLiveList: !hideLiveList,\n\t\t\t...declarativeActionPayload,\n\t\t\t...getPaginationObject(applyLimit, page)\n\t\t});\n\t} else {\n\t\tdispatch(FETCH_LIST_DATA, {\n\t\t\tactionConfigId,\n\t\t\tcolumns,\n\t\t\thighlightedValueConfigId,\n\t\t\tisDeclarativeActionsRequired,\n\t\t\tlistId: selectedListId,\n\t\t\tlistTitle,\n\t\t\tmaxColumns,\n\t\t\tparentRecordSysId,\n\t\t\tparentTable,\n\t\t\tquery,\n\t\t\tqueryCategory: getQueryCategory(listType),\n\t\t\trelatedListName,\n\t\t\trunHighlightedValuesQuery: !hideHighlightedValues,\n\t\t\trunQuery: true,\n\t\t\ttable,\n\t\t\tview,\n\t\t\tdisableLiveList: !hideLiveList,\n\t\t\tworkspaceConfigId,\n\t\t\t...declarativeActionPayload,\n\t\t\t...getPaginationObject(applyLimit, page)\n\t\t});\n\n\t\tdispatchFetchRequested(dispatch, {\n\t\t\ttable,\n\t\t\tview,\n\t\t\tcolumns,\n\t\t\tquery,\n\t\t\tlistTitle,\n\t\t\tlimit: applyLimit,\n\t\t\tpage,\n\t\t\tmaxColumns\n\t\t});\n\t}\n\tupdateState({isWorkspace: !isEmpty(workspaceConfigId)});\n};\n\nconst handleLoading = ({dispatch, state}) => {\n\tconst refreshRequested = get(state, 'properties.refreshRequested', {});\n\tconst loaderDuration = get(refreshRequested, 'loaderDuration', 0);\n\n\tif (loaderDuration && loaderDuration !== 0) {\n\t\tdispatch(PROPERTIES_SET, {loading: true});\n\t\tsetTimeout(\n\t\t\t() =>\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\tloading: false,\n\t\t\t\t\trefreshRequested: {\n\t\t\t\t\t\t...refreshRequested,\n\t\t\t\t\t\tbackground: false,\n\t\t\t\t\t\tloaderDuration: 0\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tloaderDuration\n\t\t);\n\t}\n};\n\nconst fetchListCompleteEffect = ({state, action, dispatch, updateState}) => {\n\tconst {\n\t\tproperties: {\n\t\t\tfixedQuery,\n\t\t\thideListSharing,\n\t\t\tlistTitle,\n\t\t\tlistType = LIST_TYPE_DEFAULT,\n\t\t\tparentRecordSysId,\n\t\t\tparentTable,\n\t\t\tquery,\n\t\t\trelatedListName,\n\t\t\ttable\n\t\t}\n\t} = state;\n\tconst count = ListDataService.getRecordCount(listType, action.payload);\n\tlet error = get(action, 'payload.errors')[0];\n\n\tif (listType === LIST_TYPE_REFERENCE) {\n\t\tconst isReferenceTableScriptable = get(\n\t\t\taction,\n\t\t\t'payload.data.GlideLayout_Query.referenceDataRetriever.isReferenceTableScriptable',\n\t\t\tfalse\n\t\t);\n\t\tif (isReferenceTableScriptable) {\n\t\t\tconst refError = get(\n\t\t\t\taction,\n\t\t\t\t'payload.data.GlideLayout_Query.referenceDataRetriever.errorMessage',\n\t\t\t\tnull\n\t\t\t);\n\t\t\tif (refError) {\n\t\t\t\terror = {message: refError};\n\t\t\t}\n\t\t}\n\t}\n\n\thandleLoading({state, dispatch});\n\n\tupdateState({\n\t\tshouldRender: false,\n\t\tpath: 'interactive',\n\t\tvalue: false,\n\t\toperation: 'set'\n\t});\n\n\tconst timestamp = Date.now();\n\tLOG.log(\n\t\t`Dispatched: (${LIST_DATA_FETCH_COMPLETE}, {timestamp:${timestamp}})`\n\t);\n\n\t//DEPRECATED API\n\tdispatch(LIST_DATA_FETCH_COMPLETE, {\n\t\ttimestamp,\n\t\tcount\n\t});\n\n\tif (!isEmpty(error)) {\n\t\tLOG.error('fetchListCompleteEffect ERROR: ', error);\n\t\texternalActionService(\n\t\t\tdispatch,\n\t\t\tRECORD_LIST_DATA_FETCH_FAILED,\n\t\t\t{error},\n\t\t\tFETCH_LIST_DATA_ERROR\n\t\t);\n\t\tdispatch(DATA_PROVIDER_FETCH_FAILED, {error});\n\t} else {\n\t\tconst listData = ListDataService.getData(listType, action.payload);\n\t\tconst parsedQueryModel = getParsedQueryModel(\n\t\t\ttransformParsedQuery(listData),\n\t\t\tstripOrderBy(query ? query : get(listData, 'query')),\n\t\t\trelatedListName,\n\t\t\tfixedQuery\n\t\t);\n\n\t\tdispatch(PARSED_QUERY_SET, {parsedQueryModel});\n\n\t\tconst orders = get(parsedQueryModel, 'glideQuery.order_by', []);\n\n\t\tconst props = ListDataService.getProperties({\n\t\t\ttype: listType,\n\t\t\tpayload: action.payload,\n\t\t\torders\n\t\t});\n\n\t\tconst declarativeActions = DeclarativeActionsDataService.getProperties(\n\t\t\taction.payload\n\t\t);\n\t\tconst tiny = get(props, 'model.tinyUrl');\n\t\tif (!hideListSharing && !isEmpty(tiny))\n\t\t\texternalActionService(dispatch, CONNECTED_TINY_ID_UPDATED, {\n\t\t\t\ttiny\n\t\t\t});\n\n\t\tdispatch(DATA_PROVIDER_FETCH_SUCCEEDED, {\n\t\t\ttimestamp,\n\t\t\t...props,\n\t\t\t...declarativeActions\n\t\t});\n\t\texternalActionService(dispatch, RECORD_LIST_DATA_FETCH_SUCCEEDED, {\n\t\t\t...props,\n\t\t\t...declarativeActions,\n\t\t\tlistTitle,\n\t\t\tparentRecordSysId,\n\t\t\tparentTable,\n\t\t\tquery,\n\t\t\trelatedListName,\n\t\t\ttable,\n\t\t\ttimestamp\n\t\t});\n\t}\n};\n\nconst extractTinyFields = (hasFetched, tinyFields) => {\n\tif (hasFetched) return {};\n\n\treturn {\n\t\tquery: get(tinyFields, 'query'),\n\t\tcolumns: get(tinyFields, 'columns'),\n\t\tlistTitle: get(tinyFields, 'listTitle'),\n\t\tlistId: get(tinyFields, 'listId'),\n\t\ttable: get(tinyFields, 'table')\n\t};\n};\n\nconst fetchListDataSuccessEffect = ({\n\tstate,\n\taction,\n\tupdateProperties,\n\tupdateState,\n\tdispatch\n}) => {\n\tconst {\n\t\tproperties: {table, page, isRefList, query, selectedListId, tiny},\n\t\trefreshLiveListUpdates = {},\n\t\thasFetched\n\t} = state;\n\tconst props = action.payload;\n\tconst {applyLimit} = action;\n\n\tconst {\n\t\tmodel: {\n\t\t\tlayoutQuery: {\n\t\t\t\torderByColumn: sortByCol,\n\t\t\t\torderByIsDescending: sortByDesc,\n\t\t\t\ttable: refTableName\n\t\t\t},\n\t\t\ttinyFields\n\t\t}\n\t} = props;\n\n\tconst parsedSortByDesc = sortByDesc === 'true';\n\tconst orderBy = createSort(sortByCol, !parsedSortByDesc);\n\n\tconst preferenceData = get(props, 'model.preferenceData', []);\n\n\tconst preferenceOrderBy = preferenceData.reduce((accum, preference) => {\n\t\tif (preference.name.indexOf(`${table}.db.order`) > -1)\n\t\t\taccum.columnName = preference.value;\n\t\tif (preference.name.indexOf(`${table}.db.order.direction`) > -1)\n\t\t\taccum.sortOrder = preference.value;\n\t\treturn accum;\n\t}, {});\n\n\tconst columnWidthsUserPref = preferenceData.filter(pref => {\n\t\treturn pref.name.includes('columnWidths');\n\t});\n\n\tconst columnWidths = !isEmpty(columnWidthsUserPref)\n\t\t? JSON.parse(columnWidthsUserPref[0].value) || []\n\t\t: [];\n\n\tconst omitCountState = get(state, 'omitCountState', {});\n\tconst isOmitCount = get(props, `model.layoutQuery.isOmitCount`, false);\n\tconst layoutQueryCount = get(props, 'model.layoutQuery.count', 0);\n\tconst nextPageExists = get(\n\t\tprops,\n\t\t`model.layoutQuery.omitCountData.hasNextPage`,\n\t\tfalse\n\t);\n\n\tif (isOmitCount) {\n\t\tconst oldHash = get(omitCountState, 'hash', '');\n\t\tconst newHash = `${table}_${applyLimit}_${query}_${selectedListId}`;\n\t\tconst pageMap = get(pageMap, 'pageMap', {});\n\t\tif (oldHash !== newHash) {\n\t\t\tomitCountState.hash = newHash;\n\t\t\tomitCountState.count = 0;\n\t\t\tomitCountState.pageMap = {};\n\t\t\tomitCountState.finalCount = false;\n\t\t}\n\t\tif (!omitCountState.pageMap[page]) {\n\t\t\tomitCountState.count += layoutQueryCount;\n\t\t\tomitCountState.pageMap[page] = omitCountState.count;\n\t\t\tomitCountState.finalCount = omitCountState.finalCount || !nextPageExists;\n\t\t}\n\t\tprops.model.layoutQuery.finalCount = omitCountState.finalCount;\n\t\tprops.model.layoutQuery.count = omitCountState.count;\n\t}\n\n\tconst tinyFieldProps = !isEmpty(tiny)\n\t\t? extractTinyFields(hasFetched, tinyFields)\n\t\t: {};\n\n\tconst listData = {\n\t\tfetching: false,\n\t\tomitCountState,\n\t\tproperties: {\n\t\t\t...props,\n\t\t\t...tinyFieldProps,\n\t\t\tloading: false,\n\t\t\terror: null,\n\t\t\tdataUpdatedTime: Date.now(),\n\t\t\ttransitoryPage: page,\n\t\t\ttransitoryLimit: applyLimit,\n\t\t\torderBy: isRefList ? orderBy : {},\n\t\t\trefTableName,\n\t\t\tcolumnWidths\n\t\t}\n\t};\n\n\tconst liveLists = get(props, `model.layoutQuery.liveLists`, false);\n\tif (liveLists) {\n\t\tconst allColumns = get(props, `model.allColumns`, new Map());\n\t\tconst columns = getColumnTemplateString(allColumns);\n\n\t\tconst subscriptionParameters = {\n\t\t\t[LIVE_LIST_QUERY_TEMPLATE_FIELD_TABLE]: table,\n\t\t\t[LIVE_LIST_QUERY_TEMPLATE_FIELD_QUERY]: query,\n\t\t\t[LIVE_LIST_QUERY_TEMPLATE_FIELD_COLUMNS]: columns,\n\t\t\tsubscribe: true\n\t\t};\n\t\tupdateState({\n\t\t\tsubscriptionParameters,\n\t\t\trefreshLiveListUpdates: {},\n\t\t\tliveListUpdates: refreshLiveListUpdates\n\t\t});\n\t\tdispatch(LIVE_LIST_SUBSCRIBE, subscriptionParameters);\n\t}\n\n\tif (!isEmpty(preferenceOrderBy)) {\n\t\tconst {columnName, sortOrder} = preferenceOrderBy;\n\n\t\tupdateProperties({\n\t\t\t...listData.properties,\n\t\t\tuserPreferenceOrderBy: {\n\t\t\t\tcolumnName,\n\t\t\t\tisDescending: sortOrder === DESC ? true : false\n\t\t\t}\n\t\t});\n\t} else {\n\t\tupdateProperties({\n\t\t\t...listData.properties,\n\t\t\tuserPreferenceOrderBy: {}\n\t\t});\n\t}\n\n\treturn updateState({\n\t\tfetching: false,\n\t\thasFetched: true,\n\t\tomitCountState\n\t});\n};\n\nexport default {\n\t[DATA_PROVIDER_BOOTSTRAP]: {\n\t\teffect: handleBootStrapEffect,\n\t\tstopPropagation: true,\n\t\tmodifier: {name: 'debounce', delay: 100}\n\t},\n\t[FETCH_REFERENCELIST_DATA]: {\n\t\t...fetchReferenceListEffect,\n\t\tstopPropagation: true\n\t},\n\t[FETCH_LIST_DATA]: {\n\t\t...fetchListEffect,\n\t\tstopPropagation: true\n\t},\n\t[FETCH_TINY_LIST_DATA]: {\n\t\t...fetchTinyListEffect,\n\t\tstopPropagation: true\n\t},\n\t[DATA_PROVIDER_FETCH_COMPLETED]: {\n\t\teffect: fetchListCompleteEffect,\n\t\tstopPropagation: true\n\t},\n\t[DATA_PROVIDER_FETCH_SUCCEEDED]: {\n\t\teffect: fetchListDataSuccessEffect,\n\t\tinterceptors: [\n\t\t\tcontext => {\n\t\t\t\treturn {\n\t\t\t\t\t...context,\n\t\t\t\t\tcoeffects: {\n\t\t\t\t\t\t...context.coeffects,\n\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\t...context.coeffects.action,\n\t\t\t\t\t\t\tapplyLimit: context.coeffects.properties.applyLimit\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t],\n\t\tstopPropagation: true\n\t},\n\t[DATA_PROVIDER_FETCH_FAILED]: {\n\t\teffect: ({action, updateState, updateProperties}) => {\n\t\t\tupdateProperties({\n\t\t\t\tloading: false,\n\t\t\t\terror: action.payload.error\n\t\t\t});\n\n\t\t\treturn updateState({\n\t\t\t\tfetching: false\n\t\t\t});\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t[UPDATE_FETCHING]: {\n\t\teffect: ({action, updateState}) => {\n\t\t\tupdateState({\n\t\t\t\tfetching: action.payload.fetching\n\t\t\t});\n\t\t},\n\t\tstopPropagation: true\n\t},\n\t...subscriptionActionHandlers\n};\n","import {Logger} from '../utils/logger';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEmpty from 'lodash/isEmpty';\nimport isUndefined from 'lodash/isUndefined';\n\nconst LIST = 'list';\nconst RELATED_LIST = 'related_list';\n\nconst LOG = Logger().createLog('DeclarativeActionsDataService');\n\nexport const getProperties = payload => {\n\tconst model = has(payload, 'data.GlideListLayout_Query.getListLayout')\n\t\t? get(\n\t\t\t\tpayload,\n\t\t\t\t'data.GlideListLayout_Query.getListLayout.declarativeActions',\n\t\t\t\t[]\n\t\t  )\n\t\t: get(\n\t\t\t\tpayload,\n\t\t\t\t'data.GlideListLayout_Query.getTinyListLayout.declarativeActions',\n\t\t\t\t[]\n\t\t  );\n\tLOG.log('Model: ', model);\n\treturn {\n\t\tdeclarativeActions: model\n\t};\n};\n\nexport const getActionPayload = ({\n\ttable,\n\tview,\n\trelatedListName,\n\tactionConfigId,\n\tworkspaceConfigId,\n\tparentTable,\n\tparentRecordSysId\n}) => {\n\treturn {\n\t\ttable,\n\t\tview,\n\t\tsource: isEmpty(relatedListName) ? LIST : RELATED_LIST,\n\t\tactionConfigId: isUndefined(actionConfigId) ? '' : actionConfigId,\n\t\tworkspaceConfigId: isUndefined(workspaceConfigId) ? '' : workspaceConfigId,\n\t\tparentRecordTable: parentTable,\n\t\tparentRecordSysId\n\t};\n};\n","import {\n\tLIST_TYPE_DEFAULT,\n\tLIST_TYPE_INTERFACES,\n\tLIST_TYPE_REFERENCE\n} from '../constants';\nimport {getListModel} from '../components/list/listModel';\nimport get from 'lodash/get';\nimport isUndefined from 'lodash/isUndefined';\nimport pick from 'lodash/pick';\n\nexport const getProperties = ({type, payload, orders}) => {\n\tconst listData = getData(type, payload);\n\tconst model = getListModel({\n\t\tlistResource: listData,\n\t\torders\n\t});\n\treturn {model};\n};\n\nexport const getData = (type, payload) => {\n\tif (type === LIST_TYPE_REFERENCE) {\n\t\treturn get(payload, 'data.GlideListLayout_Query.getReferenceListLayout');\n\t} else {\n\t\treturn get(\n\t\t\tpayload,\n\t\t\t'data.GlideListLayout_Query.getListLayout',\n\t\t\tget(payload, 'data.GlideListLayout_Query.getTinyListLayout')\n\t\t);\n\t}\n};\n\nexport const getVariableList = type =>\n\tget(LIST_TYPE_INTERFACES, `${type}`, LIST_TYPE_INTERFACES[LIST_TYPE_DEFAULT]);\n\nexport const getRecordCount = (type, payload) => {\n\tconst listData = getData(type, payload);\n\treturn get(listData, 'layoutQuery.count', 0);\n};\n\nexport const requiredPropsMissingByType = (properties, listType) => {\n\tconst predicate = subject => isUndefined(subject) || subject === '';\n\n\treturn requiredPropsMissing(properties, getVariableList(listType), predicate);\n};\n\nexport const requiredPropsMissing = (props, requiredProperties, predicate) =>\n\tObject.values(pick(props, requiredProperties)).filter(prop => predicate(prop))\n\t\t.length !== 0;\n","module.exports = __TECTONIC__lodash_4_17_4[\"pick\"];","import {ARIA_LIVE_MESSAGE} from '@devsnc/sn-list-commons';\nimport {\n\tLIVE_LIST_ERROR,\n\tLIVE_LIST_ITEM_CHANGED,\n\tLIVE_LIST_ITEM_ENTERED,\n\tLIVE_LIST_ITEM_EXIT,\n\tLIVE_LIST_QUERY_TEMPLATE_FIELD_COLUMNS,\n\tLIVE_LIST_QUERY_TEMPLATE_FIELD_QUERY,\n\tLIVE_LIST_QUERY_TEMPLATE_FIELD_TABLE,\n\tLIVE_LIST_SUBSCRIBE,\n\tLIVE_LIST_SUBSCRIPTION_FAILED,\n\tLIVE_LIST_SUBSCRIPTION_STARTED,\n\tLIVE_LIST_SUBSCRIPTION_SUCCESS,\n\tLIVE_LIST_SUCCESS,\n\tLIVE_LIST_UNSUBSCRIBE_SUCCESS\n} from '../../../../constants';\nimport {Logger} from '../../../../utils/logger';\nimport {actionTypes} from '@servicenow/ui-core';\nimport {createGraphQLEffect} from '@servicenow/ui-effect-graphql';\nimport {t} from 'sn-translate';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nconst {COMPONENT_DISCONNECTED} = actionTypes;\n\nconst LOG = Logger().createLog('subscriptionActionHandlers');\n\nexport const subscriptionQueryString = `subscription($${LIVE_LIST_QUERY_TEMPLATE_FIELD_QUERY}: String!) {\n\tGlideRecord_Subscription {\n\t\t{{${LIVE_LIST_QUERY_TEMPLATE_FIELD_TABLE}}}(queryConditions: $${LIVE_LIST_QUERY_TEMPLATE_FIELD_QUERY}) {\n\t\t\t_subscription {\n\t\t\t\tsubscription_channel\n\t\t\t    subscription_operation\n\t\t\t\tsubscription_state\n\t\t\t    serialized_subscription\n\t\t\t}\n\t\t\t_results {\n\t\t\t\t{{${LIVE_LIST_QUERY_TEMPLATE_FIELD_COLUMNS}}}\n\t\t\t}\n\t\t}\n\t}\n}`;\n\nconst glideRecordSubscriptionResultsPath = table =>\n\t`GlideRecord_Subscription.${table}._results`;\n\nconst defaultColumn = `\nsys_id{\n    value\n}\n\n`;\n\nconst getColumn = column =>\n\t`${column}{\n    displayValue\n    value\n}\n\n`;\n\nexport const liveListUnsubscribe = coeffects => {\n\tconst {\n\t\tstate: {subscriptionParameters},\n\t\tdispatch,\n\t\tupdateState\n\t} = coeffects;\n\n\tif (!isEmpty(subscriptionParameters)) {\n\t\tupdateState({\n\t\t\tsubscriptionParameters: {},\n\t\t\tqueuedLiveListUpdates: {},\n\t\t\tliveListCount: 0\n\t\t});\n\t\tdispatch(LIVE_LIST_SUBSCRIBE, {\n\t\t\t...subscriptionParameters,\n\t\t\tsubscribe: false\n\t\t});\n\t}\n};\n\nexport const reduceUpdates = (liveListUpdate, rowColumns, columnsMap, type) => {\n\treturn Object.keys(liveListUpdate).reduce((accum, column) => {\n\t\tconst modelColumn = rowColumns.get(column);\n\n\t\tif (!columnsMap.has(column) || type === LIVE_LIST_ITEM_EXIT) return accum;\n\n\t\tconst internalType = columnsMap.get(column).internalType;\n\n\t\tlet updateValue = get(liveListUpdate, `[${column}].value`);\n\t\tlet updateDisplayValue = get(liveListUpdate, `[${column}].displayValue`);\n\n\t\tconst value = get(modelColumn, 'columnData.value', updateValue);\n\t\tconst displayValue = get(\n\t\t\tmodelColumn,\n\t\t\t'columnData.displayValue',\n\t\t\tupdateDisplayValue\n\t\t);\n\n\t\tif (updateValue === null) updateValue = '';\n\t\tif (internalType === 'boolean')\n\t\t\tupdateValue = updateValue === '1' ? 'true' : 'false';\n\n\t\tconst hasChange =\n\t\t\tvalue !== updateValue || displayValue !== updateDisplayValue;\n\t\tconst change = {value: updateValue, displayValue: updateDisplayValue};\n\n\t\tif (type === LIVE_LIST_ITEM_CHANGED && hasChange) accum[column] = change;\n\t\telse if (type !== LIVE_LIST_ITEM_CHANGED) accum[column] = change;\n\n\t\treturn accum;\n\t}, {});\n};\n\nconst getRow = ({\n\tisGrouped,\n\tgroupedColumn,\n\trows,\n\tqueuedLiveListUpdate,\n\tsysID,\n\tisChoiceAggregate\n}) => {\n\tif (!isGrouped) return rows.get(sysID);\n\n\tconst groupValue = get(queuedLiveListUpdate, `${groupedColumn}.value`);\n\tconst groupDisplayValue = get(\n\t\tqueuedLiveListUpdate,\n\t\t`${groupedColumn}.displayValue`\n\t);\n\tconst groupKey = `${groupValue}${isChoiceAggregate ? groupDisplayValue : ''}`;\n\tconst group = rows.get(groupKey);\n\tconst groupMap = get(group, 'groupRows', new Map());\n\treturn groupMap.get(sysID);\n};\n\nexport const updateLiveListState = (coeffects, type) => {\n\tconst {\n\t\tstate: {\n\t\t\tsubscriptionParameters: {table},\n\t\t\tqueuedLiveListUpdates = {},\n\t\t\tliveListCount: prevLiveListCount\n\t\t},\n\t\taction,\n\t\tdispatch,\n\t\tupdateState,\n\t\tproperties: {model}\n\t} = coeffects;\n\n\tconst results = get(\n\t\taction.payload,\n\t\tglideRecordSubscriptionResultsPath(table),\n\t\t[]\n\t);\n\n\tconst isGrouped = get(model, 'tableMetadata.isGrouped', false);\n\tconst groupedColumn = get(model, 'tableMetadata.groupedColumn', '');\n\tconst isChoiceAggregate = get(model, 'layoutQuery.isChoiceAggregate', false);\n\tconst rows = get(model, 'layoutQuery.queryRows', new Map());\n\tconst columnsMap = get(model, 'allColumns', new Map());\n\n\tconst newLiveListUpdates = results.reduce((accum, queuedLiveListUpdate) => {\n\t\tconst sysID = get(queuedLiveListUpdate, 'sys_id.value');\n\n\t\tconst row = getRow({\n\t\t\tisGrouped,\n\t\t\tgroupedColumn,\n\t\t\trows,\n\t\t\tqueuedLiveListUpdate,\n\t\t\tsysID,\n\t\t\tisChoiceAggregate\n\t\t});\n\t\tconst rowColumns = get(row, 'rowData', new Map());\n\n\t\t// If row columns are empty, that means that the record that is changed is not currently on the page\n\t\t// so we cannot diff with current items on page. Default to row changed so row will be bolded\n\t\tlet updateType = type;\n\t\tif (type === LIVE_LIST_ITEM_CHANGED && rowColumns.size === 0)\n\t\t\tupdateType = LIVE_LIST_ITEM_ENTERED;\n\n\t\tconst updates = reduceUpdates(\n\t\t\tqueuedLiveListUpdate,\n\t\t\trowColumns,\n\t\t\tcolumnsMap,\n\t\t\tupdateType\n\t\t);\n\n\t\tif (type !== LIVE_LIST_ITEM_CHANGED || !isEmpty(updates))\n\t\t\taccum[sysID] = {\n\t\t\t\t...updates,\n\t\t\t\tliveListType: updateType\n\t\t\t};\n\n\t\treturn accum;\n\t}, queuedLiveListUpdates);\n\n\tconst liveListCount = Object.keys(newLiveListUpdates).length;\n\n\tif (prevLiveListCount !== liveListCount)\n\t\tdispatch(ARIA_LIVE_MESSAGE, {\n\t\t\tmessage: t('There are {0} new updates for this list', liveListCount)\n\t\t});\n\n\tupdateState({queuedLiveListUpdates: newLiveListUpdates, liveListCount});\n};\n\nexport const getColumnTemplateString = columns =>\n\t[...columns.entries()].reduce((accum, [key]) => {\n\t\treturn accum + getColumn(key);\n\t}, defaultColumn);\n\nexport const subscriptionActionHandlers = {\n\t[LIVE_LIST_SUBSCRIBE]: createGraphQLEffect(subscriptionQueryString, {\n\t\ttemplateVarList: [\n\t\t\tLIVE_LIST_QUERY_TEMPLATE_FIELD_TABLE,\n\t\t\tLIVE_LIST_QUERY_TEMPLATE_FIELD_COLUMNS\n\t\t],\n\t\tvariableList: [LIVE_LIST_QUERY_TEMPLATE_FIELD_QUERY],\n\t\tsubscriptionStartedActionType: LIVE_LIST_SUBSCRIPTION_STARTED,\n\t\tsubscriptionSuccessActionType: LIVE_LIST_SUBSCRIPTION_SUCCESS,\n\t\tsubscriptionFailedActionType: LIVE_LIST_SUBSCRIPTION_FAILED,\n\t\tunsubscribeSuccessActionType: LIVE_LIST_UNSUBSCRIBE_SUCCESS,\n\t\tsuccessActionType: LIVE_LIST_SUCCESS,\n\t\titemEnteredActionType: LIVE_LIST_ITEM_ENTERED,\n\t\titemChangedActionType: LIVE_LIST_ITEM_CHANGED,\n\t\titemExitedActionType: LIVE_LIST_ITEM_EXIT,\n\t\terrorActionType: LIVE_LIST_ERROR\n\t}),\n\t[LIVE_LIST_SUBSCRIPTION_STARTED]: {\n\t\teffect: coeffects => {\n\t\t\tLOG.info('LIVE_LIST_SUBSCRIPTION_STARTED', coeffects);\n\t\t}\n\t},\n\t[LIVE_LIST_SUBSCRIPTION_SUCCESS]: {\n\t\teffect: coeffects => {\n\t\t\tLOG.info('LIVE_LIST_SUBSCRIPTION_SUCCESS', coeffects);\n\t\t}\n\t},\n\t[LIVE_LIST_UNSUBSCRIBE_SUCCESS]: {\n\t\teffect: coeffects => {\n\t\t\tLOG.info('LIVE_LIST_UNSUBSCRIBE_SUCCESS', coeffects);\n\t\t}\n\t},\n\t[LIVE_LIST_SUBSCRIPTION_FAILED]: {\n\t\teffect: coeffects => {\n\t\t\tLOG.info('LIVE_LIST_SUBSCRIPTION_FAILED', coeffects);\n\t\t}\n\t},\n\t[LIVE_LIST_SUCCESS]: {\n\t\teffect: coeffects => {\n\t\t\tLOG.info('LIVE_LIST_SUCCESS', coeffects);\n\t\t}\n\t},\n\t[LIVE_LIST_ITEM_ENTERED]: {\n\t\teffect: coeffects => {\n\t\t\tLOG.info('LIVE_LIST_ITEM_ENTERED', coeffects);\n\t\t\tupdateLiveListState(coeffects, LIVE_LIST_ITEM_ENTERED);\n\t\t}\n\t},\n\t[LIVE_LIST_ITEM_CHANGED]: {\n\t\teffect: coeffects => {\n\t\t\tLOG.info('LIVE_LIST_ITEM_CHANGED', coeffects);\n\t\t\tupdateLiveListState(coeffects, LIVE_LIST_ITEM_CHANGED);\n\t\t}\n\t},\n\t[LIVE_LIST_ITEM_EXIT]: {\n\t\teffect: coeffects => {\n\t\t\tLOG.info('LIVE_LIST_ITEM_EXIT', coeffects);\n\t\t\tupdateLiveListState(coeffects, LIVE_LIST_ITEM_EXIT);\n\t\t}\n\t},\n\t[LIVE_LIST_ERROR]: {\n\t\teffect: coeffects => {\n\t\t\tLOG.info('LIVE_LIST_ERROR', coeffects);\n\t\t}\n\t},\n\t[COMPONENT_DISCONNECTED]: {\n\t\teffect: coeffects => {\n\t\t\tliveListUnsubscribe(coeffects);\n\t\t\tLOG.info('LIVE_LIST_ERROR', coeffects);\n\t\t}\n\t}\n};\n","import {Logger} from './logger';\nimport {PRESOURCE_WSCONFIG_PATH} from '../constants';\nimport get from 'lodash/get';\n\nconst LOG = Logger().createLog('presourceGetter');\n\nexport const presourceGetter = (window, path) => {\n\treturn get(window, path);\n};\n\nexport const presourceDataModel = data => {\n\tconst wsConfigIdResults = get(\n\t\tdata,\n\t\t'data.GlideRecord_Query.sys_aw_master_config._results',\n\t\t''\n\t);\n\n\tif (wsConfigIdResults instanceof Array) {\n\t\treturn get(wsConfigIdResults[0], 'sys_id.value', '');\n\t}\n\n\tLOG.warn('Could not find presource data for wsConfigSysId');\n\treturn '';\n};\n\nexport const getWorkspaceConfigId = window => {\n\tconst presourceWsConfigData = presourceGetter(\n\t\twindow,\n\t\tPRESOURCE_WSCONFIG_PATH\n\t);\n\n\treturn presourceDataModel(presourceWsConfigData);\n};\n","export const choiceColumnQuery = `query($table: String!, $column: String!) {\n  GlideChoiceColumn_Query {\n\t\tchoices: getChoiceFields(table: $table, column: $column) {\n      rawValue,\n      displayValue,\n      isDisabled\n    }\n  }\n}`;\n\nconst fragments = ({includeHighlightedData}) => `\n  fragment rowQuery on GlideListLayout_QueryRowType {\n    className\n    uniqueId\n    displayValue\n    rowData {\n      columnName\n      columnData {\n        displayValue\n        value\n        documentIdReference\n      }\n    }\n    ${\n\t\t\tincludeHighlightedData\n\t\t\t\t? `highlightedData @include(if: $runHighlightedValuesQuery){\n        field\n        value\n        status\n        showIcon\n      }`\n\t\t\t\t: ''\n\t\t}\n    dbViewData {\n      tableKey\n      uniqueId\n    }\n  }\n  `;\n\nconst groupedRow = `\n  ... on GlideListLayout_GroupedQueryRowType {\n    displayValue\n    value\n    field\n    aggregateQuery\n    groupChoiceTable\n    count\n    query {\n      ...rowQuery\n    }\n  }\n`;\n\nconst singleRow = `\n  ... on GlideListLayout_QueryRowType {\n    ...rowQuery\n  }`;\n\nconst daData = `\n    toolTip\n    buttonType\n    recordSelectionRequired\n    confirmationRequired\n    confirmationMessage\n    assignmentId\n    table\n    view\n    name\n    icon\n    label\n    dependency\n    requiresValue\n    order\n    modelFieldRequired\n    groupBy\n    group\n    actionType\n    actionComponent: actionComponentTag\n    actionAttributes\n    actionDispatch\n    actionPayload\n    modelConditions {\n      field\n      operator\n      value\n      newQuery\n      or\n    }\n    payloadMap {\n      name\n      value\n    }\n`;\n\nconst singleButton = `\n  ... on GlideListLayout_DeclarativeActionModelType {\n    ${daData}\n}`;\n\nconst groupedButton = `\n  ... on GlideListLayout_DeclarativeActionGroupType {\n    group\n    groupId\n    order\n    groupedActions {\n      ${daData}\n    }\n}`;\n\nconst listLayoutQueryFragment = `\nfragment listLayoutQuery on GlideListLayout_ListLayoutQueryType {\n  encodedQuery\n  table\n  orderByColumn\n  orderByIsDescending\n  allSysIds\n  count\n  groupCount\n  isChoiceAggregate\n  isOmitCount\n  liveLists @include(if: $disableLiveList)\n\n  omitCountData {\n    hasNextPage\n    omitCountRowCount\n  }\n  queryRows {\n    ${groupedRow}\n    ${singleRow}\n  }\n}\n`;\n\nconst referenceListLayoutQueryFragment = `\nfragment referenceListLayoutQuery on GlideListLayout_ReferenceListLayoutQueryType {\n  encodedQuery\n  table\n  orderByColumn\n  orderByIsDescending\n  allSysIds\n  count\n  queryRows {\n    ${groupedRow}\n    ${singleRow}\n  }\n}\n`;\n\nconst commonQuery = (layoutQuery = 'listLayoutQuery') => `\nmetadata @include(if: $runQuery) {\n  isDBView\n  isScriptableTable\n  isGrouped\n  groupedColumn\n  groupByDisplayValue\n}\npreferences @include(if: $runQuery) {\n  name\n  value\n}\ntiny\nquery\nlistTitle\nlistId\nlistAttributes @include(if: $runQuery)\nallColumns @include(if: $runQuery) {\n  columnName\n  columnData {\n    label\n    internalType\n    isFilterable\n    isSortable\n    isGroupable\n    isChoice\n    elementSysId\n    tableName\n    isFirstNonRef\n  }\n  internalType\n}\ndeclarativeActions @include(if: $isDeclarativeActionsRequired){\n      ${singleButton}\n      ${groupedButton}\n}\nqueryCategory\nlayoutQuery {\n  ...${layoutQuery}\n}\n  `;\n\nexport const tinyListModel = `\n  query($tiny: String!, $runQuery: Boolean!, $isDeclarativeActionsRequired:Boolean!, $runHighlightedValuesQuery:Boolean!, $limit: Int, $offset: Int, $disableLiveList: Boolean!) {\n    GlideListLayout_Query {\n      getTinyListLayout(tiny: $tiny, runQuery: $runQuery, isDeclarativeActionsRequired: $isDeclarativeActionsRequired, runHighlightedValuesQuery:$runHighlightedValuesQuery, limit:$limit, offset:$offset) {\n        ${commonQuery('listLayoutQuery')}\n      }\n    }\n  }\n  ${fragments({includeHighlightedData: true})}\n  ${listLayoutQueryFragment}\n`;\n\nexport const listQueryModel = `\nquery ($columns: String, $listId: String, $maxColumns: Int, $limit: Int, $offset: Int, $groupedOffset: Int, $parentRecordSysId: String, $parentTable: String, $query: String, $workspaceConfigId: String, $actionConfigId: String, $highlightedValueConfigId: String, $relatedListName: String, $source: String, $runQuery: Boolean!,$table: String!, $view: String, $runHighlightedValuesQuery: Boolean!, $isDeclarativeActionsRequired: Boolean!, $tiny: String, $queryCategory: String, $listTitle: String, $disableLiveList: Boolean!) {\n  GlideListLayout_Query {\n    getListLayout(columns: $columns  listId: $listId, maxColumns: $maxColumns, limit: $limit, offset: $offset, groupedOffset: $groupedOffset, parentRecordSysId: $parentRecordSysId, parentTable: $parentTable ,workspaceConfigId: $workspaceConfigId, actionConfigId: $actionConfigId, highlightedValueConfigId: $highlightedValueConfigId, query: $query, relatedListName: $relatedListName, source: $source, runQuery: $runQuery,table: $table, view: $view, runHighlightedValuesQuery: $runHighlightedValuesQuery, isDeclarativeActionsRequired: $isDeclarativeActionsRequired, tiny: $tiny, queryCategory: $queryCategory, listTitle: $listTitle) {\n        ${commonQuery('listLayoutQuery')}\n      }\n    }\n  }\n  ${fragments({includeHighlightedData: true})}\n  ${listLayoutQueryFragment}\n  `;\n\nexport const referenceListModel = `\nquery ($table: String!, $field: String! , $sysId: String, $encodedRecord: String, $serializedChanges: String, $chars:String!, $limit: Int!, $offset:Int!, $sortBy: String, $sortDescending: Boolean, $searchOperator: String, $query: String, $skipRecent: Boolean, $refTableName:String, $sysparm_additional_qual: String, $sysparm_exact_match: Boolean, $runQuery: Boolean!, $isDeclarativeActionsRequired: Boolean!, $tiny: String, $queryCategory: String, $ignoreRefQual: Boolean, $ignoreDepAsRefQual: Boolean) {\n  GlideListLayout_Query {\n    getReferenceListLayout(table: $table,field: $field,sysId: $sysId,encodedRecord: $encodedRecord,serializedChanges: $serializedChanges,chars:$chars,limit: $limit,offset:$offset,sortBy: $sortBy,sortDescending: $sortDescending,searchOperator: $searchOperator,query: $query, skipRecent: $skipRecent, sysparm_ref_override: $refTableName, sysparm_additional_qual: $sysparm_additional_qual, sysparm_exact_match: $sysparm_exact_match, runQuery: $runQuery, tiny: $tiny, queryCategory: $queryCategory, ignoreRefQual: $ignoreRefQual, ignoreDepAsRefQual: $ignoreDepAsRefQual) {\n      ${commonQuery('referenceListLayoutQuery')}\n    }\n  }\n}\n${fragments({includeHighlightedData: false})}\n${referenceListLayoutQueryFragment}\n`;\n","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \":host(now-record-list-connected),:host(now-record-list-connected-picker),:host(now-record-list-connected-reference),:host(now-record-list-connected-related),:host(now-record-list-connected-snapshot){width:100%}\", \"\"]);\n\n// exports\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","import '@servicenow/now-alert';\nimport {\n\tDATA_PROVIDER_BOOTSTRAP,\n\tGRID_CELL_MAXCHAR,\n\tLIST_ID_CHANGED,\n\tLIST_PROP_RESET,\n\tLIST_TYPES,\n\tLIST_TYPE_REFERENCE,\n\tLIST_USER_PREFERENCE_ROWCOUNT,\n\tRECORD_LIST_SELECTED_COUNT_RESET,\n\tSET_ORIGINAL_CONDITONS\n} from '../../constants';\nimport {PROPERTIES_SET} from '@servicenow/ui-core/lib/constants';\nimport {default as actionHandlers} from './actions/index';\nimport {ariaLiveBehavior} from '@devsnc/sn-list-commons';\nimport {createCustomElement} from '@servicenow/ui-core';\nimport {getAriaLiveLoadingRegion} from './listUtils';\nimport {getFeatureFlagsFromProperties} from '../../utils/featureFlags';\nimport {getUserPreference, userPreferencesBehavior} from 'sn-user-preferences';\nimport {default as listDataProvider} from '../dataProviders/list/listDataProvider';\nimport {\n\t// eslint-disable-next-line no-unused-vars\n\tnowRecordListReference,\n\treferenceFeatureFlags\n} from '@servicenow/now-record-list';\nimport isEmpty from 'lodash/isEmpty';\nimport packageJson from '../../../package.json';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\nimport styles from './list.scss';\n\nconst view = (state, {updateState}) => {\n\tconst {\n\t\tcomponentId,\n\t\tproperties,\n\t\tproperties: {\n\t\t\talertList,\n\t\t\tallRecordsSelected,\n\t\t\tapplyLimit,\n\t\t\tcolumns,\n\t\t\tcolumnsResized,\n\t\t\tcolumnWidths,\n\t\t\tdataUpdatedTime,\n\t\t\tdeclarativeActions,\n\t\t\terror,\n\t\t\texceptedRecords,\n\t\t\tfixedQuery,\n\t\t\thighlightContent,\n\t\t\tisDirty,\n\t\t\tisRefList,\n\t\t\tlistMenuOpen,\n\t\t\tlistTitle,\n\t\t\tlistType,\n\t\t\tloading,\n\t\t\tmaxCharLimit,\n\t\t\tmaxColumns,\n\t\t\tmenuSelection,\n\t\t\tmodel,\n\t\t\torderBy,\n\t\t\toriginalConditions,\n\t\t\tpage,\n\t\t\tpanelConfig,\n\t\t\tpanelOpened,\n\t\t\tparsedQueryModel,\n\t\t\tquery,\n\t\t\tselectedListId,\n\t\t\tselectedRecords,\n\t\t\ttable,\n\t\t\ttransitoryLimit,\n\t\t\ttransitoryPage,\n\t\t\tuserPreferenceOrderBy,\n\t\t\tview,\n\t\t\twordWrap,\n\t\t\tworkspaceConfigId\n\t\t},\n\t\tloadAriaLabel,\n\t\tcolumnWidthsResetRequested,\n\t\tisWorkspace\n\t} = state;\n\n\t// Special case for PRB1341609. EDS will not fix eds modal height until Orlando. Hardcoding reference list height to fit in large modal\n\tconst listHeight = listType === LIST_TYPE_REFERENCE ? '424px' : '100%';\n\tconst hasAlertList = alertList && !isEmpty(alertList);\n\treturn (\n\t\t<div style={{height: listHeight}}>\n\t\t\t{hasAlertList ? (\n\t\t\t\t<now-alert-list items={alertList} manageItems={true} />\n\t\t\t) : null}\n\n\t\t\t{getAriaLiveLoadingRegion({\n\t\t\t\tlistTitle,\n\t\t\t\ttable,\n\t\t\t\tloading,\n\t\t\t\tupdateState,\n\t\t\t\tloadAriaLabel\n\t\t\t})}\n\n\t\t\t<now-record-list-reference\n\t\t\t\tallRecordsSelected={allRecordsSelected}\n\t\t\t\tcolumns={columns}\n\t\t\t\tcolumnsResized={columnsResized || columnWidths.length > 0}\n\t\t\t\tcolumnWidths={columnWidths}\n\t\t\t\tcolumnWidthsResetRequested={columnWidthsResetRequested}\n\t\t\t\tconditions={query}\n\t\t\t\tdataUpdatedTime={dataUpdatedTime}\n\t\t\t\tdeclarative-actions={declarativeActions}\n\t\t\t\terror={error}\n\t\t\t\tfixedQuery={fixedQuery}\n\t\t\t\thighlightContent={highlightContent}\n\t\t\t\tinstance-id={componentId}\n\t\t\t\tisDirty={isDirty}\n\t\t\t\tis-ref-list={isRefList}\n\t\t\t\tisWorkspace={isWorkspace}\n\t\t\t\tlimit={applyLimit}\n\t\t\t\tlist-menu-open={listMenuOpen}\n\t\t\t\tlist-model={model}\n\t\t\t\tlistTitle={listTitle}\n\t\t\t\tlist-type={listType}\n\t\t\t\tloading={loading}\n\t\t\t\tmaxCharLimit={maxCharLimit}\n\t\t\t\tmaxColumns={maxColumns}\n\t\t\t\tmenuSelection={menuSelection}\n\t\t\t\toriginalConditions={originalConditions}\n\t\t\t\torder-by={isEmpty(orderBy.columnName) ? userPreferenceOrderBy : orderBy}\n\t\t\t\tpage={page}\n\t\t\t\tparsed-query-model={parsedQueryModel}\n\t\t\t\tselectedListId={selectedListId}\n\t\t\t\tselectedRecords={selectedRecords}\n\t\t\t\texceptedRecords={exceptedRecords}\n\t\t\t\ttransitoryPage={transitoryPage}\n\t\t\t\ttransitoryLimit={transitoryLimit}\n\t\t\t\twordWrap={wordWrap}\n\t\t\t\tworkspace-config-id={workspaceConfigId}\n\t\t\t\ttable={table}\n\t\t\t\tview={view}\n\t\t\t\t{...getFeatureFlagsFromProperties(properties)}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\n/**\n * The Reference List component displays a collection of records related from a related field, usually from a Form Control\n * \t\tRequired Properties:\n * \t\t\t- `listType`: Type of the list as mentioned above.\n * \t\t\t- `table`: Source of the data for the list.\n * \t\t\t- `chars`: Limits results to a specific value.\n * \t\t\t- `recordSysId`: Reference Field Name.\n * \t\t\t- `field`: Reference Field Name.\n * \t\t\t- `ignoreRefQual`: Ignore Reference Qualifier Flag.\n *\n *      Optional Properties:\n * \t\t\t- `listTitle`: Title of the list\n *\n * ```jsx\n * <now-record-list-connected-reference\n * \ttable=\"incident\" listTitle=\"Incidents\" />\n * ```\n *\n *\n * @seismicElement now-record-list-connected-reference\n * @summary The Reference List component displays a collection of records related from a related field, usually from a Form Control\n *  The Reference List component can be configured based on multiple features flags to enable disable different sections within the List.\n */\ncreateCustomElement('now-record-list-connected-reference', {\n\trenderer: {\n\t\ttype: snabbdom,\n\t\tview\n\t},\n\tstyles,\n\tproperties: {\n\t\t/**\n\t\t * @private\n\t\t */\n\n\t\tdeclarativeActions: {default: []},\n\n\t\t/**\n\t\t * If you need declarative actions available on your list, in the workspace context (ie. Agent Workspace), then this is required.\n\t\t * Only DEFAULT and RELATED list types are supported.\n\t\t * Required: No\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tworkspaceConfigId: {},\n\n\t\t/**\n\t\t * Current list variant requested. Available options DEFAULT, RELATED, REFERENCE\n\t\t * @private\n\t\t * @type {('DEFAULT'|'RELATED'|'REFERENCE')}\n\t\t */\n\t\tlistType: {default: LIST_TYPES.REFERENCE},\n\n\t\t// *** Start: Reference list props ***\n\n\t\t/**\n\t\t * Chars\n\t\t * Limits results to a specific value\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tchars: {default: ''},\n\n\t\t/**\n\t\t * Column you are performing the search\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tsearchOperator: {default: ''},\n\n\t\t/**\n\t\t * Reference Field SysId Record\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSysId: {default: ''},\n\n\t\t/**\n\t\t * Reference Field Name\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tfield: {default: ''},\n\n\t\t/**\n\t\t * Ignore Reference Qualifier Flag\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tignoreRefQual: {default: false},\n\n\t\t/**\n\t\t * Ignore dependency as Reference Qualifier\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tignoreDepAsRefQual: {default: false},\n\n\t\t/**\n\t\t * Reference Table Name\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trefTableName: {default: ''},\n\t\t// ***  End: Reference list props ***\n\n\t\t/**\n\t\t * Title to display at top of list\n\t\t * Required: No\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tlistTitle: {default: ''},\n\n\t\t/**\n\t\t * Table to render on list\n\t\t * Required: Yes\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\ttable: {default: ''},\n\n\t\t/**\n\t\t * Comma separated list of columns to render. Takes precedence over view prop\n\t\t * Required: No\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tcolumns: {default: ''},\n\n\t\t/**\n\t\t * Platform defined `view` to select columns\n\t\t * Required: No\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tview: {\n\t\t\tdefault: undefined\n\t\t},\n\n\t\t/**\n\t\t * Number of records to render per page\n\t\t * Required: No\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tlimit: {\n\t\t\tdefault: undefined,\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\tapplyLimit: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Helper to apply Number of records to redner per page\n\t\t *\n\t\t * @private\n\t\t */\n\t\tapplyLimit: {\n\t\t\tdefault: 20,\n\t\t\tcomputed(state) {\n\t\t\t\tconst {\n\t\t\t\t\tproperties: {limit}\n\t\t\t\t} = state;\n\t\t\t\tconst defaultLimit = 20;\n\t\t\t\treturn limit\n\t\t\t\t\t? limit\n\t\t\t\t\t: parseInt(\n\t\t\t\t\t\t\tgetUserPreference(\n\t\t\t\t\t\t\t\tLIST_USER_PREFERENCE_ROWCOUNT,\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tdefaultLimit\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t10\n\t\t\t\t\t  ) || defaultLimit;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Initial page to render\n\t\t * Required: No\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tpage: {default: 1},\n\n\t\t/**\n\t\t * Encoded query string to filter results by\n\t\t * Required: No\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tquery: {\n\t\t\tonChange(newVal, oldVal, {dispatch}) {\n\t\t\t\tdispatch(RECORD_LIST_SELECTED_COUNT_RESET);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Duration for scroll handle will wait to execute, duration is in milliseconds.\n\t\t * Only modify this if necessary, has render performance ramifications.\n\t\t * Required: No\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tscrollHandlerThrottle: {default: '100'},\n\n\t\t/**\n\t\t * Max number of columns to display in the list.\n\t\t * Works with either specified columns or `view`. maxColumns = 0 returns all columns\n\t\t * Required: No\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tmaxColumns: {default: 0},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tselectedRecords: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\texceptedRecords: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * Indicates whether all records across all lists have been selected.\n\t\t * Required: No\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tallRecordsSelected: {default: false},\n\n\t\t/**\n\t\t * Triggers a refresh\n\t\t * Required: No\n\t\t *\n\t\t * @private\n\t\t * @type {{}}\n\t\t */\n\t\trefreshRequested: {\n\t\t\tdefault: {\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tbackground: false,\n\t\t\t\tloaderDuration: 0\n\t\t\t},\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tif (newValue.timestamp === oldValue.timestamp) return;\n\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\t...LIST_PROP_RESET\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tloading: {\n\t\t\tdefault: true,\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\n\t\tupdateUserPrefs: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcolumnWidths: {default: []},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcolumnsResized: {default: false},\n\n\t\t/**\n\t\t * Comes from order by update which is updated in set sort. Check to see if an action is dispatched\n\t\t *\n\t\t * @private\n\t\t */\n\t\torderBy: {\n\t\t\tdefault: {\n\t\t\t\tcolumnName: undefined,\n\t\t\t\tisDescending: undefined\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Passed to list header toolbar. Comes down from list-module via the update-list-menu-query\n\t\t *\n\t\t * @private\n\t\t */\n\t\tmenuSelection: {default: ''},\n\n\t\t/**\n\t\t * Comes from list model. Can be removed. Does not need to be passed into state.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tselectedListId: {\n\t\t\tdefault: '',\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(LIST_ID_CHANGED);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Passed down to list header props\n\t\t *\n\t\t * @private\n\t\t */\n\t\ttimeAccessed: {default: Date.now()},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tparsedQueryModel: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisRefList: {\n\t\t\tdefault: true\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\talertList: {default: []},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tlistMenuOpen: {default: false},\n\n\t\t/**\n\t\t * sets the list to apply wordwrap on column\n\t\t * Required: No\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\twordWrap: {default: false},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toriginalConditions: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tfixedQuery: {default: {}},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisDirty: {\n\t\t\tdefault: false\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\titemSelectedActionSuffix: {default: ''},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tencodedRecord: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tserializedChanges: {\n\t\t\tdefault: ''\n\t\t},\n\n\t\t/**\n\t\t * Indicates that the list has experienced an error\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\terror: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * Max character limit on the text displayed in grid row cells\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tmaxCharLimit: {\n\t\t\tdefault: GRID_CELL_MAXCHAR\n\t\t},\n\n\t\t/**\n\t\t * highlights content with given patterns and color\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\thighlightContent: {default: {patterns: [], color: ''}}\n\t},\n\tonConnect(host) {\n\t\tif (!window.listComponentRegistry) {\n\t\t\twindow.listComponentRegistry = new WeakMap();\n\t\t}\n\t\twindow.listComponentRegistry.set(host, packageJson.version);\n\t},\n\tonDisconnect(host) {\n\t\tif (window.listComponentRegistry) {\n\t\t\twindow.listComponentRegistry.delete(host);\n\t\t}\n\t},\n\tonBootstrap(host, dispatch) {\n\t\tdispatch(SET_ORIGINAL_CONDITONS);\n\t\tdispatch(DATA_PROVIDER_BOOTSTRAP);\n\t},\n\tactionHandlers,\n\tinitialState: {\n\t\tcolumnWidthsResetRequested: {\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\tisWorkspace: false\n\t},\n\tbehaviors: [\n\t\tariaLiveBehavior,\n\t\tuserPreferencesBehavior,\n\t\treferenceFeatureFlags,\n\t\tlistDataProvider\n\t],\n\tdispatches: {\n\t\t/**\n\t\t * Fired when clicking on first link on row. Contains all data from row, including all cells, the table in question, and the event object\n\t\t *\n\t\t * @type {{row: {}, table: string, nativeEvent: Event}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#ROW_CLICKED': {},\n\n\t\t/**\n\t\t * Fired when a row is selected or the list query changes. Contains the number of records selected, whether this is all records, the arrays of selectedRecords and exceptedRecords, and the table and query that represent the records selected\n\t\t *\n\t\t * @type {{count: number, allRecordsSelected: boolean, query: string, table: string}}\n\t\t *\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SELECTED_RECORD_COUNT_UPDATED': {},\n\n\t\t/**\n\t\t * Fired when page changes. Contains the new page, the previous page, and current table\n\t\t *\n\t\t * @type {{page: number, prevPage: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#PAGE_UPDATED': {},\n\n\t\t/**\n\t\t * Fired when limit changes. Contains the new limit, the previous limit, and current table\n\t\t *\n\t\t * @type {{limit: number, prevLimit: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#LIMIT_UPDATED': {},\n\n\t\t/**\n\t\t * Fired when query string changes. Contains the new query, the previous query, and the current table\n\t\t *\n\t\t * @type {{query: string, prevQuery: string, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#QUERY_UPDATED': {},\n\n\t\t/**\n\t\t * Fired when list is scrolled. Throttled to once per second. Contains unix timestamp and table\n\t\t *\n\t\t * @type {{timestamp: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SCROLL_UPDATED': {},\n\n\t\t/**\n\t\t * Fired when data is requested by a record list. Contains the unix timestamp and all required parameters to fetch new list data\n\t\t *\n\t\t * @type {{timestamp: number, columns: string, limit: number, page: number, query: string, table: string, view: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_REQUESTED': {},\n\n\t\t/**\n\t\t * Fired when data request has succeeded. Contains the unix timestamp and the list model\n\t\t *\n\t\t * @type {{timestamp: string, model: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_SUCCEEDED': {},\n\n\t\t/**\n\t\t * Fired when a item is selected from list menu. Contains the item name\n\t\t *\n\t\t * @type {{name: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#MENU_ITEM_SELECTED': {},\n\n\t\t/**\n\t\t * DEPRECATED ACTIONS\n\t\t */\n\t\t/**\n\t\t * Dispatched when page limit is updated.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{limit: number}}\n\t\t */\n\t\tLIST_LIMIT_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when page number is updated.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{page: number}}\n\t\t */\n\t\tLIST_PAGE_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched Fired when user initiates scroll\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{timestamp: number, table: string}}\n\t\t */\n\t\tLIST_SCROLL_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when a list row is clicked to open a record\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{row: object, table: string, nativeEvent: object}}\n\t\t */\n\t\tLIST_ROW_CLICK_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched on change of the conditions to retrieve the data.\n\t\t * example sorting, apply/remove filter conditions, groupby\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{query: string}}\n\t\t */\n\t\tLIST_QUERY_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when list data retrieval is complete.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{timestamp: number, count: number}}\n\t\t */\n\t\tLIST_DATA_FETCH_COMPLETE: {}\n\t}\n});\n","import '@servicenow/now-alert';\nimport {\n\tDATA_PROVIDER_BOOTSTRAP,\n\tFETCH_DA,\n\tGRID_CELL_MAXCHAR,\n\tLIST_ID_CHANGED,\n\tLIST_PROP_RESET,\n\tLIST_TYPES,\n\tLIST_TYPE_REFERENCE,\n\tLIST_USER_PREFERENCE_ROWCOUNT,\n\tRECORD_LIST_SELECTED_COUNT_RESET,\n\tSET_ORIGINAL_CONDITONS\n} from '../../constants';\nimport {PROPERTIES_SET} from '@servicenow/ui-core/lib/constants';\nimport {default as actionHandlers} from './actions/index';\nimport {ariaLiveBehavior} from '@devsnc/sn-list-commons';\nimport {createCustomElement} from '@servicenow/ui-core';\nimport {getAriaLiveLoadingRegion} from './listUtils';\nimport {getFeatureFlagsFromProperties} from '../../utils/featureFlags';\nimport {getUserPreference, userPreferencesBehavior} from 'sn-user-preferences';\nimport {default as listDataProvider} from '../dataProviders/list/listDataProvider';\nimport {\n\t// eslint-disable-next-line no-unused-vars\n\tnowRecordListRelated,\n\trelatedFeatureFlags\n} from '@servicenow/now-record-list';\nimport isEmpty from 'lodash/isEmpty';\nimport packageJson from '../../../package.json';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\nimport styles from './list.scss';\n\nconst view = (state, {updateState}) => {\n\tconst {\n\t\tcomponentId,\n\t\tproperties,\n\t\tproperties: {\n\t\t\tactionConfigId,\n\t\t\talertList,\n\t\t\tallRecordsSelected,\n\t\t\tapplyLimit,\n\t\t\tcolumns,\n\t\t\tcolumnsResized,\n\t\t\tcolumnWidths,\n\t\t\tdataUpdatedTime,\n\t\t\tdeclarativeActions,\n\t\t\terror,\n\t\t\texceptedRecords,\n\t\t\tfixedQuery,\n\t\t\thighlightContent,\n\t\t\tisDirty,\n\t\t\tisParentNewRecord,\n\t\t\tisParentReadOnly,\n\t\t\tisRefList,\n\t\t\tlistMenuOpen,\n\t\t\tlistTitle,\n\t\t\tlistType,\n\t\t\tloading,\n\t\t\tmaxCharLimit,\n\t\t\tmaxColumns,\n\t\t\tmenuSelection,\n\t\t\tmodel,\n\t\t\torderBy,\n\t\t\toriginalConditions,\n\t\t\tpage,\n\t\t\tpanelConfig,\n\t\t\tpanelOpened,\n\t\t\tparentRecordSysId,\n\t\t\tparentTable,\n\t\t\tparsedQueryModel,\n\t\t\tquery,\n\t\t\trelatedListName,\n\t\t\tselectedListId,\n\t\t\tselectedRecords,\n\t\t\ttable,\n\t\t\ttransitoryLimit,\n\t\t\ttransitoryPage,\n\t\t\tuserPreferenceOrderBy,\n\t\t\tview,\n\t\t\twordWrap,\n\t\t\tworkspaceConfigId,\n\t\t\tcascadeDelete\n\t\t},\n\t\tloadAriaLabel,\n\t\tcolumnWidthsResetRequested,\n\t\tisWorkspace\n\t} = state;\n\n\t// Special case for PRB1341609. EDS will not fix eds modal height until Orlando. Hardcoding reference list height to fit in large modal\n\tconst listHeight = listType === LIST_TYPE_REFERENCE ? '424px' : '100%';\n\tconst hasAlertList = alertList && !isEmpty(alertList);\n\treturn (\n\t\t<div style={{height: listHeight}}>\n\t\t\t{hasAlertList ? (\n\t\t\t\t<now-alert-list items={alertList} manageItems={true} />\n\t\t\t) : null}\n\n\t\t\t{getAriaLiveLoadingRegion({\n\t\t\t\tlistTitle,\n\t\t\t\ttable,\n\t\t\t\tloading,\n\t\t\t\tupdateState,\n\t\t\t\tloadAriaLabel\n\t\t\t})}\n\n\t\t\t<now-record-list-related\n\t\t\t\tactionConfigId={actionConfigId}\n\t\t\t\tallRecordsSelected={allRecordsSelected}\n\t\t\t\tcolumns={columns}\n\t\t\t\tcolumnsResized={columnsResized || columnWidths.length > 0}\n\t\t\t\tcolumnWidths={columnWidths}\n\t\t\t\tcolumnWidthsResetRequested={columnWidthsResetRequested}\n\t\t\t\tconditions={query}\n\t\t\t\tdataUpdatedTime={dataUpdatedTime}\n\t\t\t\tdeclarative-actions={declarativeActions}\n\t\t\t\terror={error}\n\t\t\t\tfixedQuery={fixedQuery}\n\t\t\t\thighlightContent={highlightContent}\n\t\t\t\tinstance-id={componentId}\n\t\t\t\tisDirty={isDirty}\n\t\t\t\tisParentReadOnly={isParentReadOnly}\n\t\t\t\tisParentNewRecord={isParentNewRecord}\n\t\t\t\tis-ref-list={isRefList}\n\t\t\t\tisWorkspace={isWorkspace}\n\t\t\t\tlimit={applyLimit}\n\t\t\t\tcascade-delete={cascadeDelete}\n\t\t\t\tlist-menu-open={listMenuOpen}\n\t\t\t\tlist-model={model}\n\t\t\t\tlistTitle={listTitle}\n\t\t\t\tlist-type={listType}\n\t\t\t\tloading={loading}\n\t\t\t\tmaxCharLimit={maxCharLimit}\n\t\t\t\tmaxColumns={maxColumns}\n\t\t\t\tmenuSelection={menuSelection}\n\t\t\t\toriginalConditions={originalConditions}\n\t\t\t\torder-by={isEmpty(orderBy.columnName) ? userPreferenceOrderBy : orderBy}\n\t\t\t\tpage={page}\n\t\t\t\tparentRecordSysId={parentRecordSysId}\n\t\t\t\tparentTable={parentTable}\n\t\t\t\tparsed-query-model={parsedQueryModel}\n\t\t\t\trelatedListName={relatedListName}\n\t\t\t\tselectedListId={selectedListId}\n\t\t\t\tselectedRecords={selectedRecords}\n\t\t\t\texceptedRecords={exceptedRecords}\n\t\t\t\ttransitoryPage={transitoryPage}\n\t\t\t\ttransitoryLimit={transitoryLimit}\n\t\t\t\twordWrap={wordWrap}\n\t\t\t\tworkspace-config-id={workspaceConfigId}\n\t\t\t\ttable={table}\n\t\t\t\tview={view}\n\t\t\t\t{...getFeatureFlagsFromProperties(properties)}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\n/**\n * Collection of records related to a particular record that enables users to\n * analyze data, prioritize work, take action on and navigate to records.\n *\n * ```jsx\n * <now-record-list-connected-related\n * \ttable=\"incident\" listTitle=\"Incidents\" parentRecordSysId=\"{sysId}\" parentTable=\"{parentTableName}\" />\n * ```\n *\n * @seismicElement now-record-list-connected-related\n * @summary Renders a collection of records related to a particular record.\n */\ncreateCustomElement('now-record-list-connected-related', {\n\trenderer: {\n\t\ttype: snabbdom,\n\t\tview\n\t},\n\tstyles,\n\tproperties: {\n\t\t/**\n\t\t * Configuration used to source specific declarative actions.\n\t\t * Only DEFAULT and RELATED list types are supported.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tactionConfigId: {},\n\n\t\t/**\n\t\t * Highlighted value configuration you want to use for the list. Required if using highlighted values.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\thighlightedValueConfigId: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tdeclarativeActions: {default: []},\n\n\t\t/**\n\t\t * Workspace configuration you want to use for the list. Required if using declarative actions.\n\t\t * Only DEFAULT and RELATED list types are supported.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tworkspaceConfigId: {},\n\n\t\t/**\n\t\t * Current list variant requested. Available options DEFAULT, RELATED, REFERENCE\n\t\t * @private\n\t\t * @type {('DEFAULT'|'RELATED'|'REFERENCE')}\n\t\t */\n\t\tlistType: {default: LIST_TYPES.RELATED},\n\n\t\t/**\n\t\t * Title to display at top of the list.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tlistTitle: {default: ''},\n\n\t\t/**\n\t\t * Table to render on the list.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\ttable: {default: ''},\n\n\t\t/**\n\t\t * Comma-separated list of columns to render. Overrides the `view` property if the columns to render are different.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tcolumns: {default: ''},\n\n\t\t/**\n\t\t * Platform defined `view` used to determine which columns to render.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tview: {default: ''},\n\n\t\t/**\n\t\t * Number of records to render per page.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tlimit: {\n\t\t\tdefault: undefined,\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\tapplyLimit: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Helper to apply Number of records to redner per page\n\t\t * @private\n\t\t */\n\t\tapplyLimit: {\n\t\t\tdefault: 20,\n\t\t\tcomputed(state) {\n\t\t\t\tconst {\n\t\t\t\t\tproperties: {limit}\n\t\t\t\t} = state;\n\t\t\t\tconst defaultLimit = 20;\n\t\t\t\treturn limit\n\t\t\t\t\t? limit\n\t\t\t\t\t: parseInt(\n\t\t\t\t\t\t\tgetUserPreference(\n\t\t\t\t\t\t\t\tLIST_USER_PREFERENCE_ROWCOUNT,\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tdefaultLimit\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t10\n\t\t\t\t\t  ) || defaultLimit;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Initial page to render.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tpage: {default: 1},\n\n\t\t/**\n\t\t * Encoded query string to filter results by.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tquery: {\n\t\t\tonChange(newVal, oldVal, {dispatch}) {\n\t\t\t\tdispatch(RECORD_LIST_SELECTED_COUNT_RESET);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Number of milliseconds the scroll handle waits to execute.\n\t\t * Changing this value may affect performance.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tscrollHandlerThrottle: {default: '100'},\n\n\t\t/**\n\t\t * Maximum number of columns to display in the list.\n\t\t * Works in conjunction with either `columns` or `view` properties. To return all columns, set the value to 0.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tmaxColumns: {default: 0},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tselectedRecords: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\texceptedRecords: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * Indicates whether all records across all lists have been selected.\n\t\t * Required: No\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tallRecordsSelected: {default: false},\n\n\t\t/**\n\t\t * Triggers a refresh\n\t\t * Required: No\n\t\t * @private\n\t\t * @type {{}}\n\t\t */\n\t\trefreshRequested: {\n\t\t\tdefault: {\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tbackground: false,\n\t\t\t\tloaderDuration: 0\n\t\t\t},\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tif (newValue.timestamp === oldValue.timestamp) return;\n\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\t...LIST_PROP_RESET\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tdeclarativeActionsRefreshRequested: {\n\t\t\tdefault: {\n\t\t\t\ttimestamp: Date.now()\n\t\t\t},\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tconst {timestamp} = newValue;\n\t\t\t\tif (timestamp === oldValue.timestamp) return;\n\n\t\t\t\tdispatch(FETCH_DA);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tloading: {\n\t\t\tdefault: true,\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tupdateUserPrefs: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcolumnWidths: {default: []},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcolumnsResized: {default: false},\n\n\t\t/**\n\t\t * Comes from order by update which is updated in set sort. Check to see if an action is dispatched\n\t\t *\n\t\t * @private\n\t\t */\n\t\torderBy: {\n\t\t\tdefault: {\n\t\t\t\tcolumnName: undefined,\n\t\t\t\tisDescending: undefined\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Parent table name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tparentTable: {default: ''},\n\n\t\t/**\n\t\t * The parent record Sys ID for a RELATED list type.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tparentRecordSysId: {default: ''},\n\n\t\t/**\n\t\t * Name of the related list.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trelatedListName: {\n\t\t\tdefault: '',\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\t...LIST_PROP_RESET\n\t\t\t\t});\n\t\t\t\tdispatch(SET_ORIGINAL_CONDITONS);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Passed to list header toolbar. Comes down from list-module via the update-list-menu-query\n\t\t *\n\t\t * @private\n\t\t */\n\t\tmenuSelection: {default: ''},\n\n\t\t/**\n\t\t * Comes from list model. Can be removed. Does not need to be passed into state.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tselectedListId: {\n\t\t\tdefault: '',\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(LIST_ID_CHANGED);\n\t\t\t}\n\t\t},\n\n\t\t// Passed down to list header props\n\t\ttimeAccessed: {default: Date.now()},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tparsedQueryModel: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisRefList: {\n\t\t\tdefault: false\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisParentReadOnly: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisParentNewRecord: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\talertList: {default: []},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tlistMenuOpen: {default: false},\n\n\t\t/**\n\t\t * When true, text wraps in all columns of the list.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\twordWrap: {default: false},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toriginalConditions: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tfixedQuery: {default: {}},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisDirty: {\n\t\t\tdefault: false\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\titemSelectedActionSuffix: {default: ''},\n\n\t\t/**\n\t\t * Indicates that the list has experienced an error.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\terror: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * Indicates which table is selected.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedTable: {\n\t\t\tdefault: '',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates the selected list's Sys ID.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedSysId: {\n\t\t\tdefault: '',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates which query applies to the current table.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedQuery: {\n\t\t\tdefault: '',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates the view of the current table.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedView: {\n\t\t\tdefault: 'workspace',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates available declarative actions that can be mapped to in UI Builder.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tdaClientActionContract: {\n\t\t\tdefault: {},\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Maximum character limit on the text displayed in grid row cells.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tmaxCharLimit: {\n\t\t\tdefault: GRID_CELL_MAXCHAR\n\t\t},\n\n\t\t/**\n\t\t * Object used to highlight content with given patterns and color.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\thighlightContent: {default: {patterns: [], color: ''}},\n\n\t\t/**\n\t\t * cascadedelete object which holds graphql result.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tcascadeDelete: {\n\t\t\tdefault: {}\n\t\t}\n\t},\n\tonConnect(host) {\n\t\tif (!window.listComponentRegistry) {\n\t\t\twindow.listComponentRegistry = new WeakMap();\n\t\t}\n\t\twindow.listComponentRegistry.set(host, packageJson.version);\n\t},\n\tonDisconnect(host) {\n\t\tif (window.listComponentRegistry) {\n\t\t\twindow.listComponentRegistry.delete(host);\n\t\t}\n\t},\n\tonBootstrap(host, dispatch) {\n\t\tdispatch(SET_ORIGINAL_CONDITONS);\n\t\tdispatch(DATA_PROVIDER_BOOTSTRAP);\n\t},\n\tactionHandlers,\n\tinitialState: {\n\t\tqueuedUserPrefUpdates: [],\n\t\tcolumnWidthsResetRequested: {\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\tisWorkspace: false\n\t},\n\tbehaviors: [\n\t\tariaLiveBehavior,\n\t\tuserPreferencesBehavior,\n\t\trelatedFeatureFlags,\n\t\tlistDataProvider\n\t],\n\tdispatches: {\n\t\t/**\n\t\t * Dispatched when the user clicks the first link in a row. Contains all data from the row, including all cells, the table involved, and the Javascript event object.\n\t\t *\n\t\t * @type {{row: {}, table: string, nativeEvent: Event, sys_id: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#ROW_CLICKED': {},\n\n\t\t/**\n\t\t * Dispatched when the user clicks the first link in a row. Contains all data from the row, including all cells, the table involved, and the Javascript event object.\n\t\t *\n\t\t * @type {{row: {}, table: string, nativeEvent: Event, sys_id: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#PREVIEW_RECORD': {},\n\n\t\t/**\n\t\t * Dispatched when a row is selected or the list query changes. Contains the number of records selected, whether it includes all records, the arrays of selectedRecords and exceptedRecords, and the table and query that represent the records selected.\n\t\t *\n\t\t * @type {{count: number, allRecordsSelected: boolean, query: string, table: string}}\n\t\t *\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SELECTED_RECORD_COUNT_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when the page changes. Contains the new page, the previous page, and the current table.\n\t\t *\n\t\t * @type {{page: number, prevPage: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#PAGE_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when the limit changes. Contains the new limit, the previous limit, and the current table.\n\t\t *\n\t\t * @type {{limit: number, prevLimit: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#LIMIT_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when the query string changes. Contains the new query, the previous query, and the current table.\n\t\t *\n\t\t * @type {{query: string, prevQuery: string, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#QUERY_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when the user scrolls the list. Triggers once per second. Contains the Unix timestamp and table.\n\t\t *\n\t\t * @type {{timestamp: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SCROLL_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when data is requested by a record list. Contains the Unix timestamp and all required parameters to fetch new list data.\n\t\t *\n\t\t * @type {{timestamp: number, columns: string, limit: number, page: number, query: string, table: string, view: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_REQUESTED': {},\n\n\t\t/**\n\t\t * Dispatched when a data request succeeds. Contains the Unix timestamp and the list model, list title, query, and table.\n\t\t *\n\t\t * @type {{timestamp: string, model: object, listTitle: string, query: string, table: string, parentRecordSysId: string, parentTable: string, relatedListName: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_SUCCEEDED': {},\n\n\t\t/**\n\t\t * Dispatched when a data request fails. Contains the error information.\n\t\t *\n\t\t * @type {{error: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_FAILED': {},\n\n\t\t/**\n\t\t * Dispatched when the user selects an item from the list menu. Contains the item name.\n\t\t *\n\t\t * @type {{name: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#MENU_ITEM_SELECTED': {},\n\n\t\t/**\n\t\t * Dispatched when a declarative action with the client action payload key 'RECORD_COMMON#ACTION_CLICKED' is emitted.\n\t\t *\n\t\t * @type {{wrappedAction: string, wrappedPayload: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DA_WRAPPED_CLICKED': {},\n\n\t\t/**\n\t\t * Dispatched when the list refreshes.\n\t\t *\n\t\t * @type {{timestamp: string, fromButton: boolean}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#REFRESH_REQUESTED': {},\n\n\t\t/**\n\t\t * DEPRECATED ACTIONS\n\t\t */\n\t\t/**\n\t\t * Dispatched when page limit is updated.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{limit: number}}\n\t\t */\n\t\tLIST_LIMIT_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when page number is updated.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{page: number}}\n\t\t */\n\t\tLIST_PAGE_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched Fired when user initiates scroll\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{timestamp: number, table: string}}\n\t\t */\n\t\tLIST_SCROLL_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when a list row is clicked to open a record\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{row: object, table: string, nativeEvent: object}}\n\t\t */\n\t\tLIST_ROW_CLICK_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched on change of the conditions to retrieve the data.\n\t\t * example sorting, apply/remove filter conditions, groupby\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{query: string}}\n\t\t */\n\t\tLIST_QUERY_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when list data retrieval is complete.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{timestamp: number, count: number}}\n\t\t */\n\t\tLIST_DATA_FETCH_COMPLETE: {}\n\t}\n});\n","import '@servicenow/now-alert';\nimport {\n\tDATA_PROVIDER_BOOTSTRAP,\n\tGRID_CELL_MAXCHAR,\n\tLIST_ID_CHANGED,\n\tLIST_PROP_RESET,\n\tLIST_TYPES,\n\tLIST_TYPE_REFERENCE,\n\tLIST_USER_PREFERENCE_ROWCOUNT,\n\tRECORD_LIST_SELECTED_COUNT_RESET,\n\tSET_ORIGINAL_CONDITONS\n} from '../../constants';\nimport {PROPERTIES_SET} from '@servicenow/ui-core/lib/constants';\nimport {default as actionHandlers} from './actions/index';\nimport {ariaLiveBehavior} from '@devsnc/sn-list-commons';\nimport {createCustomElement} from '@servicenow/ui-core';\nimport {getAriaLiveLoadingRegion} from './listUtils';\nimport {getFeatureFlagsFromProperties} from '../../utils/featureFlags';\nimport {getUserPreference, userPreferencesBehavior} from 'sn-user-preferences';\nimport {default as listDataProvider} from '../dataProviders/list/listDataProvider';\nimport {\n\t// eslint-disable-next-line no-unused-vars\n\tnowRecordListPicker,\n\tpickerFeatureFlags\n} from '@servicenow/now-record-list';\nimport isEmpty from 'lodash/isEmpty';\nimport packageJson from '../../../package.json';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\nimport styles from './list.scss';\n\nconst view = (state, {updateState}) => {\n\tconst {\n\t\tcomponentId,\n\t\tproperties,\n\t\tproperties: {\n\t\t\talertList,\n\t\t\tallRecordsSelected,\n\t\t\tapplyLimit,\n\t\t\tcolumns,\n\t\t\tcolumnsResized,\n\t\t\tcolumnWidths,\n\t\t\tdataUpdatedTime,\n\t\t\tdeclarativeActions,\n\t\t\terror,\n\t\t\texceptedRecords,\n\t\t\tfixedQuery,\n\t\t\thighlightContent,\n\t\t\tisDirty,\n\t\t\tisRefList,\n\t\t\tlistMenuOpen,\n\t\t\tlistTitle,\n\t\t\tlistType,\n\t\t\tloading,\n\t\t\tmaxCharLimit,\n\t\t\tmaxColumns,\n\t\t\tmenuSelection,\n\t\t\tmodel,\n\t\t\torderBy,\n\t\t\toriginalConditions,\n\t\t\tpage,\n\t\t\tpanelConfig,\n\t\t\tpanelOpened,\n\t\t\tparsedQueryModel,\n\t\t\tquery,\n\t\t\tselectedListId,\n\t\t\tselectedRecords,\n\t\t\ttable,\n\t\t\ttransitoryLimit,\n\t\t\ttransitoryPage,\n\t\t\tuserPreferenceOrderBy,\n\t\t\tview,\n\t\t\twordWrap,\n\t\t\tworkspaceConfigId\n\t\t},\n\t\tloadAriaLabel,\n\t\tcolumnWidthsResetRequested,\n\t\tisWorkspace\n\t} = state;\n\n\t// Special case for PRB1341609. EDS will not fix eds modal height until Orlando. Hardcoding reference list height to fit in large modal\n\tconst listHeight = listType === LIST_TYPE_REFERENCE ? '424px' : '100%';\n\tconst hasAlertList = alertList && !isEmpty(alertList);\n\treturn (\n\t\t<div style={{height: listHeight}}>\n\t\t\t{hasAlertList ? (\n\t\t\t\t<now-alert-list items={alertList} manageItems={true} />\n\t\t\t) : null}\n\n\t\t\t{getAriaLiveLoadingRegion({\n\t\t\t\tlistTitle,\n\t\t\t\ttable,\n\t\t\t\tloading,\n\t\t\t\tupdateState,\n\t\t\t\tloadAriaLabel\n\t\t\t})}\n\n\t\t\t<now-record-list-picker\n\t\t\t\tallRecordsSelected={allRecordsSelected}\n\t\t\t\tcolumns={columns}\n\t\t\t\tcolumnsResized={columnsResized || columnWidths.length > 0}\n\t\t\t\tcolumnWidths={columnWidths}\n\t\t\t\tcolumnWidthsResetRequested={columnWidthsResetRequested}\n\t\t\t\tconditions={query}\n\t\t\t\tdataUpdatedTime={dataUpdatedTime}\n\t\t\t\tdeclarative-actions={declarativeActions}\n\t\t\t\terror={error}\n\t\t\t\tfixedQuery={fixedQuery}\n\t\t\t\thighlightContent={highlightContent}\n\t\t\t\tinstance-id={componentId}\n\t\t\t\tisDirty={isDirty}\n\t\t\t\tis-ref-list={isRefList}\n\t\t\t\tisWorkspace={isWorkspace}\n\t\t\t\tlimit={applyLimit}\n\t\t\t\tlist-menu-open={listMenuOpen}\n\t\t\t\tlist-model={model}\n\t\t\t\tlistTitle={listTitle}\n\t\t\t\tlist-type={listType}\n\t\t\t\tloading={loading}\n\t\t\t\tmaxCharLimit={maxCharLimit}\n\t\t\t\tmaxColumns={maxColumns}\n\t\t\t\tmenuSelection={menuSelection}\n\t\t\t\toriginalConditions={originalConditions}\n\t\t\t\torder-by={isEmpty(orderBy.columnName) ? userPreferenceOrderBy : orderBy}\n\t\t\t\tpage={page}\n\t\t\t\tparsed-query-model={parsedQueryModel}\n\t\t\t\tselectedListId={selectedListId}\n\t\t\t\tselectedRecords={selectedRecords}\n\t\t\t\texceptedRecords={exceptedRecords}\n\t\t\t\ttransitoryPage={transitoryPage}\n\t\t\t\ttransitoryLimit={transitoryLimit}\n\t\t\t\twordWrap={wordWrap}\n\t\t\t\tworkspace-config-id={workspaceConfigId}\n\t\t\t\ttable={table}\n\t\t\t\tview={view}\n\t\t\t\t{...getFeatureFlagsFromProperties(properties)}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\n/**\n * The List component Picker helps picking records from available records\n * \t\tRequired Properties:\n * \t\t\t- `table`: Source of the data for the list.\n *\n *      Optional Properties:\n * \t\t\t- `listTitle`: Title of the list\n *\n * ```jsx\n * <now-record-list-connected-picker table=\"incident\" />\n *\n * ```\n *\n *\n * @seismicElement now-record-list-connected-picker\n * @summary The List component Picker helps picking records from available records\n * List component can be configured based on multiple features flags to enable disable different sections within the list.\n */\n\ncreateCustomElement('now-record-list-connected-picker', {\n\trenderer: {\n\t\ttype: snabbdom,\n\t\tview\n\t},\n\tstyles,\n\tproperties: {\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tdeclarativeActions: {default: []},\n\n\t\t/**\n\t\t * If you need declarative actions available on your list, in the workspace context (ie. Agent Workspace), then this is required.\n\t\t * Only DEFAULT and RELATED list types are supported.\n\t\t * Required: No\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tworkspaceConfigId: {},\n\n\t\t/**\n\t\t * Current list variant requested. Available options DEFAULT, RELATED, REFERENCE\n\t\t * @private\n\t\t * @type {('DEFAULT'|'RELATED'|'REFERENCE')}\n\t\t */\n\t\tlistType: {default: LIST_TYPES.PICKER},\n\n\t\t/**\n\t\t * Title to display at top of list\n\t\t * Required: No\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tlistTitle: {default: ''},\n\n\t\t/**\n\t\t * Table to render on list\n\t\t * Required: Yes\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\ttable: {default: ''},\n\n\t\t/**\n\t\t * Comma separated list of columns to render. Takes precedence over view prop\n\t\t * Required: No\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tcolumns: {default: ''},\n\n\t\t/**\n\t\t * Platform defined `view` to select columns\n\t\t * Required: No\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tview: {\n\t\t\tdefault: undefined\n\t\t},\n\n\t\t/**\n\t\t * Number of records to render per page\n\t\t * Required: No\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tlimit: {\n\t\t\tdefault: undefined,\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\tapplyLimit: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Helper to apply Number of records to redner per page\n\t\t * @private\n\t\t */\n\t\tapplyLimit: {\n\t\t\tdefault: 20,\n\t\t\tcomputed(state) {\n\t\t\t\tconst {\n\t\t\t\t\tproperties: {limit}\n\t\t\t\t} = state;\n\t\t\t\tconst defaultLimit = 20;\n\t\t\t\treturn limit\n\t\t\t\t\t? limit\n\t\t\t\t\t: parseInt(\n\t\t\t\t\t\t\tgetUserPreference(\n\t\t\t\t\t\t\t\tLIST_USER_PREFERENCE_ROWCOUNT,\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tdefaultLimit\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t10\n\t\t\t\t\t  ) || defaultLimit;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Initial page to render\n\t\t * Required: No\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tpage: {default: 1},\n\n\t\t/**\n\t\t * Encoded query string to filter results by\n\t\t * Required: No\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tquery: {\n\t\t\tonChange(newVal, oldVal, {dispatch}) {\n\t\t\t\tdispatch(RECORD_LIST_SELECTED_COUNT_RESET);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Duration for scroll handle will wait to execute, duration is in milliseconds.\n\t\t * Only modify this if necessary, has render performance ramifications.\n\t\t * Required: No\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tscrollHandlerThrottle: {default: '100'},\n\n\t\t/**\n\t\t * Max number of columns to display in the list.\n\t\t * Works with either specified columns or `view`. maxColumns = 0 returns all columns\n\t\t * Required: No\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tmaxColumns: {default: 0},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tselectedRecords: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\texceptedRecords: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * Indicates whether all records across all lists have been selected.\n\t\t * Required: No\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tallRecordsSelected: {default: false},\n\n\t\t/**\n\t\t * Triggers a refresh\n\t\t * Required: No\n\t\t *\n\t\t * @private\n\t\t * @type {object}\n\t\t */\n\t\trefreshRequested: {\n\t\t\tdefault: {\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tbackground: false,\n\t\t\t\tloaderDuration: 0\n\t\t\t},\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tif (newValue.timestamp === oldValue.timestamp) return;\n\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\t...LIST_PROP_RESET\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tloading: {\n\t\t\tdefault: true,\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tupdateUserPrefs: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcolumnWidths: {default: []},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcolumnsResized: {default: false},\n\n\t\t/**\n\t\t * Comes from order by update which is updated in set sort. Check to see if an action is dispatched\n\t\t *\n\t\t * @private\n\t\t */\n\t\torderBy: {\n\t\t\tdefault: {\n\t\t\t\tcolumnName: undefined,\n\t\t\t\tisDescending: undefined\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Passed to list header toolbar. Comes down from list-module via the update-list-menu-query\n\t\t *\n\t\t * @private\n\t\t */\n\t\tmenuSelection: {default: ''},\n\n\t\t/**\n\t\t * Comes from list model. Can be removed. Does not need to be passed into state.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tselectedListId: {\n\t\t\tdefault: '',\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(LIST_ID_CHANGED);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Passed down to list header props\n\t\t *\n\t\t * @private\n\t\t */\n\t\ttimeAccessed: {default: Date.now()},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tparsedQueryModel: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisRefList: {\n\t\t\tdefault: false\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\talertList: {default: []},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tlistMenuOpen: {default: false},\n\n\t\t/**\n\t\t * sets the list to apply wordwrap on column\n\t\t * Required: No\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\twordWrap: {default: false},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toriginalConditions: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tfixedQuery: {default: {}},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisDirty: {\n\t\t\tdefault: false\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\titemSelectedActionSuffix: {default: ''},\n\n\t\t/**\n\t\t * Indicates that the list has experienced an error\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\terror: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * Max character limit on the text displayed in grid row cells\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tmaxCharLimit: {\n\t\t\tdefault: GRID_CELL_MAXCHAR\n\t\t},\n\n\t\t/**\n\t\t * highlights content with given patterns and color\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\thighlightContent: {default: {patterns: [], color: ''}}\n\t},\n\tonConnect(host) {\n\t\tif (!window.listComponentRegistry) {\n\t\t\twindow.listComponentRegistry = new WeakMap();\n\t\t}\n\t\twindow.listComponentRegistry.set(host, packageJson.version);\n\t},\n\tonDisconnect(host) {\n\t\tif (window.listComponentRegistry) {\n\t\t\twindow.listComponentRegistry.delete(host);\n\t\t}\n\t},\n\tonBootstrap(host, dispatch) {\n\t\tdispatch(SET_ORIGINAL_CONDITONS);\n\t\tdispatch(DATA_PROVIDER_BOOTSTRAP);\n\t},\n\tactionHandlers,\n\tinitialState: {\n\t\tcolumnWidthsResetRequested: {\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\tisWorkspace: false\n\t},\n\tbehaviors: [\n\t\tariaLiveBehavior,\n\t\tuserPreferencesBehavior,\n\t\tpickerFeatureFlags,\n\t\tlistDataProvider\n\t],\n\tdispatches: {\n\t\t/**\n\t\t * Fired when clicking on first link on row. Contains all data from row, including all cells, the table in question, and the event object\n\t\t *\n\t\t * @type {{row: {}, table: string, nativeEvent: Event}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#ROW_CLICKED': {},\n\n\t\t/**\n\t\t * Fired when a row is selected or the list query changes. Contains the number of records selected, whether this is all records, the arrays of selectedRecords and exceptedRecords, and the table and query that represent the records selected\n\t\t *\n\t\t * @type {{count: number, allRecordsSelected: boolean, query: string, table: string}}\n\t\t *\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SELECTED_RECORD_COUNT_UPDATED': {},\n\n\t\t/**\n\t\t * Fired when page changes. Contains the new page, the previous page, and current table\n\t\t *\n\t\t * @type {{page: number, prevPage: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#PAGE_UPDATED': {},\n\n\t\t/**\n\t\t * Fired when limit changes. Contains the new limit, the previous limit, and current table\n\t\t *\n\t\t * @type {{limit: number, prevLimit: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#LIMIT_UPDATED': {},\n\n\t\t/**\n\t\t * Fired when query string changes. Contains the new query, the previous query, and the current table\n\t\t *\n\t\t * @type {{query: string, prevQuery: string, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#QUERY_UPDATED': {},\n\n\t\t/**\n\t\t * Fired when list is scrolled. Throttled to once per second. Contains unix timestamp and table\n\t\t *\n\t\t * @type {{timestamp: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SCROLL_UPDATED': {},\n\n\t\t/**\n\t\t * Fired when data is requested by a record list. Contains the unix timestamp and all required parameters to fetch new list data\n\t\t *\n\t\t * @type {{timestamp: number, columns: string, limit: number, page: number, query: string, table: string, view: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_REQUESTED': {},\n\n\t\t/**\n\t\t * Fired when data request has succeeded. Contains the unix timestamp and the list model\n\t\t *\n\t\t * @type {{timestamp: string, model: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_SUCCEEDED': {},\n\n\t\t/**\n\t\t * Fired when a item is selected from list menu. Contains the item name\n\t\t *\n\t\t * @type {{name: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#MENU_ITEM_SELECTED': {},\n\n\t\t/**\n\t\t * DEPRECATED ACTIONS\n\t\t */\n\t\t/**\n\t\t * Dispatched when page limit is updated.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{limit: number}}\n\t\t */\n\t\tLIST_LIMIT_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when page number is updated.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{page: number}}\n\t\t */\n\t\tLIST_PAGE_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched Fired when user initiates scroll\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{timestamp: number, table: string}}\n\t\t */\n\t\tLIST_SCROLL_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when a list row is clicked to open a record\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{row: object, table: string, nativeEvent: object}}\n\t\t */\n\t\tLIST_ROW_CLICK_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched on change of the conditions to retrieve the data.\n\t\t * example sorting, apply/remove filter conditions, groupby\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{query: string}}\n\t\t */\n\t\tLIST_QUERY_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when list data retrieval is complete.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{timestamp: number, count: number}}\n\t\t */\n\t\tLIST_DATA_FETCH_COMPLETE: {}\n\t}\n});\n","import '@servicenow/now-alert';\nimport {\n\tDATA_PROVIDER_BOOTSTRAP,\n\tGRID_CELL_MAXCHAR,\n\tLIST_ID_CHANGED,\n\tLIST_PROP_RESET,\n\tLIST_TYPES,\n\tLIST_TYPE_REFERENCE,\n\tLIST_USER_PREFERENCE_ROWCOUNT,\n\tRECORD_LIST_SELECTED_COUNT_RESET,\n\tSET_ORIGINAL_CONDITONS\n} from '../../constants';\nimport {PROPERTIES_SET} from '@servicenow/ui-core/lib/constants';\nimport {default as actionHandlers} from './actions/index';\nimport {ariaLiveBehavior} from '@devsnc/sn-list-commons';\nimport {createCustomElement} from '@servicenow/ui-core';\nimport {getAriaLiveLoadingRegion} from './listUtils';\nimport {getFeatureFlagsFromProperties} from '../../utils/featureFlags';\nimport {getUserPreference, userPreferencesBehavior} from 'sn-user-preferences';\nimport {default as listDataProvider} from '../dataProviders/list/listDataProvider';\nimport {\n\t// eslint-disable-next-line no-unused-vars\n\tnowRecordListSnapshot,\n\tsnapshotFeatureFlags\n} from '@servicenow/now-record-list';\nimport isEmpty from 'lodash/isEmpty';\nimport packageJson from '../../../package.json';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\nimport styles from './list.scss';\n\nconst view = (state, {updateState}) => {\n\tconst {\n\t\tcomponentId,\n\t\tproperties,\n\t\tproperties: {\n\t\t\talertList,\n\t\t\tallRecordsSelected,\n\t\t\tapplyLimit,\n\t\t\tcolumns,\n\t\t\tcolumnsResized,\n\t\t\tcolumnWidths,\n\t\t\tdataUpdatedTime,\n\t\t\tdeclarativeActions,\n\t\t\terror,\n\t\t\texceptedRecords,\n\t\t\tfixedQuery,\n\t\t\thighlightContent,\n\t\t\tisDirty,\n\t\t\tisRefList,\n\t\t\tlistMenuOpen,\n\t\t\tlistTitle,\n\t\t\tlistType,\n\t\t\tloading,\n\t\t\tmaxCharLimit,\n\t\t\tmaxColumns,\n\t\t\tmenuSelection,\n\t\t\tmodel,\n\t\t\torderBy,\n\t\t\toriginalConditions,\n\t\t\tpage,\n\t\t\tpanelConfig,\n\t\t\tpanelOpened,\n\t\t\tparentRecordSysId,\n\t\t\tparentTable,\n\t\t\tparsedQueryModel,\n\t\t\tquery,\n\t\t\tselectedListId,\n\t\t\tselectedRecords,\n\t\t\ttable,\n\t\t\ttransitoryLimit,\n\t\t\ttransitoryPage,\n\t\t\tuserPreferenceOrderBy,\n\t\t\tview,\n\t\t\twordWrap,\n\t\t\tworkspaceConfigId\n\t\t},\n\t\tloadAriaLabel,\n\t\tcolumnWidthsResetRequested,\n\t\tisWorkspace\n\t} = state;\n\n\t// Special case for PRB1341609. EDS will not fix eds modal height until Orlando. Hardcoding reference list height to fit in large modal\n\tconst listHeight = listType === LIST_TYPE_REFERENCE ? '424px' : '100%';\n\tconst hasAlertList = alertList && !isEmpty(alertList);\n\treturn (\n\t\t<div style={{height: listHeight}}>\n\t\t\t{hasAlertList ? (\n\t\t\t\t<now-alert-list items={alertList} manageItems={true} />\n\t\t\t) : null}\n\n\t\t\t{getAriaLiveLoadingRegion({\n\t\t\t\tlistTitle,\n\t\t\t\ttable,\n\t\t\t\tloading,\n\t\t\t\tupdateState,\n\t\t\t\tloadAriaLabel\n\t\t\t})}\n\t\t\t<now-record-list-snapshot\n\t\t\t\tallRecordsSelected={allRecordsSelected}\n\t\t\t\tcolumns={columns}\n\t\t\t\tcolumnsResized={columnsResized || columnWidths.length > 0}\n\t\t\t\tcolumnWidths={columnWidths}\n\t\t\t\tcolumnWidthsResetRequested={columnWidthsResetRequested}\n\t\t\t\tconditions={query}\n\t\t\t\tdataUpdatedTime={dataUpdatedTime}\n\t\t\t\tdeclarative-actions={declarativeActions}\n\t\t\t\terror={error}\n\t\t\t\tfixedQuery={fixedQuery}\n\t\t\t\thighlightContent={highlightContent}\n\t\t\t\tinstance-id={componentId}\n\t\t\t\tisDirty={isDirty}\n\t\t\t\tis-ref-list={isRefList}\n\t\t\t\tisWorkspace={isWorkspace}\n\t\t\t\tlimit={applyLimit}\n\t\t\t\tlist-menu-open={listMenuOpen}\n\t\t\t\tlist-model={model}\n\t\t\t\tlistTitle={listTitle}\n\t\t\t\tlist-type={listType}\n\t\t\t\tloading={loading}\n\t\t\t\tmaxCharLimit={maxCharLimit}\n\t\t\t\tmaxColumns={maxColumns}\n\t\t\t\tmenuSelection={menuSelection}\n\t\t\t\toriginalConditions={originalConditions}\n\t\t\t\torder-by={isEmpty(orderBy.columnName) ? userPreferenceOrderBy : orderBy}\n\t\t\t\tpage={page}\n\t\t\t\tparentRecordSysId={parentRecordSysId}\n\t\t\t\tparentTable={parentTable}\n\t\t\t\tparsed-query-model={parsedQueryModel}\n\t\t\t\tselectedListId={selectedListId}\n\t\t\t\tselectedRecords={selectedRecords}\n\t\t\t\texceptedRecords={exceptedRecords}\n\t\t\t\ttransitoryPage={transitoryPage}\n\t\t\t\ttransitoryLimit={transitoryLimit}\n\t\t\t\twordWrap={wordWrap}\n\t\t\t\tworkspace-config-id={workspaceConfigId}\n\t\t\t\ttable={table}\n\t\t\t\tview={view}\n\t\t\t\t{...getFeatureFlagsFromProperties(properties)}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\n/**\n * Shows users a small selection of a larger list, and provides options to filter and expand the view. It does not support column filtering,\n * cell context menus, pagination controls, or declarative actions.\n *\n * ```jsx\n * <now-record-list-connected-snapshot\n * \ttable=\"incident\" listTitle=\"Incidents\" />\n * ```\n *\n *\n * @seismicElement now-record-list-connected-snapshot\n * @summary Compact list that displays a set of records from a table.\n */\ncreateCustomElement('now-record-list-connected-snapshot', {\n\trenderer: {\n\t\ttype: snabbdom,\n\t\tview\n\t},\n\tstyles,\n\tproperties: {\n\t\t/**\n\t\t * Highlighted value configuration you want to use for the list. Required if using highlighted values.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\thighlightedValueConfigId: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tdeclarativeActions: {default: []},\n\n\t\t/**\n\t\t * Workspace configuration you want to use for the list. Required if using declarative actions.\n\t\t * Only DEFAULT and RELATED list types are supported.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tworkspaceConfigId: {},\n\n\t\t/**\n\t\t * Current list variant requested. Available options: DEFAULT, RELATED, REFERENCE.\n\t\t *\n\t\t * @private\n\t\t * @type {('DEFAULT'|'RELATED'|'REFERENCE')}\n\t\t */\n\t\tlistType: {default: LIST_TYPES.SNAPSHOT},\n\n\t\t/**\n\t\t * Title to display at the top of the list.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tlistTitle: {default: ''},\n\n\t\t/**\n\t\t * Table to show in the list. Required.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\ttable: {default: ''},\n\n\t\t/**\n\t\t * Comma-separated list of columns to render. Overrides the `view` property if the columns to render are different.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tcolumns: {default: ''},\n\n\t\t/**\n\t\t * Platform defined `view` used to determine which columns to render.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tview: {default: ''},\n\n\t\t/**\n\t\t * Number of records to render per page.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tlimit: {\n\t\t\tdefault: 5,\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\tapplyLimit: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Helper to apply Number of records to redner per page\n\t\t *\n\t\t * @private\n\t\t */\n\t\tapplyLimit: {\n\t\t\tdefault: 5,\n\t\t\tcomputed(state) {\n\t\t\t\tconst {\n\t\t\t\t\tproperties: {limit}\n\t\t\t\t} = state;\n\t\t\t\tconst defaultLimit = 5;\n\t\t\t\treturn limit\n\t\t\t\t\t? limit\n\t\t\t\t\t: parseInt(\n\t\t\t\t\t\t\tgetUserPreference(\n\t\t\t\t\t\t\t\tLIST_USER_PREFERENCE_ROWCOUNT,\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tdefaultLimit\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t10\n\t\t\t\t\t  ) || defaultLimit;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Initial page to render.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tpage: {default: 1},\n\n\t\t/**\n\t\t * Encoded query string to filter results by.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tquery: {\n\t\t\tonChange(newVal, oldVal, {dispatch}) {\n\t\t\t\tdispatch(RECORD_LIST_SELECTED_COUNT_RESET);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Number of milliseconds the scroll handle waits to execute.\n\t\t * Changing this value may affect performance.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tscrollHandlerThrottle: {default: '100'},\n\n\t\t/**\n\t\t * Maximum number of columns to display in the list.\n\t\t * Works in conjunction with either `columns` or `view` properties. To return all columns, set the value to 0.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tmaxColumns: {default: 5},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tselectedRecords: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\texceptedRecords: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * Indicates whether all records across all lists have been selected.\n\t\t * Required: No\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tallRecordsSelected: {default: false},\n\n\t\t/**\n\t\t * Triggers a refresh\n\t\t * Required: No\n\t\t *\n\t\t * @private\n\t\t * @type {{}}\n\t\t */\n\t\trefreshRequested: {\n\t\t\tdefault: {\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tbackground: false,\n\t\t\t\tloaderDuration: 0\n\t\t\t},\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tif (newValue.timestamp === oldValue.timestamp) return;\n\n\t\t\t\tdispatch(PROPERTIES_SET, {\n\t\t\t\t\t...LIST_PROP_RESET\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tloading: {\n\t\t\tdefault: true,\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tupdateUserPrefs: {\n\t\t\tdefault: []\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcolumnWidths: {default: []},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcolumnsResized: {default: false},\n\n\t\t/**\n\t\t * Comes from order by update which is updated in set sort. Check to see if an action is dispatched\n\t\t *\n\t\t * @private\n\t\t */\n\t\torderBy: {\n\t\t\tdefault: {\n\t\t\t\tcolumnName: undefined,\n\t\t\t\tisDescending: undefined\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Passed to list header toolbar. Comes down from list-module via the update-list-menu-query\n\t\t *\n\t\t * @private\n\t\t */\n\t\tmenuSelection: {default: ''},\n\n\t\t/**\n\t\t * Comes from list model. Can be removed. Does not need to be passed into state.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tselectedListId: {\n\t\t\tdefault: '',\n\t\t\tonChange(newValue, oldValue, {dispatch}) {\n\t\t\t\tdispatch(LIST_ID_CHANGED);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Passed down to list header props\n\t\t *\n\t\t * @private\n\t\t */\n\t\ttimeAccessed: {default: Date.now()},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tparsedQueryModel: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisRefList: {\n\t\t\tdefault: false\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\talertList: {default: []},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tlistMenuOpen: {default: false},\n\n\t\t/**\n\t\t * When true, text wraps in all columns of the list.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\n\t\twordWrap: {default: false},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toriginalConditions: {},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tfixedQuery: {default: {}},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tisDirty: {\n\t\t\tdefault: false\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\titemSelectedActionSuffix: {default: ''},\n\n\t\t/**\n\t\t * Indicates that the list has experienced an error.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\terror: {\n\t\t\tdefault: {}\n\t\t},\n\n\t\t/**\n\t\t * Indicates which table is selected.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedTable: {\n\t\t\tdefault: '',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates the selected list's Sys ID.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedSysId: {\n\t\t\tdefault: '',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates which query applies to the current table.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedQuery: {\n\t\t\tdefault: '',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Indicates the view of the current table.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\trecordSelectedView: {\n\t\t\tdefault: 'workspace',\n\t\t\tselectable: true\n\t\t},\n\n\t\t/**\n\t\t * Maximum character limit on the text displayed in grid row cells.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tmaxCharLimit: {\n\t\t\tdefault: GRID_CELL_MAXCHAR\n\t\t},\n\n\t\t/**\n\t\t * Object used to highlight content with given patterns and color.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\thighlightContent: {default: {patterns: [], color: ''}}\n\t},\n\tonConnect(host) {\n\t\tif (!window.listComponentRegistry) {\n\t\t\twindow.listComponentRegistry = new WeakMap();\n\t\t}\n\t\twindow.listComponentRegistry.set(host, packageJson.version);\n\t},\n\tonDisconnect(host) {\n\t\tif (window.listComponentRegistry) {\n\t\t\twindow.listComponentRegistry.delete(host);\n\t\t}\n\t},\n\tonBootstrap(host, {dispatch}) {\n\t\tdispatch(SET_ORIGINAL_CONDITONS);\n\t\tdispatch(DATA_PROVIDER_BOOTSTRAP);\n\t},\n\tactionHandlers,\n\tinitialState: {\n\t\tcolumnWidthsResetRequested: {\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\tisWorkspace: false\n\t},\n\tbehaviors: [\n\t\tariaLiveBehavior,\n\t\tuserPreferencesBehavior,\n\t\tsnapshotFeatureFlags,\n\t\tlistDataProvider\n\t],\n\tdispatches: {\n\t\t/**\n\t\t * Dispatched when the user clicks the first link in a row. Contains all data from the row, including all cells, the table involved, and the Javascript event object.\n\t\t *\n\t\t * @type {{row: {}, table: string, nativeEvent: Event, sys_id: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#ROW_CLICKED': {},\n\n\t\t/**\n\t\t * Dispatched when the query string changes. Contains the new query, the previous query, and the current table.\n\t\t *\n\t\t * @type {{query: string, prevQuery: string, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#QUERY_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when the user scrolls the list. Triggers once per second. Contains the Unix timestamp and table.\n\t\t *\n\t\t * @type {{timestamp: number, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#SCROLL_UPDATED': {},\n\n\t\t/**\n\t\t * Dispatched when data is requested by a record list. Contains the Unix timestamp and all required parameters to fetch new list data.\n\t\t *\n\t\t * @type {{timestamp: number, columns: string, limit: number, page: number, query: string, table: string, view: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_REQUESTED': {},\n\n\t\t/**\n\t\t * Dispatched when a data request succeeds. Contains the Unix timestamp and the list model, list title, query, and table.\n\t\t *\n\t\t * @type {{timestamp: string, model: object, listTitle: string, query: string, table: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_SUCCEEDED': {},\n\n\t\t/**\n\t\t * Dispatched when a data request fails. Contains the error information.\n\t\t *\n\t\t * @type {{error: object}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#DATA_FETCH_FAILED': {},\n\n\t\t/**\n\t\t * Dispatched when the user clicks View All in the list footer.\n\t\t *\n\t\t * @type {{listTitle: string, table: string, query: string, columns: string}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#VIEW_ALL_CLICKED': {},\n\n\t\t/**\n\t\t * Dispatched when the list refreshes.\n\t\t *\n\t\t * @type {{timestamp: string, fromButton: boolean}}\n\t\t */\n\t\t'NOW_RECORD_LIST_CONNECTED#REFRESH_REQUESTED': {},\n\n\t\t/**\n\t\t * DEPRECATED ACTIONS\n\t\t */\n\n\t\t/**\n\t\t * Dispatched Fired when user initiates scroll\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{timestamp: number, table: string}}\n\t\t */\n\t\tLIST_SCROLL_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched on change of the conditions to retrieve the data.\n\t\t * example sorting, apply/remove filter conditions, groupby\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{query: string}}\n\t\t */\n\t\tLIST_QUERY_UPDATED: {},\n\n\t\t/**\n\t\t * Dispatched when list data retrieval is complete.\n\t\t *\n\t\t * @deprecated\n\t\t * @type {{timestamp: number, count: number}}\n\t\t */\n\t\tLIST_DATA_FETCH_COMPLETE: {}\n\t}\n});\n","import {\n\tCONNECTED_TINY_ID_UPDATED,\n\tLIST_MENU_CONNECTED_ITEM_CLICKED,\n\tLIST_MENU_CONNECTED_SELECTED_ITEM,\n\tSN_LIST_NAVIGATION_PROPERTY_CHANGED,\n\tSN_LIST_NAVIGATION_UPDATE_REQUESTED\n} from '../../constants';\nimport {actionTypes, createCustomElement} from '@servicenow/ui-core';\nimport {setTinyId, setTinySessionKeys, updateTinyId} from './tinyHelper';\nimport isEqual from 'lodash/isEqual';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nconst {COMPONENT_BOOTSTRAPPED, COMPONENT_PROPERTY_CHANGED} = actionTypes;\n\nconst handleBootstrapEffect = coeffects => {\n\tconst {\n\t\tdispatch,\n\t\tupdateState,\n\t\tproperties: {applicationId, listUrlId, tinyUrlId}\n\t} = coeffects;\n\n\tsetTinySessionKeys(applicationId);\n\n\tconst props = {\n\t\ttinyId: setTinyId(tinyUrlId),\n\t\tlistId: listUrlId\n\t};\n\tupdateState({...props});\n\tdispatch(SN_LIST_NAVIGATION_PROPERTY_CHANGED, {...props});\n};\n\nconst updateTinyIdEffect = coeffects => {\n\tconst {\n\t\tdispatch,\n\t\tupdateState,\n\t\taction: {\n\t\t\tpayload: {tiny}\n\t\t},\n\t\tstate: {listId}\n\t} = coeffects;\n\n\tupdateTinyId(tiny);\n\n\tconst tinyId = setTinyId(tiny);\n\n\tupdateState({tinyId});\n\tdispatch(SN_LIST_NAVIGATION_UPDATE_REQUESTED, {listId, tinyId: tiny});\n};\n\nconst updateListIdEffect = coeffects => {\n\tconst {\n\t\tdispatch,\n\t\tupdateState,\n\t\taction: {\n\t\t\tpayload: {selectedListId}\n\t\t},\n\t\tproperties: {tinyUrlId}\n\t} = coeffects;\n\n\tupdateState({listId: selectedListId});\n\tdispatch(SN_LIST_NAVIGATION_UPDATE_REQUESTED, {\n\t\tlistId: selectedListId,\n\t\ttinyId: tinyUrlId\n\t});\n};\n\ncreateCustomElement('sn-list-navigation-client', {\n\tproperties: {\n\t\tapplicationId: {\n\t\t\tdefault: '',\n\t\t\tschema: {\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t},\n\t\ttinyUrlId: {\n\t\t\tdefault: '',\n\t\t\tschema: {\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t},\n\t\tlistUrlId: {\n\t\t\tdefault: '',\n\t\t\tschema: {\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t}\n\t},\n\trenderer: {\n\t\ttype: snabbdom,\n\t\tview: () => <slot></slot>\n\t},\n\tactionHandlers: {\n\t\t[COMPONENT_BOOTSTRAPPED]: {\n\t\t\teffect: handleBootstrapEffect\n\t\t},\n\t\t[COMPONENT_PROPERTY_CHANGED]: coeffects => {\n\t\t\tconst {\n\t\t\t\tdispatch,\n\t\t\t\taction: {\n\t\t\t\t\tpayload: {name, value, previousValue}\n\t\t\t\t}\n\t\t\t} = coeffects;\n\n\t\t\tif (!isEqual(value, previousValue) && name === 'tinyUrlId') {\n\t\t\t\tconst tinyId = setTinyId(value);\n\t\t\t\tdispatch(SN_LIST_NAVIGATION_PROPERTY_CHANGED, {tinyId});\n\t\t\t}\n\t\t},\n\t\t[CONNECTED_TINY_ID_UPDATED]: {\n\t\t\teffect: updateTinyIdEffect\n\t\t},\n\t\t[LIST_MENU_CONNECTED_ITEM_CLICKED]: {\n\t\t\teffect: updateListIdEffect\n\t\t},\n\t\t[LIST_MENU_CONNECTED_SELECTED_ITEM]: {\n\t\t\teffect: updateListIdEffect\n\t\t}\n\t}\n});\n","import isEmpty from 'lodash/isEmpty';\n\nlet tinySessionActiveKey = '';\nlet tinySessionIdKey = '';\n\nconst setTinyIdSession = (tinyId, isActive) => {\n\tsessionStorage.setItem(tinySessionIdKey, tinyId);\n\tsessionStorage.setItem(tinySessionActiveKey, isActive);\n};\n\nexport const updateTinyId = tinyId => {\n\tsessionStorage.setItem(tinySessionIdKey, tinyId);\n};\n\nexport const areSessionKeysEmpty = () =>\n\tisEmpty(tinySessionActiveKey) && isEmpty(tinySessionIdKey);\n\nexport const setTinySessionKeys = id => {\n\ttinySessionActiveKey = `tiny_session_${id}`;\n\ttinySessionIdKey = `tiny_id_${id}`;\n};\n\nexport const setTinyId = tinyId => {\n\tconst tinySessionActive = sessionStorage.getItem(tinySessionActiveKey);\n\tconst tinySessionId = sessionStorage.getItem(tinySessionIdKey);\n\tlet tinyProp = undefined;\n\n\tif (tinySessionActive === null && !isEmpty(tinyId)) {\n\t\t// new session with a tiny URL\n\t\ttinyProp = tinyId;\n\t\tsetTinyIdSession(tinyId, true);\n\t} else if (tinySessionActive === null) {\n\t\t// new session without a tiny URL\n\t\tsetTinyIdSession(null, false);\n\t} else if (!isEmpty(tinySessionId) && tinySessionId !== tinyId) {\n\t\t// existing session but a new tiny is pasted into the URL\n\t\ttinyProp = tinyId;\n\t\tsetTinyIdSession(tinyId, true);\n\t}\n\treturn tinyProp;\n};\n"],"sourceRoot":""}