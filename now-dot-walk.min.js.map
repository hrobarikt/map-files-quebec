{"version":3,"sources":["webpack://__TECTONIC__$servicenow_now_dot_walk/webpack/bootstrap","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__$servicenow_ui_renderer_snabbdom\"","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__sn_translate\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/actions.js","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__$servicenow_now_button\"","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__$servicenow_now_icon\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/actions.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__$servicenow_ui_core\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/state/util/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__lodash_4_17_19[\\\"get\\\"]\"","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__$servicenow_behavior_rtl_18_1_0\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./node_modules/css-loader/lib/css-base.js","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__$servicenow_now_loader\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/state/breadcrumbHandlers.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/state/util/createPanelModel.js","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__cuid_2_1_8\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/state/panelHandlers.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/state/searchInputHandlers.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/behaviors/dotWalk/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/behaviors/dotWalk/actions.js","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__$servicenow_ui_effect_http\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/behaviors/metadata/util/constructDotWalkModel.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/NowDotWalkElement.js","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__$servicenow_behavior_key_binding_18_3_21\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/now-dot-walk.scss?0aea","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/now-dot-walk.scss","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/NowDotWalk.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/common/AriaLiveRegion.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/components/panel/StackedPanel.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/components/breadcrumb/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/components/breadcrumb/Breadcrumb.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/components/breadcrumb/BreadcrumbItem.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/components/breadcrumb/BreadcrumbSeparator.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/components/input/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/components/input/Input.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/components/panel/NoResultsPanel.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/components/panel/Panel.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/components/panel/PanelItem.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/state/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/state/globalHandlers.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/state/util/createPath.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/state/util/getPanels.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/state/util/searchFields.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/behaviors/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk/behaviors/dotWalk/actionHandlers.js","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__lodash_4_17_19[\\\"last\\\"]\"","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__lodash_4_17_19[\\\"map\\\"]\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/NowDotWalkConnectedElement.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/behaviors/metadata/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/behaviors/metadata/actionHandlers.js","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__lodash_4_17_19[\\\"isEmpty\\\"]\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/behaviors/metadata/http/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/behaviors/metadata/http/dotWalkPathFetchEffect.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/behaviors/metadata/http/dotWalkTableFetchEffect.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/behaviors/metadata/util/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/now-dot-walk.scss?3ec4","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/now-dot-walk.scss","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/NowDotWalkConnected.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/getTransformedMetadata.js","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__lodash_4_17_19[\\\"isFunction\\\"]\"","webpack://__TECTONIC__$servicenow_now_dot_walk/external \"__TECTONIC__lodash_4_17_19[\\\"isObject\\\"]\"","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/state/index.js","webpack://__TECTONIC__$servicenow_now_dot_walk/./src/now-dot-walk-connected/state/globalHandlers.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__TECTONIC__$servicenow_ui_renderer_snabbdom","__TECTONIC__sn_translate","ARIA_LIVE_MESSAGE_UPDATED","BREADCRUMB_PATH_UPDATED","DOT_WALK_TRIGGERED","METADATA_TABLE_FETCHED","METADATA_PATH_FETCHED","NOW_BUTTON_ICONIC_CLICKED","PANEL_ITEM_CLICKED","SEARCH_INPUT_VALUE_CHANGED","SEARCH_INPUT_BLURRED","SEARCH_INPUT_FOCUSED","SEARCH_RIGHT_ARROW_PRESSED","SEARCH_LEFT_ARROW_PRESSED","SEARCH_UP_ARROW_PRESSED","SEARCH_DOWN_ARROW_PRESSED","SEARCH_ENTER_PRESSED","SEARCH_ESCAPE_PRESSED","PATH_UPDATED","actionTypes","BREADCRUMB_SEPARATOR_BUTTON_CLICKED","DOTWALK_TRIGGER_BUTTON","__TECTONIC__$servicenow_now_button","__TECTONIC__$servicenow_now_icon","METADATA_PATH_FETCH_FAILED","METADATA_PATH_FETCH_STARTED","METADATA_PATH_FETCH_SUCCEEDED","METADATA_TABLE_FETCH_FAILED","METADATA_TABLE_FETCH_STARTED","METADATA_TABLE_FETCH_SUCCEEDED","CONNECTED_PATH_UPDATED","NowDotWalkElement","dotWalkBehavior","__TECTONIC__$servicenow_ui_core","createPanelModel","createPath","getPanels","searchFields","__TECTONIC__lodash_4_17_19","__TECTONIC__$servicenow_behavior_rtl_18_1_0","useSourceMap","list","toString","this","map","item","content","cssMapping","btoa","sourceMapping","sourceMap","unescape","encodeURIComponent","JSON","stringify","sourceURLs","sources","source","sourceRoot","concat","join","cssWithMappingToString","mediaQuery","alreadyImportedModules","length","id","push","__TECTONIC__$servicenow_now_loader","breadcrumbTrimmedHandler","coeffects","index","action","payload","dispatch","dotWalkPath","properties","panels","state","lastPanelSource","message","path","slice","fields","selectedItem","panelIndex","selectedItemIndex","keys","indexOf","activeIndex","searchTerm","__TECTONIC__cuid_2_1_8","panelItemButtonClickHandler","displayValue","fieldName","metadata","referenceSource","console","error","pathIndex","panelItemClickHandler","field","updatedPath","lastUpdatedPathItem","getActiveItemKey","activePanel","sort","a","b","getActivePanel","activePanelIndex","getAriaLiveSearchResultText","updatedPanels","totalSearchResultCount","combinedResultMessage","forEach","computedFields","amount","panelCount","getPanelSearchResultMessage","arrowDownHandler","updateState","updatedIndex","arrowUpHandler","arrowLeftHandler","arrowRightHandler","activeItemKey","referenceDataKey","isReference","isDotWalkedFieldSelected","isNextPanelAlreadyLoaded","shouldTriggerDotWalk","updatedActivePanelIndex","enterPressedHandler","searchInputFocused","searchInputBlurredHandler","searchInputFocusedHandler","searchTermUpdatedHandler","panel","undefined","searchResultAriaLiveMessage","ariaLiveMessage","getSearchFilteringMessage","metadataBehavior","actionHandlers","default","NOW_DOT_WALK_BEHAVIOR_PATH_UPDATED","__TECTONIC__$servicenow_ui_effect_http","transformFieldValues","fieldValues","dotWalkEnabledFieldTypes","reduce","prev","curr","internalType","internal_type","label","reference","reducedValue","fieldMetadata","dotWalkApiResult","model","transformedMetadata","tablesMap","tableName","transformMetadata","tables","transformedPath","parent","transformPath","COMPONENT_PROPERTY_CHANGED","componentActionTypes","COMPONENT_ERROR_THROWN","COMPONENT_BOOTSTRAPPED","nowDotWalkElement","createCustomElement","dispatches","schema","type","leafPathSource","ariaLiveMessageHandler","componentPropertyChangedHandler","componentErrorHandler","buttonIconicClickHandler","behaviors","behavior","rtlBehavior","keyBindingBehavior","options","keyBindings","onEnterKeyPress","onArrowKeyPress","handlers","host","event","keyCode","initialState","renderer","snabbdom","view","NowDotWalk","styles","baseStyle","__TECTONIC__$servicenow_behavior_key_binding_18_3_21","result","dir","isLoading","Fragment","loading","className","role","aria-live","Renderer","createRef","getPanelItems","panelItems","prefixPanelItem","filter","f","handleInputChange","text","handleRightArrowPress","focusInputElement","elm","querySelector","inputRef","stackedPanelContentRef","hook-update","ariaLabel","disabled","ref","handleEscapePress","handleInputBlur","handleInputFocus","breadcrumbItemClickHandler","Breadcrumb","onItemClick","conditionallyRenderBreadcrumbs","scrollLeft","handleBreadCrumbItemClickHandler","items","showNoResults","hook-insert","v","parentElement","scrollWidth","conditionallyScrollToEnd","active","panelId","conditionallyRenderPanels","aria-label","breadCrumbs","panelName","separatorLabel","pathItem","testKey","itemIndex","renderBreadcrumbItems","config-aria","bare","icon","size","tooltip-content","variant","append-to-payload","Input","noop","keyCodes","transformInputChangeHandler","handleEnterPress","handleUpArrowPress","handleDownArrowPress","handleLeftArrowPress","e","handleKeyDown","preventDefault","onBlur","onFocus","placeholder","wrapperClassName","aria-describedby","autoComplete","on-focus","on-blur","on-keyup","on-keydown","secondaryValue","hidden","hintText","leadingImageSrc","selected","renderPanelItems","getClassName","baseClassName","testIdClassName","getSecondaryLabelClassName","handleItemClick","handleIconVersion","iconVersion","scrollIntoViewIfNeeded","scrollIntoView","getDotWalkButtonClassName","on-click","style","backgroundImage","title","stopPropagation","hide-padding","high-contrast","currentPath","newPanel","leafPanel","contains","val","toLowerCase","includes","searchCriteria","matcher","order","resultPartsMap","Map","fieldKey","updatedMap","set","partitionMatches","resultPartKeys","Array","from","partKey","part","COMPONENT_CONNECTED","componentBootstrappedHandler","dotWalkModel","getPathMetadata","dotWalkMetadata","pathMetadata","pathUpdatedHandler","dotWalkModelPath","combinedPath","combinedPathDisplay","selectedFieldData","dotWalkTriggeredHandler","includeTemplateMetadata","includeAllColumns","table_name","sysparm_include_all_columns","sysparm_include_template_metadata","dotWalkEnabledFieldTypeOptions","NowDotWalkConnectedElement","REFERENCE","GLIDE_LIST","nowDotWalkConnectedElement","effect","fetchErrorMessage","fetchErrorHandler","pathMetadataFetchSuccessHandler","manageMetadata","constructDotWalkModel","tableMetadataFetchSuccessHandler","updatedUrl","meta","request","updatedDotWalkModel","updateUrlSplit","split","tableNameIndex","dotWalkPathFetchEffect","dotWalkTableFetchEffect","createHttpEffect","method","headers","pathParams","queryParams","startActionType","successActionType","errorActionType","metadataWithTransform","TRANSFORM_ERROR_MESSAGE","INVALID_TRANSFORM_MESSAGE","componentErrorMessage","sysparm_path"],"mappings":"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","file":"now-dot-walk.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = __TECTONIC__$servicenow_ui_renderer_snabbdom;","module.exports = __TECTONIC__sn_translate;","export const ARIA_LIVE_MESSAGE_UPDATED =\n    'NOW_DOT_WALK#ARIA_LIVE_MESSAGE_UPDATED';\nexport const BREADCRUMB_PATH_UPDATED = 'NOW_DOT_WALK#BREADCRUMB_PATH_UPDATED';\nexport const DOT_WALK_TRIGGERED = 'NOW_DOT_WALK#DOT_WALK_TRIGGERED';\nexport const METADATA_TABLE_FETCHED = 'NOW_DOT_WALK#METADATA_TABLE_FETCHED';\nexport const METADATA_PATH_FETCHED = 'NOW_DOT_WALK#METADATA_PATH_FETCHED';\n\nexport const NOW_BUTTON_ICONIC_CLICKED = 'NOW_BUTTON_ICONIC#CLICKED';\n\nexport const PANEL_ITEM_CLICKED = 'NOW_DOT_WALK#PANEL_ITEM_CLICKED';\n\nexport const SEARCH_INPUT_VALUE_CHANGED =\n    'NOW_DOT_WALK#SEARCH_INPUT_VALUE_CHANGED';\nexport const SEARCH_INPUT_BLURRED = 'NOW_DOT_WALK#SEARCH_INPUT_BLURRED';\nexport const SEARCH_INPUT_FOCUSED = 'NOW_DOT_WALK#SEARCH_INPUT_FOCUSED';\nexport const SEARCH_RIGHT_ARROW_PRESSED =\n    'NOW_DOT_WALK#SEARCH_RIGHT_ARROW_PRESSED';\nexport const SEARCH_LEFT_ARROW_PRESSED =\n    'NOW_DOT_WALK#SEARCH_LEFT_ARROW_PRESSED';\nexport const SEARCH_UP_ARROW_PRESSED = 'NOW_DOT_WALK#SEARCH_UP_ARROW_PRESSED';\nexport const SEARCH_DOWN_ARROW_PRESSED =\n    'NOW_DOT_WALK#SEARCH_DOWN_ARROW_PRESSED';\nexport const SEARCH_ENTER_PRESSED = 'NOW_DOT_WALK#SEARCH_ENTER_PRESSED';\nexport const SEARCH_ESCAPE_PRESSED = 'NOW_DOT_WALK#SEARCH_ESCAPE_PRESSED';\n\nexport const PATH_UPDATED = 'NOW_DOT_WALK#PATH_UPDATED';\n\n// Scoped action types\nexport const actionTypes = {\n    BREADCRUMB_SEPARATOR_BUTTON_CLICKED:\n        'NOW_DOT_WALK#BREADCRUMB_SEPARATOR_BUTTON_CLICKED',\n    DOTWALK_TRIGGER_BUTTON: 'NOW_DOT_WALK#DOTWALK_TRIGGER_BUTTON',\n};\n","module.exports = __TECTONIC__$servicenow_now_button;","module.exports = __TECTONIC__$servicenow_now_icon;","export const METADATA_PATH_FETCH_FAILED = 'METADATA_PATH_FETCH_FAILED';\nexport const METADATA_PATH_FETCH_STARTED = 'METADATA_PATH_FETCH_STARTED';\nexport const METADATA_PATH_FETCH_SUCCEEDED = 'METADATA_PATH_FETCH_SUCCEEDED';\n\nexport const METADATA_TABLE_FETCH_FAILED = 'METADATA_TABLE_FETCH_FAILED';\nexport const METADATA_TABLE_FETCH_STARTED = 'METADATA_TABLE_FETCH_STARTED';\nexport const METADATA_TABLE_FETCH_SUCCEEDED = 'METADATA_TABLE_FETCH_SUCCEEDED';\n\nexport const BREADCRUMB_PATH_UPDATED = 'NOW_DOT_WALK#BREADCRUMB_PATH_UPDATED';\nexport const DOT_WALK_TRIGGERED = 'NOW_DOT_WALK#DOT_WALK_TRIGGERED';\nexport const PATH_UPDATED = 'NOW_DOT_WALK#PATH_UPDATED';\n\nexport const CONNECTED_PATH_UPDATED = 'NOW_DOT_WALK_CONNECTED#PATH_UPDATED';\n","import NowDotWalkElement from './NowDotWalkElement';\nimport { dotWalkBehavior } from './behaviors';\nimport {\n    BREADCRUMB_PATH_UPDATED,\n    METADATA_PATH_FETCHED,\n    METADATA_TABLE_FETCHED,\n} from './actions';\n\nexport default NowDotWalkElement;\nexport {\n    dotWalkBehavior,\n    BREADCRUMB_PATH_UPDATED,\n    METADATA_PATH_FETCHED,\n    METADATA_TABLE_FETCHED,\n};\n","module.exports = __TECTONIC__$servicenow_ui_core;","import createPanelModel from './createPanelModel';\nimport createPath from './createPath';\nimport getPanels from './getPanels';\nimport searchFields from './searchFields';\n\nexport { createPanelModel, createPath, getPanels, searchFields };\n","module.exports = __TECTONIC__lodash_4_17_19[\"get\"];","module.exports = __TECTONIC__$servicenow_behavior_rtl_18_1_0;","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","module.exports = __TECTONIC__$servicenow_now_loader;","import { t } from 'sn-translate';\nimport { ARIA_LIVE_MESSAGE_UPDATED, BREADCRUMB_PATH_UPDATED } from '../actions';\n\nconst breadcrumbTrimmedHandler = coeffects => {\n    const {\n        action: {\n            payload: { index },\n        },\n        dispatch,\n        properties: { dotWalkPath },\n        state: { panels },\n    } = coeffects;\n\n    const lastPanelSource = panels[panels.length - 1].source;\n\n    dispatch(ARIA_LIVE_MESSAGE_UPDATED, {\n        message: t('Closed {0} panel and fields', lastPanelSource),\n    });\n\n    dispatch(BREADCRUMB_PATH_UPDATED, {\n        path: dotWalkPath.slice(0, index + 1),\n    });\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { breadcrumbTrimmedHandler };\n","import cuid from 'cuid';\n\n/**\n * Params used to define panel model to be created\n * @typedef {{\n *  id: string\n *  fields: object\n *  source: string\n *  selectedItem: string\n *  panelIndex: number\n *  }} CreatePanelModelParams\n */\n\n/**\n *\n * @param {CreatePanelModelParams} params\n */\nconst createPanelModel = ({ id, fields, source, selectedItem, panelIndex }) => {\n    const selectedItemIndex = Object.keys(fields).indexOf(selectedItem);\n    const activeIndex =\n        selectedItem && selectedItemIndex !== -1 ? selectedItemIndex : 0;\n\n    return {\n        id: id || cuid(),\n        fields,\n        searchTerm: '',\n        selectedItem,\n        source,\n        activeIndex,\n        panelIndex,\n    };\n};\n\nexport default createPanelModel;\n","module.exports = __TECTONIC__cuid_2_1_8;","import get from 'lodash/get';\nimport { t } from 'sn-translate';\nimport {\n    ARIA_LIVE_MESSAGE_UPDATED,\n    DOT_WALK_TRIGGERED,\n    PATH_UPDATED,\n    SEARCH_INPUT_VALUE_CHANGED,\n} from '../actions';\nimport { createPath } from './util';\n\nconst panelItemButtonClickHandler = coeffects => {\n    const {\n        action: {\n            payload: { displayValue, fieldName, panelIndex, source },\n        },\n        properties: { metadata = {} },\n        dispatch,\n    } = coeffects;\n\n    const referenceSource = get(\n        metadata,\n        `${source}[${fieldName}].referenceDataKey`\n    );\n\n    if (!referenceSource) {\n        // eslint-disable-next-line no-console\n        console.error(\n            'Attempting to dot walk on a field that had no reference'\n        );\n    }\n\n    dispatch(DOT_WALK_TRIGGERED, {\n        fieldName,\n        displayValue,\n        referenceSource,\n        source,\n        pathIndex: panelIndex,\n    });\n    dispatch(ARIA_LIVE_MESSAGE_UPDATED, {\n        message: t(\n            'Panel expanded on {0} field for {1} panel',\n            displayValue,\n            source\n        ),\n    });\n    dispatch(SEARCH_INPUT_VALUE_CHANGED, { searchTerm: null });\n};\n\nconst panelItemClickHandler = coeffects => {\n    const {\n        action: {\n            payload: { panelIndex, field, displayValue, source },\n        },\n        dispatch,\n        properties: { dotWalkPath: path },\n    } = coeffects;\n\n    let updatedPath;\n    if (panelIndex > path.length - 1) {\n        updatedPath = [...path, createPath(displayValue, field, source)];\n    } else {\n        updatedPath = path.slice(0, panelIndex + 1);\n        const lastUpdatedPathItem = updatedPath[updatedPath.length - 1];\n        lastUpdatedPathItem.displayValue = displayValue;\n        lastUpdatedPathItem.field = field;\n    }\n\n    dispatch(PATH_UPDATED, {\n        path: updatedPath,\n    });\n};\n\nexport { panelItemButtonClickHandler, panelItemClickHandler };\n","import { t } from 'sn-translate';\nimport {\n    ARIA_LIVE_MESSAGE_UPDATED,\n    DOT_WALK_TRIGGERED,\n    PANEL_ITEM_CLICKED,\n} from '../actions';\nimport { searchFields } from './util';\n\nconst arrowDownHandler = ({ state, updateState }) => {\n    const { panels, activePanelIndex: panelIndex } = state;\n    const { activeIndex, fields, computedFields } = panels[panelIndex];\n\n    const updatedIndex =\n        activeIndex === Object.keys(computedFields || fields).length - 1\n            ? activeIndex\n            : activeIndex + 1;\n\n    const updatedPanels = [...panels];\n    updatedPanels[panelIndex] = {\n        ...updatedPanels[panelIndex],\n        activeIndex: updatedIndex,\n    };\n\n    updateState({\n        panels: updatedPanels,\n    });\n};\n\nconst arrowUpHandler = ({ state, updateState }) => {\n    const { activePanelIndex, panels } = state;\n    const { activeIndex } = panels[activePanelIndex];\n\n    let updatedIndex = activeIndex;\n    if (activeIndex !== 0) updatedIndex -= 1;\n\n    const updatedPanels = [...panels];\n    updatedPanels[activePanelIndex].activeIndex = updatedIndex;\n\n    updateState({\n        panels: updatedPanels,\n    });\n};\n\nconst getActiveItemKey = activePanel => {\n    const { fields, activeIndex } = activePanel;\n    return Object.keys(fields).sort((a, b) => a.displayValue - b.displayValue)[\n        activeIndex\n    ];\n};\n\nconst getActivePanel = state => {\n    const { activePanelIndex, panels } = state;\n    return panels[activePanelIndex];\n};\n\nconst shouldTriggerDotWalk = (\n    activeItemKey,\n    activePanelIndex,\n    panels,\n    selectedItem\n) => {\n    const isDotWalkedFieldSelected = activeItemKey === selectedItem;\n\n    const isNextPanelAlreadyLoaded =\n        activeItemKey === selectedItem &&\n        activePanelIndex !== panels.length - 1;\n\n    return !isDotWalkedFieldSelected || !isNextPanelAlreadyLoaded;\n};\n\nconst arrowRightHandler = ({ state, updateState, dispatch }) => {\n    const { activePanelIndex, panels, searchTerm } = state;\n    const activePanel = getActivePanel(state);\n    const activeItemKey = getActiveItemKey(activePanel);\n\n    const { fields, selectedItem, source, panelIndex } = activePanel;\n    const { displayValue, referenceDataKey, isReference } = fields[\n        activeItemKey\n    ];\n\n    if (searchTerm) return;\n\n    if (\n        isReference &&\n        shouldTriggerDotWalk(\n            activeItemKey,\n            activePanelIndex,\n            panels,\n            selectedItem\n        )\n    ) {\n        dispatch(DOT_WALK_TRIGGERED, {\n            fieldName: activeItemKey,\n            displayValue,\n            referenceSource: referenceDataKey,\n            source,\n            pathIndex: panelIndex,\n        });\n\n        return;\n    }\n\n    let updatedActivePanelIndex = activePanelIndex;\n    if (activePanelIndex !== panels.length - 1) updatedActivePanelIndex += 1;\n\n    updateState({\n        activePanelIndex: updatedActivePanelIndex,\n    });\n};\n\nconst arrowLeftHandler = ({ state, updateState }) => {\n    const { activePanelIndex, searchTerm } = state;\n    if (searchTerm) return;\n\n    updateState({\n        activePanelIndex: activePanelIndex === 0 ? 0 : activePanelIndex - 1,\n    });\n};\n\nconst enterPressedHandler = ({ state, dispatch }) => {\n    const { activePanelIndex, panels, searchInputFocused } = state;\n    if (searchInputFocused) {\n        const activePanel = getActivePanel(state);\n        const activeItemKey = getActiveItemKey(activePanel);\n        const { displayValue } = panels[activePanelIndex].fields[activeItemKey];\n\n        dispatch(PANEL_ITEM_CLICKED, {\n            displayValue,\n            field: activeItemKey,\n            panelIndex: activePanelIndex,\n            source: activePanel.source,\n        });\n    }\n};\n\nconst getPanelSearchResultMessage = (panelCount, source) =>\n    t('{0} matching results for {1} panel. ', panelCount, source);\n\nconst getAriaLiveSearchResultText = updatedPanels => {\n    let totalSearchResultCount = 0;\n    let combinedResultMessage = '';\n\n    const searchResultCountAccumulator = ({ computedFields, source }) => {\n        const amount = Object.keys(computedFields).length;\n        totalSearchResultCount += amount;\n        combinedResultMessage += getPanelSearchResultMessage(amount, source);\n    };\n\n    updatedPanels.forEach(searchResultCountAccumulator);\n\n    const searchResults = t(\n        'Filtered to show {0} matching results. {1}',\n        totalSearchResultCount,\n        combinedResultMessage\n    );\n\n    return searchResults;\n};\n\nconst getSearchFilteringMessage = (state, searchTerm, updatedPanels) => {\n    let searchResultMessage;\n    if (state.searchTerm && searchTerm === '') {\n        searchResultMessage = t('Filter is now off');\n    } else if (state.searchTerm && searchTerm === null) {\n        searchResultMessage = t(\n            'Filter is now off. {0}',\n            state.ariaLiveMessage\n        );\n    } else if (searchTerm) {\n        searchResultMessage = getAriaLiveSearchResultText(updatedPanels);\n    } else {\n        searchResultMessage = null;\n    }\n\n    return searchResultMessage;\n};\n\nconst searchTermUpdatedHandler = ({\n    dispatch,\n    state,\n    action: {\n        payload: { searchTerm },\n    },\n    updateState,\n}) => {\n    const { panels } = state;\n\n    const updatedPanels =\n        panels &&\n        panels.map(panel => {\n            const { fields } = panel;\n            const computedFields = searchTerm\n                ? searchFields(fields, searchTerm)\n                : undefined;\n\n            return { ...panel, computedFields, activeIndex: 0 };\n        });\n\n    const searchResultAriaLiveMessage = getSearchFilteringMessage(\n        state,\n        searchTerm,\n        updatedPanels\n    );\n\n    if (searchResultAriaLiveMessage)\n        dispatch(ARIA_LIVE_MESSAGE_UPDATED, {\n            message: searchResultAriaLiveMessage,\n        });\n\n    updateState({\n        searchTerm,\n    });\n    updateState({ panels: updatedPanels });\n};\n\nconst searchInputBlurredHandler = ({ updateState }) => {\n    updateState({ searchInputFocused: false });\n};\n\nconst searchInputFocusedHandler = ({ updateState }) => {\n    updateState({ searchInputFocused: true });\n};\n\nexport {\n    arrowDownHandler,\n    arrowUpHandler,\n    arrowLeftHandler,\n    arrowRightHandler,\n    enterPressedHandler,\n    searchInputBlurredHandler,\n    searchInputFocusedHandler,\n    searchTermUpdatedHandler,\n};\n","import actionHandlers from './actionHandlers';\nimport { NOW_DOT_WALK_BEHAVIOR_PATH_UPDATED } from './actions';\n\nconst ELEMENT_NAME = 'dotWalkBehavior';\nconst metadataBehavior = {\n    name: ELEMENT_NAME,\n    actionHandlers,\n    properties: {},\n};\n\nexport { metadataBehavior as default, NOW_DOT_WALK_BEHAVIOR_PATH_UPDATED };\n","// eslint-disable-next-line import/prefer-default-export\nexport const NOW_DOT_WALK_BEHAVIOR_PATH_UPDATED =\n    'NOW_DOT_WALK_BEHAVIOR#PATH_UPDATED';\n","module.exports = __TECTONIC__$servicenow_ui_effect_http;","import get from 'lodash/get';\n\n/**\n * Array representing the dot walk path\n * @typedef {[{\n *      name: string,\n *      field: string\n *  }]} DotWalkPath\n */\n\n/**\n * Object containing table metadata\n * @typedef {[{\n *      name: string,\n *      label: string,\n *      reference?: string\n *  }]} DotWalkTables\n */\n\n/**\n * Metadata used for the dot-walk components\n * @typedef {{\n *      path: [{\n *          field: string,\n *          loading: boolean,\n *          parent: string\n *      }],\n *      metadata: {\n *          [key: string]: {\n *              [key: string]: {\n *                  displayValue: string,\n *                  isReference: boolean,\n *                  referenceDataKey?: string\n *              }\n *          }\n *      }\n *  }} DotWalkData\n */\n\n/**\n *  Dot Walk API result data\n *  @typedef {{\n *    path: DotWalkPath,\n *    tables: DotWalkTables\n *  }} DotWalkApiResult\n */\n\n/**\n * Transform table metadata field values into the structure used in the Dot Walk Model\n * @param {[{label: string, name: string, reference: string}]} fieldValues\n * @return {{[field: string]: {displayValue: string, isReference: boolean, referenceDataKey: string}}} Transformed field values\n * @param {string} dotWalkEnabledFieldTypes - Whitelist of fields to be used as a reference\n */\nexport const transformFieldValues = (fieldValues, dotWalkEnabledFieldTypes) =>\n    fieldValues.reduce((prev, curr) => {\n        const { internal_type: internalType, label, name, reference } = curr;\n        let isReference = internalType === 'reference';\n\n        if (dotWalkEnabledFieldTypes) {\n            isReference =\n                isReference ||\n                dotWalkEnabledFieldTypes.indexOf(internalType) !== -1;\n        }\n\n        const reducedValue = {\n            ...prev,\n            [name]: {\n                displayValue: label,\n                isReference,\n                referenceDataKey: reference,\n                fieldMetadata: {\n                    ...curr,\n                },\n            },\n        };\n\n        return reducedValue;\n    }, {});\n\n/**\n * Transform table metadata into the structure used in the Dot Walk Model\n * @param {{[key: string]: [{label: string, name: string, reference: string}]} tablesMap\n * @return {{[tableName: string]: {[field: string]: {displayValue: string, isReference: boolean, referenceDataKey: string}}} Transformed metadata\n * @param {string} dotWalkEnabledFieldTypes - Whitelist of fields to be used as a reference\n */\nconst transformMetadata = (tablesMap, dotWalkEnabledFieldTypes) =>\n    Object.keys(tablesMap).reduce((prev, tableName) => {\n        const fieldValues = tablesMap[tableName];\n        return {\n            ...prev,\n            [tableName]: transformFieldValues(\n                fieldValues,\n                dotWalkEnabledFieldTypes\n            ),\n        };\n    }, {});\n\n/**\n * Transform a dot walk path into the structure used in the Dot Walk Model\n * @param {[{name: string, field: string}]} path\n * @param {{[table: string]: { [field: string]: {}}} metadata\n * @return {[{displayValue: string, parent: string, field: string, loading: boolean, selected: boolean, expanded: boolean}]} Transformed dot walk path\n */\nconst transformPath = (path, metadata) =>\n    path.map(({ name, field }) => ({\n        displayValue: get(metadata, `${name}.${field}.displayValue`),\n        parent: name,\n        field,\n    }));\n\n/**\n * Used to transform dot-walk table metadata\n * into a map used for the dot-walk components\n * @param {DotWalkApiResult} dotWalkApiResult Structure representing the relevant table metadata for a dot-walk path\n * @param {string} dotWalkEnabledFieldTypes - Whitelist of fields to be used as a reference\n * @return {DotWalkData} Metadata used for the dot-walk components\n */\nconst constructDotWalkModel = (dotWalkApiResult, dotWalkEnabledFieldTypes) => {\n    const model = {\n        path: null,\n        metadata: null,\n    };\n\n    if (!dotWalkApiResult || !dotWalkApiResult.path) return model;\n\n    const { path, tables: tablesMap } = dotWalkApiResult;\n\n    const transformedMetadata = transformMetadata(\n        tablesMap,\n        dotWalkEnabledFieldTypes\n    );\n    const transformedPath = transformPath(path, transformedMetadata);\n\n    model.path = transformedPath;\n    model.metadata = transformedMetadata;\n\n    return model;\n};\n\nexport default constructDotWalkModel;\n","import './now-dot-walk';\nimport './now-dot-walk-connected';\n","import keyBindingBehavior from '@servicenow/behavior-key-binding';\nimport rtlBehavior from '@servicenow/behavior-rtl';\nimport {\n    actionTypes as componentActionTypes,\n    createCustomElement,\n} from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\nimport {\n    ARIA_LIVE_MESSAGE_UPDATED,\n    BREADCRUMB_PATH_UPDATED,\n    DOT_WALK_TRIGGERED,\n    NOW_BUTTON_ICONIC_CLICKED,\n    PANEL_ITEM_CLICKED,\n    PATH_UPDATED,\n    SEARCH_DOWN_ARROW_PRESSED,\n    SEARCH_ENTER_PRESSED,\n    SEARCH_INPUT_BLURRED,\n    SEARCH_INPUT_FOCUSED,\n    SEARCH_INPUT_VALUE_CHANGED,\n    SEARCH_LEFT_ARROW_PRESSED,\n    SEARCH_RIGHT_ARROW_PRESSED,\n    SEARCH_UP_ARROW_PRESSED,\n} from './actions';\nimport baseStyle from './now-dot-walk.scss';\nimport NowDotWalk from './NowDotWalk';\nimport {\n    ariaLiveMessageHandler,\n    arrowDownHandler,\n    arrowUpHandler,\n    buttonIconicClickHandler,\n    componentErrorHandler,\n    componentPropertyChangedHandler,\n    enterPressedHandler,\n    panelItemClickHandler,\n    searchInputBlurredHandler,\n    searchInputFocusedHandler,\n    searchTermUpdatedHandler,\n} from './state';\nimport {\n    arrowLeftHandler,\n    arrowRightHandler,\n} from './state/searchInputHandlers';\n\nconst {\n    COMPONENT_PROPERTY_CHANGED,\n    COMPONENT_ERROR_THROWN,\n    COMPONENT_BOOTSTRAPPED,\n} = componentActionTypes;\n\n/**\n * Metadata used for the dot-walk components\n * @typedef {[key: string]: {\n *              [key: string]: {\n *                  displayValue: string,\n *                  isReference: boolean,\n *                  referenceDataKey?: string\n *              }}\n *      } DotWalkMetadata\n */\n\n/**\n * Represents a dot walk path\n * @typedef {{ field: string, loading: boolean, parent: string }[]} DotWalkPath\n */\n\n/**\n * The Dot Walk component is a data source agnostic, panel-based, inverted tree component for navigating through fields and their descendants.\n *\n * ```\n *  <now-dot-walk dot-walk-model={dotWalkModel} error={error} />\n * ```\n *\n * @seismicElement now-dot-walk\n * @summary A data source agnostic, panel-based, inverted tree component for navigating through fields and their descendants.\n */\nconst nowDotWalkElement = createCustomElement('now-dot-walk', {\n    dispatches: {\n        /**\n         * Indicates that the path was updated by breadcrumb click\n         *\n         * @type {{path: string}}\n         */\n        [BREADCRUMB_PATH_UPDATED]: {},\n        /**\n         * Indicates that a field was dot-walked\n         *\n         * @type {{fieldName: string, displayValue: string, referenceSource: string, source: string, pathIndex: number}}\n         */\n        [DOT_WALK_TRIGGERED]: {},\n        /**\n         * Indicates that the path was updated\n         *\n         * @type {{path: string}}\n         */\n        [PATH_UPDATED]: {},\n    },\n    properties: {\n        /**\n         * The map of metadata that will be used to display data and navigate through fields and their descendants\n         * Required: Yes\n         *\n         * @type {DotWalkMetadata}\n         */\n        metadata: {\n            default: {},\n            schema: { type: 'object' },\n        },\n        /**\n         * The key used to get field data for the last panel.\n         * Useful when no path is selected or when a panel is dot-walked but no item has been selected on the new panel.\n         * Required: No\n         *\n         * @type {DotWalkData}\n         */\n        leafPathSource: {\n            default: '',\n            schema: { type: 'string' },\n        },\n        /**\n         * An error message to be displayed by the component.\n         * Required: No\n         *\n         * @type {string}\n         */\n        error: {\n            default: undefined,\n        },\n        /**\n         * Array that represents the current selected dot-walk path.\n         * Required: No\n         *\n         * @type {DotWalkPath[]}\n         */\n        dotWalkPath: {\n            default: [],\n            schema: { type: 'array' },\n        },\n    },\n    actionHandlers: {\n        [ARIA_LIVE_MESSAGE_UPDATED]: ariaLiveMessageHandler,\n        [COMPONENT_BOOTSTRAPPED]: componentPropertyChangedHandler,\n        [COMPONENT_ERROR_THROWN]: componentErrorHandler,\n        [COMPONENT_PROPERTY_CHANGED]: componentPropertyChangedHandler,\n        [NOW_BUTTON_ICONIC_CLICKED]: buttonIconicClickHandler,\n        [PANEL_ITEM_CLICKED]: panelItemClickHandler,\n        [SEARCH_DOWN_ARROW_PRESSED]: arrowDownHandler,\n        [SEARCH_ENTER_PRESSED]: enterPressedHandler,\n        [SEARCH_INPUT_BLURRED]: searchInputBlurredHandler,\n        [SEARCH_INPUT_FOCUSED]: searchInputFocusedHandler,\n        [SEARCH_INPUT_VALUE_CHANGED]: searchTermUpdatedHandler,\n        [SEARCH_LEFT_ARROW_PRESSED]: arrowLeftHandler,\n        [SEARCH_RIGHT_ARROW_PRESSED]: arrowRightHandler,\n        [SEARCH_UP_ARROW_PRESSED]: arrowUpHandler,\n    },\n    behaviors: [\n        {\n            behavior: rtlBehavior,\n        },\n        {\n            behavior: keyBindingBehavior,\n            options: {\n                keyBindings: {\n                    onEnterKeyPress: 'Enter',\n                    onArrowKeyPress: [\n                        'ArrowUp',\n                        'ArrowDown',\n                        'ArrowLeft',\n                        'ArrowRight',\n                    ],\n                },\n                handlers: {\n                    onArrowKeyPress: (host, event, dispatch) => {\n                        switch (event.keyCode) {\n                            case 37:\n                                // arrow-left\n                                dispatch(SEARCH_LEFT_ARROW_PRESSED);\n                                break;\n                            case 38:\n                                // arrow-up\n                                dispatch(SEARCH_UP_ARROW_PRESSED);\n                                break;\n                            case 39:\n                                // arrow-right\n                                dispatch(SEARCH_RIGHT_ARROW_PRESSED);\n                                break;\n                            case 40:\n                                // arrow-down\n                                dispatch(SEARCH_DOWN_ARROW_PRESSED);\n                                break;\n                            default:\n                                break;\n                        }\n                    },\n                    onEnterKeyPress: (host, event, dispatch) => {\n                        dispatch(SEARCH_ENTER_PRESSED);\n                    },\n                },\n            },\n        },\n    ],\n    initialState: {\n        panels: [],\n        activePanelIndex: 0,\n    },\n    renderer: { type: snabbdom },\n    view: NowDotWalk,\n    styles: [baseStyle],\n});\n\nexport default nowDotWalkElement;\n","module.exports = __TECTONIC__$servicenow_behavior_key_binding_18_3_21;","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/dist/cjs.js??ref--6-3!./now-dot-walk.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \":host(:not([dir=rtl])) .ndw-breadcrumb,:root:not([dir=rtl]) .ndw-breadcrumb{margin-left:1.5rem}:host([dir=rtl]) .ndw-breadcrumb,:root[dir=rtl] .ndw-breadcrumb{margin-right:1.5rem}.ndw-breadcrumb-item-text{color:RGB(var(--now-color--text-primary,22,27,28))}.ndw-breadcrumb ol{display:flex;list-style-type:none;padding:0;margin:4px 0 0;width:100%;flex-shrink:1;flex-wrap:wrap}.ndw-breadcrumb ol li{margin-right:.25rem;height:26px;display:flex;align-items:center;font-size:.75rem}.ndw-search-input-wrapper{display:flex;align-items:center;width:160px;min-height:35px;flex-shrink:0;transition:border-color .15s ease}.ndw-input{height:100%;width:100%;background:transparent;border:none;outline:none;font-size:.75rem}.ndw-search-input-icon{margin:0 .25rem}.now-align{display:flex}.now-align.-row{flex-direction:row}.now-align.-row.-reverse{flex-direction:row-reverse}.now-align.-column{flex-direction:column}.now-align.-column.-reverse{flex-direction:column-reverse}.now-align.-inline{justify-content:space-between}.now-align.-inline-start{justify-content:flex-start}.now-align.-inline-center{justify-content:center}.now-align.-inline-end{justify-content:flex-end}.now-align.-block{align-items:stretch}.now-align.-block-start{align-items:flex-start}.now-align.-block-center{align-items:center}.now-align.-block-end{align-items:flex-end}.now-p-block-start--xxs{padding-top:.125rem}.now-p-block-start--xs{padding-top:.25rem}.now-p-block-start--sm{padding-top:.5rem}.now-p-block-start--md{padding-top:.75rem}.now-p-block-start--lg{padding-top:1rem}.now-p-block-start--xl{padding-top:1.5rem}.now-p-block-start--xxl{padding-top:2rem}.now-p-block-start--3xl{padding-top:2.5rem}.now-p-block-start--0{padding-top:0}.now-p-block-end--xxs{padding-bottom:.125rem}.now-p-block-end--xs{padding-bottom:.25rem}.now-p-block-end--sm{padding-bottom:.5rem}.now-p-block-end--md{padding-bottom:.75rem}.now-p-block-end--lg{padding-bottom:1rem}.now-p-block-end--xl{padding-bottom:1.5rem}.now-p-block-end--xxl{padding-bottom:2rem}.now-p-block-end--3xl{padding-bottom:2.5rem}.now-p-block-end--0{padding-bottom:0}.now-p-block--xxs{padding-top:.125rem;padding-bottom:.125rem}.now-p-block--xs{padding-top:.25rem;padding-bottom:.25rem}.now-p-block--sm{padding-top:.5rem;padding-bottom:.5rem}.now-p-block--md{padding-top:.75rem;padding-bottom:.75rem}.now-p-block--lg{padding-top:1rem;padding-bottom:1rem}.now-p-block--xl{padding-top:1.5rem;padding-bottom:1.5rem}.now-p-block--xxl{padding-top:2rem;padding-bottom:2rem}.now-p-block--3xl{padding-top:2.5rem;padding-bottom:2.5rem}.now-p-block--0{padding-top:0;padding-bottom:0}.now-p-inline--xxs{padding-right:.125rem;padding-left:.125rem}.now-p-inline--xs{padding-right:.25rem;padding-left:.25rem}.now-p-inline--sm{padding-right:.5rem;padding-left:.5rem}.now-p-inline--md{padding-right:.75rem;padding-left:.75rem}.now-p-inline--lg{padding-right:1rem;padding-left:1rem}.now-p-inline--xl{padding-right:1.5rem;padding-left:1.5rem}.now-p-inline--xxl{padding-right:2rem;padding-left:2rem}.now-p-inline--3xl{padding-right:2.5rem;padding-left:2.5rem}.now-p-inline--0{padding-right:0;padding-left:0}.now-m-block-start--xxs{margin-top:.125rem}.now-m-block-start--xs{margin-top:.25rem}.now-m-block-start--sm{margin-top:.5rem}.now-m-block-start--md{margin-top:.75rem}.now-m-block-start--lg{margin-top:1rem}.now-m-block-start--xl{margin-top:1.5rem}.now-m-block-start--xxl{margin-top:2rem}.now-m-block-start--3xl{margin-top:2.5rem}.now-m-block-start--0{margin-top:0}.now-m-block-end--xxs{margin-bottom:.125rem}.now-m-block-end--xs{margin-bottom:.25rem}.now-m-block-end--sm{margin-bottom:.5rem}.now-m-block-end--md{margin-bottom:.75rem}.now-m-block-end--lg{margin-bottom:1rem}.now-m-block-end--xl{margin-bottom:1.5rem}.now-m-block-end--xxl{margin-bottom:2rem}.now-m-block-end--3xl{margin-bottom:2.5rem}.now-m-block-end--0{margin-bottom:0}.now-m-block--xxs{margin-top:.125rem;margin-bottom:.125rem}.now-m-block--xs{margin-top:.25rem;margin-bottom:.25rem}.now-m-block--sm{margin-top:.5rem;margin-bottom:.5rem}.now-m-block--md{margin-top:.75rem;margin-bottom:.75rem}.now-m-block--lg{margin-top:1rem;margin-bottom:1rem}.now-m-block--xl{margin-top:1.5rem;margin-bottom:1.5rem}.now-m-block--xxl{margin-top:2rem;margin-bottom:2rem}.now-m-block--3xl{margin-top:2.5rem;margin-bottom:2.5rem}.now-m-block--0{margin-top:0;margin-bottom:0}.now-m-inline--xxs{margin-right:.125rem;margin-left:.125rem}.now-m-inline--xs{margin-right:.25rem;margin-left:.25rem}.now-m-inline--sm{margin-right:.5rem;margin-left:.5rem}.now-m-inline--md{margin-right:.75rem;margin-left:.75rem}.now-m-inline--lg{margin-right:1rem;margin-left:1rem}.now-m-inline--xl{margin-right:1.5rem;margin-left:1.5rem}.now-m-inline--xxl{margin-right:2rem;margin-left:2rem}.now-m-inline--3xl{margin-right:2.5rem;margin-left:2.5rem}.now-m-inline--0{margin-right:0;margin-left:0}:host(:not([dir=rtl])) .now-p-inline-end--xxs,:root:not([dir=rtl]) .now-p-inline-end--xxs{padding-right:.125rem}:host([dir=rtl]) .now-p-inline-end--xxs,:root[dir=rtl] .now-p-inline-end--xxs{padding-left:.125rem}:host(:not([dir=rtl])) .now-p-inline-end--xs,:root:not([dir=rtl]) .now-p-inline-end--xs{padding-right:.25rem}:host([dir=rtl]) .now-p-inline-end--xs,:root[dir=rtl] .now-p-inline-end--xs{padding-left:.25rem}:host(:not([dir=rtl])) .now-p-inline-end--sm,:root:not([dir=rtl]) .now-p-inline-end--sm{padding-right:.5rem}:host([dir=rtl]) .now-p-inline-end--sm,:root[dir=rtl] .now-p-inline-end--sm{padding-left:.5rem}:host(:not([dir=rtl])) .now-p-inline-end--md,:root:not([dir=rtl]) .now-p-inline-end--md{padding-right:.75rem}:host([dir=rtl]) .now-p-inline-end--md,:root[dir=rtl] .now-p-inline-end--md{padding-left:.75rem}:host(:not([dir=rtl])) .now-p-inline-end--lg,:root:not([dir=rtl]) .now-p-inline-end--lg{padding-right:1rem}:host([dir=rtl]) .now-p-inline-end--lg,:root[dir=rtl] .now-p-inline-end--lg{padding-left:1rem}:host(:not([dir=rtl])) .now-p-inline-end--xl,:root:not([dir=rtl]) .now-p-inline-end--xl{padding-right:1.5rem}:host([dir=rtl]) .now-p-inline-end--xl,:root[dir=rtl] .now-p-inline-end--xl{padding-left:1.5rem}:host(:not([dir=rtl])) .now-p-inline-end--xxl,:root:not([dir=rtl]) .now-p-inline-end--xxl{padding-right:2rem}:host([dir=rtl]) .now-p-inline-end--xxl,:root[dir=rtl] .now-p-inline-end--xxl{padding-left:2rem}:host(:not([dir=rtl])) .now-p-inline-end--3xl,:root:not([dir=rtl]) .now-p-inline-end--3xl{padding-right:2.5rem}:host([dir=rtl]) .now-p-inline-end--3xl,:root[dir=rtl] .now-p-inline-end--3xl{padding-left:2.5rem}:host(:not([dir=rtl])) .now-p-inline-end--0,:root:not([dir=rtl]) .now-p-inline-end--0{padding-right:0}:host([dir=rtl]) .now-p-inline-end--0,:root[dir=rtl] .now-p-inline-end--0{padding-left:0}:host(:not([dir=rtl])) .now-p-inline-start--xxs,:root:not([dir=rtl]) .now-p-inline-start--xxs{padding-left:.125rem}:host([dir=rtl]) .now-p-inline-start--xxs,:root[dir=rtl] .now-p-inline-start--xxs{padding-right:.125rem}:host(:not([dir=rtl])) .now-p-inline-start--xs,:root:not([dir=rtl]) .now-p-inline-start--xs{padding-left:.25rem}:host([dir=rtl]) .now-p-inline-start--xs,:root[dir=rtl] .now-p-inline-start--xs{padding-right:.25rem}:host(:not([dir=rtl])) .now-p-inline-start--sm,:root:not([dir=rtl]) .now-p-inline-start--sm{padding-left:.5rem}:host([dir=rtl]) .now-p-inline-start--sm,:root[dir=rtl] .now-p-inline-start--sm{padding-right:.5rem}:host(:not([dir=rtl])) .now-p-inline-start--md,:root:not([dir=rtl]) .now-p-inline-start--md{padding-left:.75rem}:host([dir=rtl]) .now-p-inline-start--md,:root[dir=rtl] .now-p-inline-start--md{padding-right:.75rem}:host(:not([dir=rtl])) .now-p-inline-start--lg,:root:not([dir=rtl]) .now-p-inline-start--lg{padding-left:1rem}:host([dir=rtl]) .now-p-inline-start--lg,:root[dir=rtl] .now-p-inline-start--lg{padding-right:1rem}:host(:not([dir=rtl])) .now-p-inline-start--xl,:root:not([dir=rtl]) .now-p-inline-start--xl{padding-left:1.5rem}:host([dir=rtl]) .now-p-inline-start--xl,:root[dir=rtl] .now-p-inline-start--xl{padding-right:1.5rem}:host(:not([dir=rtl])) .now-p-inline-start--xxl,:root:not([dir=rtl]) .now-p-inline-start--xxl{padding-left:2rem}:host([dir=rtl]) .now-p-inline-start--xxl,:root[dir=rtl] .now-p-inline-start--xxl{padding-right:2rem}:host(:not([dir=rtl])) .now-p-inline-start--3xl,:root:not([dir=rtl]) .now-p-inline-start--3xl{padding-left:2.5rem}:host([dir=rtl]) .now-p-inline-start--3xl,:root[dir=rtl] .now-p-inline-start--3xl{padding-right:2.5rem}:host(:not([dir=rtl])) .now-p-inline-start--0,:root:not([dir=rtl]) .now-p-inline-start--0{padding-left:0}:host([dir=rtl]) .now-p-inline-start--0,:root[dir=rtl] .now-p-inline-start--0{padding-right:0}:host(:not([dir=rtl])) .now-m-inline-end--xxs,:root:not([dir=rtl]) .now-m-inline-end--xxs{margin-right:.125rem}:host([dir=rtl]) .now-m-inline-end--xxs,:root[dir=rtl] .now-m-inline-end--xxs{margin-left:.125rem}:host(:not([dir=rtl])) .now-m-inline-end--xs,:root:not([dir=rtl]) .now-m-inline-end--xs{margin-right:.25rem}:host([dir=rtl]) .now-m-inline-end--xs,:root[dir=rtl] .now-m-inline-end--xs{margin-left:.25rem}:host(:not([dir=rtl])) .now-m-inline-end--sm,:root:not([dir=rtl]) .now-m-inline-end--sm{margin-right:.5rem}:host([dir=rtl]) .now-m-inline-end--sm,:root[dir=rtl] .now-m-inline-end--sm{margin-left:.5rem}:host(:not([dir=rtl])) .now-m-inline-end--md,:root:not([dir=rtl]) .now-m-inline-end--md{margin-right:.75rem}:host([dir=rtl]) .now-m-inline-end--md,:root[dir=rtl] .now-m-inline-end--md{margin-left:.75rem}:host(:not([dir=rtl])) .now-m-inline-end--lg,:root:not([dir=rtl]) .now-m-inline-end--lg{margin-right:1rem}:host([dir=rtl]) .now-m-inline-end--lg,:root[dir=rtl] .now-m-inline-end--lg{margin-left:1rem}:host(:not([dir=rtl])) .now-m-inline-end--xl,:root:not([dir=rtl]) .now-m-inline-end--xl{margin-right:1.5rem}:host([dir=rtl]) .now-m-inline-end--xl,:root[dir=rtl] .now-m-inline-end--xl{margin-left:1.5rem}:host(:not([dir=rtl])) .now-m-inline-end--xxl,:root:not([dir=rtl]) .now-m-inline-end--xxl{margin-right:2rem}:host([dir=rtl]) .now-m-inline-end--xxl,:root[dir=rtl] .now-m-inline-end--xxl{margin-left:2rem}:host(:not([dir=rtl])) .now-m-inline-end--3xl,:root:not([dir=rtl]) .now-m-inline-end--3xl{margin-right:2.5rem}:host([dir=rtl]) .now-m-inline-end--3xl,:root[dir=rtl] .now-m-inline-end--3xl{margin-left:2.5rem}:host(:not([dir=rtl])) .now-m-inline-end--0,:root:not([dir=rtl]) .now-m-inline-end--0{margin-right:0}:host([dir=rtl]) .now-m-inline-end--0,:root[dir=rtl] .now-m-inline-end--0{margin-left:0}:host(:not([dir=rtl])) .now-m-inline-start--xxs,:root:not([dir=rtl]) .now-m-inline-start--xxs{margin-left:.125rem}:host([dir=rtl]) .now-m-inline-start--xxs,:root[dir=rtl] .now-m-inline-start--xxs{margin-right:.125rem}:host(:not([dir=rtl])) .now-m-inline-start--xs,:root:not([dir=rtl]) .now-m-inline-start--xs{margin-left:.25rem}:host([dir=rtl]) .now-m-inline-start--xs,:root[dir=rtl] .now-m-inline-start--xs{margin-right:.25rem}:host(:not([dir=rtl])) .now-m-inline-start--sm,:root:not([dir=rtl]) .now-m-inline-start--sm{margin-left:.5rem}:host([dir=rtl]) .now-m-inline-start--sm,:root[dir=rtl] .now-m-inline-start--sm{margin-right:.5rem}:host(:not([dir=rtl])) .now-m-inline-start--md,:root:not([dir=rtl]) .now-m-inline-start--md{margin-left:.75rem}:host([dir=rtl]) .now-m-inline-start--md,:root[dir=rtl] .now-m-inline-start--md{margin-right:.75rem}:host(:not([dir=rtl])) .now-m-inline-start--lg,:root:not([dir=rtl]) .now-m-inline-start--lg{margin-left:1rem}:host([dir=rtl]) .now-m-inline-start--lg,:root[dir=rtl] .now-m-inline-start--lg{margin-right:1rem}:host(:not([dir=rtl])) .now-m-inline-start--xl,:root:not([dir=rtl]) .now-m-inline-start--xl{margin-left:1.5rem}:host([dir=rtl]) .now-m-inline-start--xl,:root[dir=rtl] .now-m-inline-start--xl{margin-right:1.5rem}:host(:not([dir=rtl])) .now-m-inline-start--xxl,:root:not([dir=rtl]) .now-m-inline-start--xxl{margin-left:2rem}:host([dir=rtl]) .now-m-inline-start--xxl,:root[dir=rtl] .now-m-inline-start--xxl{margin-right:2rem}:host(:not([dir=rtl])) .now-m-inline-start--3xl,:root:not([dir=rtl]) .now-m-inline-start--3xl{margin-left:2.5rem}:host([dir=rtl]) .now-m-inline-start--3xl,:root[dir=rtl] .now-m-inline-start--3xl{margin-right:2.5rem}:host(:not([dir=rtl])) .now-m-inline-start--0,:root:not([dir=rtl]) .now-m-inline-start--0{margin-left:0}:host([dir=rtl]) .now-m-inline-start--0,:root[dir=rtl] .now-m-inline-start--0{margin-right:0}.ndw-stacked-panel{background:RGB(var(--now-color--neutral-0,255,255,255));max-width:600px;min-width:260px;height:320px;display:flex;flex-direction:column;overflow:hidden;position:relative;box-shadow:0 2px 4px 0 rgba(0,0,0,.3)}.ndw-stacked-panel-loader{display:flex;justify-content:center;align-items:center;height:100%;width:100%}.ndw-stacked-panel-header{min-height:32px;width:100%;display:flex;align-items:flex-start;flex-shrink:0;padding:0 .5rem;border:1px solid rgb(var(--now-color--neutral-5,172,180,181));border-bottom:none}.ndw-stacked-panel-content{height:100%;overflow-x:auto;overflow-y:hidden;display:flex;background-color:RGB(var(--now-color--neutral-0,255,255,255));color:RGB(var(--now-color--text-primary,22,27,28));font-size:1rem;border-right:1px solid rgb(var(--now-color--neutral-5,172,180,181));border-left:1px solid rgb(var(--now-color--neutral-5,172,180,181))}.ndw-stacked-panel-error-container{height:100%;width:400px;padding:.75rem;text-align:center;display:flex;justify-content:center;align-items:center}.ndw-panel{width:260px;flex-shrink:0;border-right:1px solid rgb(var(--now-color--neutral-3,209,214,214));height:100%;position:relative}.ndw-panel-content{height:100%;overflow-y:auto;flex-grow:1;border:1px solid rgb(var(--now-color--neutral-5,172,180,181));border-left:none}.ndw-panel-content ul{padding:0;margin:0;flex:0 0 auto}.ndw-panel-content-loader,.ndw-panel-content.no-results{display:flex;justify-content:center;align-items:center}.ndw-panel-content-loader{height:100%}.ndw-panel-content-item{display:flex;align-items:center;height:2rem;cursor:pointer;font-size:1rem;line-height:1.25}.ndw-panel-content-item.secondary-value{height:2.5rem}:host(:not([dir=rtl])) .ndw-panel-content-item,:root:not([dir=rtl]) .ndw-panel-content-item{padding-left:1rem}:host([dir=rtl]) .ndw-panel-content-item,:root[dir=rtl] .ndw-panel-content-item{padding-right:1rem}:host(:not([dir=rtl])) .ndw-panel-content-item,:root:not([dir=rtl]) .ndw-panel-content-item{padding-right:.5rem}:host([dir=rtl]) .ndw-panel-content-item,:root[dir=rtl] .ndw-panel-content-item{padding-left:.5rem}.ndw-panel-content-item-icon{color:RGB(var(--now-color--primary-1,30,133,109));margin:0 .125rem;flex:0 0 auto}.ndw-panel-content-item-label{cursor:pointer;flex-grow:1;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ndw-panel-content-item-leading-image{height:24px;width:24px;border-radius:24px;background-position:50%;background-size:cover;background-color:RGB(var(--now-color--neutral-3,209,214,214))}:host(:not([dir=rtl])) .ndw-panel-content-item-leading-image,:root:not([dir=rtl]) .ndw-panel-content-item-leading-image{margin-right:.5rem}:host([dir=rtl]) .ndw-panel-content-item-leading-image,:root[dir=rtl] .ndw-panel-content-item-leading-image{margin-left:.5rem}.ndw-panel-content-item-secondary-value,.ndw-panel-content-item-secondary-value-image{font-size:.75rem;color:RGB(var(--now-color--text-secondary,66,80,81))}.ndw-panel-content-item-secondary-value-image{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;max-width:175px}.ndw-panel-content-item.is-active,.ndw-panel-content-item:hover{background-color:RGB(var(--now-color--secondary-0,217,235,238));color:RGB(var(--now-color--text-primary,22,27,28));outline:none}.ndw-panel-content-item.is-selected{background-color:RGBA(var(--now-color--secondary-1,1,119,142),.35);cursor:pointer;outline:none}.ndw-panel-content-item.is-selected .ndw-panel-content-item-icon{color:RGB(RGBA(var(--now-color--text-primary,22,27,28),.45))}.ndw-panel-content-item.is-disabled{color:RGB(var(--now-color--text-tertiary,99,114,116));cursor:default}.ndw-panel-content-item.is-disabled.is-active,.ndw-panel-content-item.is-disabled:hover{background-color:transparent}.ndw-panel-content-item.is-disabled .ndw-panel-content-item-label{cursor:default}:host{line-height:1.25;font-family:var(--now-font-family,\\\"Source Sans Pro\\\",\\\"Helvetica Neue\\\",helvetica,arial,sans-serif)}:host([hidden]){display:none}*,:after,:before{box-sizing:border-box}.aria-sr{position:absolute;overflow:hidden;width:1px;height:auto;margin:0;border:none;padding:0;white-space:nowrap;clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%)}\", \"\"]);\n\n// exports\n","import { Fragment } from '@servicenow/ui-renderer-snabbdom';\nimport AriaLiveRegion from '../common/AriaLiveRegion';\nimport StackedPanel from './components/panel/StackedPanel';\n\nexport default (\n    {\n        activePanelIndex,\n        ariaLiveMessage,\n        panels,\n        properties: { dir, leafPathSource, metadata, dotWalkPath },\n        error,\n        searchTerm,\n    },\n    { dispatch }\n) => {\n    const isLoading =\n        (!dotWalkPath && !metadata && !leafPathSource) ||\n        !metadata ||\n        Object.keys(metadata).length === 0;\n    return (\n        <Fragment>\n            <StackedPanel\n                activePanelIndex={activePanelIndex}\n                dispatch={dispatch}\n                dir={dir}\n                leafPathSource={leafPathSource}\n                path={dotWalkPath}\n                error={error}\n                loading={isLoading}\n                panels={panels}\n                searchTerm={searchTerm}\n            ></StackedPanel>\n            <AriaLiveRegion message={ariaLiveMessage}></AriaLiveRegion>\n        </Fragment>\n    );\n};\n","import '@servicenow/ui-renderer-snabbdom';\n\n/**\n * Aria live function for notifying users of component changes via screenreader\n * @param {string} message - Aria live message to be read by screenreader\n */\nconst AriaLiveRegion = ({ message }) => (\n    <div className=\"aria-sr\" role=\"region\" id=\"aria-region\" aria-live=\"polite\">\n        {message}\n    </div>\n);\n\nexport default AriaLiveRegion;\n","import '@servicenow/now-loader';\nimport * as Renderer from '@servicenow/ui-renderer-snabbdom';\nimport { t } from 'sn-translate';\nimport {\n    SEARCH_ESCAPE_PRESSED,\n    SEARCH_INPUT_BLURRED,\n    SEARCH_INPUT_FOCUSED,\n    SEARCH_INPUT_VALUE_CHANGED,\n    SEARCH_RIGHT_ARROW_PRESSED,\n} from '../../actions';\nimport { Breadcrumb } from '../breadcrumb';\nimport Input from '../input';\nimport NoResultsPanel from './NoResultsPanel';\nimport Panel from './Panel';\n\nconst { createRef } = Renderer;\n\n/**\n * Get panel items from metadata\n * @param {{[key: string]: {}}} fields - Fields related to a specific metadata entry\n * @param {{[key: string]: {}}} computedFields - Computed or filtered fields\n * @param {string} selectedItem - The panel's selected item\n */\nconst getPanelItems = (fields, computedFields, selectedItem) => {\n    let panelItems = Object.keys(computedFields || fields);\n    let prefixPanelItem;\n\n    if (computedFields && selectedItem) {\n        const fieldValues = fields[selectedItem];\n        prefixPanelItem = {\n            name: selectedItem,\n            ...fieldValues,\n        };\n\n        panelItems = panelItems.filter(key => key !== selectedItem);\n    }\n\n    panelItems = panelItems\n        .map(f => {\n            const fieldValues = fields[f];\n            return {\n                name: f,\n                ...fieldValues,\n            };\n        })\n        .sort((a, b) => a.displayValue - b.displayValue);\n\n    return prefixPanelItem ? [prefixPanelItem, ...panelItems] : panelItems;\n};\n\n/**\n * Scrolls to the end of the stacked panel if conditions are met\n * @param {Object} event DOM event\n * @param {Object[]} panels - Panel values to be mapped to list items\n * @param {number} activePanelIndex - Active panel index\n * @param {string} panelIndex - Panel index of the inserted element\n * @param {string} dir - The directionality of the text of the document\n * */\nconst conditionallyScrollToEnd = (\n    { elm },\n    panels,\n    activePanelIndex,\n    panelIndex,\n    dir\n) => {\n    if (\n        panelIndex === activePanelIndex &&\n        activePanelIndex === panels.length - 1\n    ) {\n        // eslint-disable-next-line no-param-reassign\n        elm.parentElement.scrollLeft =\n            dir === 'ltr' ? elm.parentElement.scrollWidth : 0;\n    }\n};\n\n/**\n * Render function for breadcrumbs\n * @param {Object[]} path Dispatch function to update app state\n * @param {string} error - Error message to be displayed\n * @param {() => void} breadcrumbItemClickHandler - Function to be called on breadcrumb item click\n * @param {string} leafPathSource - Source for the leaf panel fields\n * @param {string} dir - The directionality of the text of the document\n * */\nconst conditionallyRenderBreadcrumbs = (\n    path,\n    error,\n    breadcrumbItemClickHandler,\n    leafPathSource,\n    dir\n) => {\n    const shouldRender =\n        path &&\n        (path.length > 1 || (path.length > 0 && !!leafPathSource)) &&\n        !error;\n\n    if (!shouldRender) return null;\n    return (\n        <Breadcrumb\n            path={path}\n            onItemClick={breadcrumbItemClickHandler}\n            leafPathSource={leafPathSource}\n            dir={dir}\n        />\n    );\n};\n\n/**\n * Render function for panels related to each path item\n * @param {(type: string, payload: {}) => void)} dispatch Dispatch function to update app state\n * @param {Object[]} panels - Value to be mapped to list items\n * @param {number} activePanelIndex - Index of the dot walk component's active panel\n * @param {string} error - Error message to be displayed\n * @param {number} searchTerm - Value of the search input\n * @param {string} dir - The directionality of the text of the document\n * */\nconst conditionallyRenderPanels = (\n    dispatch,\n    panels,\n    activePanelIndex,\n    error,\n    searchTerm,\n    dir\n) => {\n    if (error) {\n        return (\n            <div className=\"ndw-stacked-panel-error-container\">\n                <span>{error}</span>\n            </div>\n        );\n    }\n\n    return panels.map((p, i) => {\n        const {\n            activeIndex,\n            computedFields,\n            fields,\n            id,\n            selectedItem,\n            source,\n            loading,\n        } = p;\n\n        const items = getPanelItems(fields, computedFields, selectedItem);\n        const showNoResults =\n            searchTerm && (!items || (items && items.length === 0));\n\n        return (\n            <div\n                hook-insert={v =>\n                    conditionallyScrollToEnd(\n                        v,\n                        panels,\n                        activePanelIndex,\n                        i,\n                        dir\n                    )\n                }\n            >\n                {showNoResults ? (\n                    <NoResultsPanel />\n                ) : (\n                    <Panel\n                        activeIndex={activeIndex}\n                        dir={dir}\n                        dispatch={dispatch}\n                        loading={loading}\n                        items={items}\n                        key={id}\n                        active={activePanelIndex === i}\n                        panelId={id}\n                        panelIndex={i}\n                        selectedItem={selectedItem}\n                        source={source}\n                    />\n                )}\n            </div>\n        );\n    });\n};\n\n/**\n * Handle input's text change event\n * @param {(type: string, payload: {}) => void)} dispatch - Dispatch function to update app state\n */\nconst handleInputChange = dispatch => text => {\n    dispatch(SEARCH_INPUT_VALUE_CHANGED, {\n        searchTerm: text,\n    });\n};\n\n/**\n * Handle input's right arrow pressed event\n * @param {(type: string, payload: {}) => void)} dispatch - Dispatch function to update app state\n */\nconst handleRightArrowPress = dispatch => () => {\n    dispatch(SEARCH_RIGHT_ARROW_PRESSED);\n};\n\n/**\n * Handle input's blur event\n * @param {(type: string, payload: {}) => void)} dispatch - Dispatch function to update app state\n */\nconst handleInputBlur = dispatch => () => {\n    dispatch(SEARCH_INPUT_BLURRED);\n};\n\n/**\n * Handle input's focus event\n * @param {(type: string, payload: {}) => void)} dispatch - Dispatch function to update app state\n */\nconst handleInputFocus = dispatch => () => {\n    dispatch(SEARCH_INPUT_FOCUSED);\n};\n\n/**\n * Handle input's escape pressed event\n * @param {(type: string, payload: {}) => void)} dispatch - Dispatch function to update app state\n */\nconst handleEscapePress = dispatch => () => {\n    dispatch(SEARCH_ESCAPE_PRESSED);\n};\n\nconst handleBreadCrumbItemClickHandler = stackedPanelContentRef => () => {\n    // eslint-disable-next-line no-param-reassign\n    stackedPanelContentRef.scrollLeft = 0;\n};\n\n// This allows for tabbing through elements\n// and returning back to normal navigation after action is dispatched\nconst focusInputElement = ({ elm }) => {\n    const inputElm = elm.querySelector('input');\n    // if (inputElm) inputElm.focus();\n};\n\n/**\n * Component containing horizontally stacked panels\n * @param {Object} props - Component props\n * @param {number} props.activePanelIndex - Index of the currently active panel\n * @param {string} props.dir - The directionality of the text of the document\n * @param {{}[]} props.path - Path value used to render panels\n * @param {string} props.leafPathSource - Source name of the leaf panel\n * @param {(type: string, payload: {}) => void)} props.dispatch Dispatch function to update app state\n * @param {boolean} props.loading - Loading state for entire stacked panel\n * @param {Object[]} props.panels - Array of panels to be rendered\n * @param {string} props.error - Error message to be displayed\n * @param {string} props.searchTerm - Search input value\n */\nconst StackedPanel = ({\n    activePanelIndex,\n    dir,\n    dispatch,\n    error,\n    leafPathSource,\n    loading,\n    panels,\n    path,\n    searchTerm,\n}) => {\n    if (loading)\n        return (\n            <div className=\"ndw-stacked-panel\">\n                <div className=\"ndw-stacked-panel-loader\">\n                    <now-loader />\n                </div>\n            </div>\n        );\n\n    const inputRef = createRef();\n    const stackedPanelContentRef = createRef();\n\n    return (\n        <div className=\"ndw-stacked-panel\">\n            <div\n                className=\"ndw-stacked-panel-header\"\n                hook-update={focusInputElement}\n            >\n                <Input\n                    ariaLabel={t('Search field')}\n                    disabled={loading}\n                    ref={inputRef}\n                    handleInputChange={handleInputChange(dispatch)}\n                    handleRightArrowPress={handleRightArrowPress(dispatch)}\n                    handleRightArrowPress={handleRightArrowPress(dispatch)}\n                    handleEscapePress={handleEscapePress(dispatch)}\n                    onBlur={handleInputBlur(dispatch)}\n                    onFocus={handleInputFocus(dispatch)}\n                    placeholder={t('Search')}\n                    value={searchTerm}\n                />\n                {conditionallyRenderBreadcrumbs(\n                    path || [],\n                    error,\n                    handleBreadCrumbItemClickHandler(stackedPanelContentRef),\n                    leafPathSource,\n                    dir\n                )}\n            </div>\n            <div\n                className=\"ndw-stacked-panel-content\"\n                ref={stackedPanelContentRef}\n            >\n                {conditionallyRenderPanels(\n                    dispatch,\n                    panels,\n                    activePanelIndex,\n                    error,\n                    searchTerm,\n                    dir\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default StackedPanel;\n","import Breadcrumb from './Breadcrumb';\n\n// eslint-disable-next-line import/prefer-default-export\nexport { Breadcrumb };\n","import '@servicenow/ui-renderer-snabbdom';\nimport '@servicenow/now-button';\nimport '@servicenow/now-icon';\nimport { t } from 'sn-translate';\nimport BreadcrumbItem from './BreadcrumbItem';\nimport BreadcrumbSeparator from './BreadcrumbSeparator';\n\n/**\n * Render function for items in a breadcrumb navigation list\n * @param {{}[]} path - Dot walk path to be displayed by breadcrumb\n * @param {string} leafPathSource - Source for the leaf panel fields\n * @param {string} dir - The directionality of the text of the document\n */\nconst renderBreadcrumbItems = (path, leafPathSource, dir) => {\n    const breadCrumbs = [];\n    const panelName = `${path[path.length - 1].displayValue}`;\n    const separatorLabel = t('Breadcrumb. Close {0} panel', panelName);\n\n    path.forEach((pathItem, i) => {\n        if (pathItem) {\n            const { field, displayValue } = pathItem;\n            breadCrumbs.push(\n                <BreadcrumbItem\n                    key={`${field}-${i}`}\n                    testKey={field}\n                    label={displayValue}\n                />\n            );\n        }\n\n        const lastIndex = path.length - 1;\n        if (i !== lastIndex) {\n            breadCrumbs.push(\n                <BreadcrumbSeparator\n                    ariaLabel={separatorLabel}\n                    itemIndex={i}\n                    dir={dir}\n                />\n            );\n        }\n    });\n\n    if (leafPathSource) {\n        breadCrumbs.push(\n            <BreadcrumbSeparator\n                ariaLabel={separatorLabel}\n                itemIndex={path.length}\n                dir={dir}\n            />,\n            <BreadcrumbItem\n                testKey={leafPathSource}\n                key={`leafPathSource-${leafPathSource}`}\n                label={t('{0} fields', panelName)}\n            />\n        );\n    }\n\n    return breadCrumbs;\n};\n/**\n * Component containing breadcrumb links used to update path\n * @param {Object} props - Component props\n * @param {string} props.dir - The directionality of the text of the document\n * @param {string} props.leafPathSource - Source for the leaf panel fields\n * @param {{}[]} props.path - Dot walk path to be displayed by breadcrumb\n */\nconst Breadcrumb = ({ dir, leafPathSource, path }) => {\n    if (!path) return <div />;\n\n    return (\n        <nav className=\"ndw-breadcrumb\" aria-label=\"breadcrumb\">\n            <ol>{renderBreadcrumbItems(path, leafPathSource, dir)}</ol>\n        </nav>\n    );\n};\n\nexport default Breadcrumb;\n","import '@servicenow/ui-renderer-snabbdom';\nimport '@servicenow/now-button';\n\n/**\n * Component used as Breadcrumb item\n * @param {Object} props - Component props\n * @param {string} props.className - Component class name\n * @param {string} props.testKey - Breadcrumb test key\n * @param {string} props.label - Label to be used for the item's pill\n */\nconst BreadcrumbItem = ({ testKey, label, className }) => (\n    <li className={className}>\n        <span className={`ndw-breadcrumb-item-text breadcrumbItem-${testKey}`}>\n            {label}\n        </span>\n    </li>\n);\nexport default BreadcrumbItem;\n","import '@servicenow/ui-renderer-snabbdom';\nimport '@servicenow/now-button';\nimport { t } from 'sn-translate';\nimport { actionTypes } from '../../actions';\n\n/**\n * Component used as a separator of breadcrumb items\n * @param {Object} props - Component props\n * @param {string} props.ariaLabel - Aria label used for accessibility requirements\n * @param {string} props.dir - The directionality of the text of the document\n * @param {number} props.itemIndex - Index of the breadcrumb item in the breadcrumb group\n */\nconst BreadcrumbSeparator = ({ ariaLabel, dir, itemIndex }) => {\n    return (\n        <li>\n            <now-button-iconic\n                className={`breadcrumbButton-${itemIndex}`}\n                config-aria={{ 'aria-label': ariaLabel }}\n                bare\n                icon={dir === 'ltr' ? 'arrow-right-fill' : 'arrow-left-fill'}\n                size=\"sm\"\n                tooltip-content={t('Remove breadcrumb')}\n                variant=\"tertiary\"\n                append-to-payload={{\n                    index: itemIndex,\n                    type: actionTypes.BREADCRUMB_SEPARATOR_BUTTON_CLICKED,\n                }}\n            ></now-button-iconic>\n        </li>\n    );\n};\n\nexport default BreadcrumbSeparator;\n","import Input from './Input';\n\nexport default Input;\n","import '@servicenow/now-icon';\nimport '@servicenow/ui-renderer-snabbdom';\nimport { t } from 'sn-translate';\n\nconst noop = () => null;\n\nconst keyCodes = {\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ARROW_RIGHT: 39,\n    ARROW_UP: 38,\n    ESCAPE: 27,\n    ENTER: 13,\n};\n\n/**\n * Responds to input change\n * @param {(event: any, data: {elm: {value: string}}) => void} handlers - Map of functions used to handle input change\n * @param {(text: string) => void} handlers.handleInputChange - Function used to handle input change\n * @param {() => void} handlers.handleEnterPress - Function used to handle enter event\n * @param {() => void} handlers.handleEscapePress - Function used to handle escape event\n * @param {() => void} handlers.handleUpArrowPress - Function used to handle up arrow event\n * @param {() => void} handlers.handleRightArrowPress - Function used to handle right arrow event\n * @param {() => void} handlers.handleDownArrowPress - Function used to handle down arrow event\n * @param {() => void} handlers.handleLeftArrowPress - Function used to handle left arrow event\n */\nconst transformInputChangeHandler = ({\n    handleInputChange = noop,\n    handleEnterPress = noop,\n    handleEscapePress = noop,\n    handleUpArrowPress = noop,\n    handleRightArrowPress = noop,\n    handleDownArrowPress = noop,\n    handleLeftArrowPress = noop,\n}) => (e, { elm: { value } }) => {\n    const { keyCode } = e;\n    switch (keyCode) {\n        case keyCodes.ARROW_DOWN:\n            handleDownArrowPress();\n            break;\n        case keyCodes.ARROW_LEFT:\n            handleLeftArrowPress();\n            break;\n        case keyCodes.ARROW_RIGHT:\n            handleRightArrowPress();\n            break;\n        case keyCodes.ARROW_UP:\n            handleUpArrowPress();\n            break;\n        case keyCodes.ESCAPE:\n            handleEscapePress();\n            break;\n        case keyCodes.ENTER:\n            handleEnterPress();\n            break;\n        default:\n            handleInputChange(value);\n    }\n};\n\nconst handleKeyDown = e => {\n    const ignoredKeys = [\n        keyCodes.ARROW_DOWN,\n        keyCodes.ARROW_UP,\n        keyCodes.ARROW_LEFT,\n        keyCodes.ARROW_RIGHT,\n    ];\n    const isIgnored = ignoredKeys.indexOf(e.keyCode) !== -1;\n\n    if (isIgnored) e.preventDefault();\n};\n\n// TODO: update icon on input change, dispatch action on focus\n\n/**\n * Input component for panel search\n * @param {Object} props - Component props\n * @param {string} props.ariaLabel - Aria label used for accessibility requirements\n * @param {string} props.className - Class name to be added to the wrapper component\n * @param {(text: string) => void} props.handleInputChange - Function used to handle input change\n * @param {() => void} props.disabled - Determines whether the input is disabled or not\n * @param {() => void} props.handleEnterPress - Function used to handle enter event\n * @param {() => void} props.handleEscapePress - Function used to handle escape event\n * @param {() => void} props.handleUpArrowPress - Function used to handle up arrow event\n * @param {() => void} props.handleRightArrowPress - Function used to handle right arrow event\n * @param {() => void} props.handleDownArrowPress - Function used to handle down arrow event\n * @param {() => void} props.handleLeftArrowPress - Function used to handle left arrow event\n * @param {() => void} props.onBlur - Function used to handle input blur event\n * @param {() => void} props.onFocus - Function used to handle input focus event\n * @param {string} props.placeholder - Placeholder text\n * @param {(ref: any) => void} props.ref - Function used to receive a reference to the input\n * @param {string} props.value - Controlled value of the input\n */\nconst Input = ({\n    ariaLabel,\n    className,\n    disabled,\n    handleInputChange,\n    handleEnterPress,\n    handleEscapePress,\n    handleUpArrowPress,\n    handleRightArrowPress,\n    handleDownArrowPress,\n    handleLeftArrowPress,\n    onBlur,\n    onFocus,\n    placeholder,\n    ref,\n    value,\n}) => {\n    const wrapperClassName = `ndw-search-input-wrapper${\n        className ? ` ${className}` : ''\n    }`;\n\n    return (\n        <div className={wrapperClassName} role=\"search\">\n            <now-icon\n                className=\"ndw-search-input-icon\"\n                icon=\"magnifying-glass-outline\"\n                size=\"sm\"\n            ></now-icon>\n            <input\n                aria-label={ariaLabel}\n                aria-describedby=\"aria-region\"\n                autoComplete=\"off\"\n                ref={ref}\n                className=\"ndw-input\"\n                placeholder={placeholder && t('{0}', placeholder)}\n                type=\"text\"\n                disabled={disabled}\n                on-focus={onFocus}\n                on-blur={onBlur}\n                on-keyup={transformInputChangeHandler({\n                    handleInputChange,\n                    handleEnterPress,\n                    handleEscapePress,\n                    handleUpArrowPress,\n                    handleRightArrowPress,\n                    handleDownArrowPress,\n                    handleLeftArrowPress,\n                })}\n                on-keydown={handleKeyDown}\n                value={value}\n            />\n        </div>\n    );\n};\n\nexport default Input;\n","import '@servicenow/now-icon';\n\n/**\n * NoResultsPanel component\n */\nconst NoResultsPanel = () => {\n    return (\n        <div className=\"ndw-panel\">\n            <div className=\"ndw-panel-content no-results\">No results</div>\n        </div>\n    );\n};\n\nexport default NoResultsPanel;\n","import '@servicenow/now-icon';\nimport '@servicenow/now-loader';\nimport { t } from 'sn-translate';\nimport PanelItem from './PanelItem';\n\n/**\n * Render function for list items inside of a Panel\n * @param {string} ariaLabel - Aria label used for accessibility requirements\n * @param {(type: string, payload: {}) => void)} dispatch - Dispatch function to update app state\n * @param {[{name: string, displayValue: string, isReference: boolean}]]} items - Value to be mapped to list items\n * @param {string} selectedItem - Name of the list item to receive active state classes\n * @param {string} activeIndex - Index of the panel item that has an active state\n * @param {string} active - Represents whether or not the panel is active\n * @param {boolean} panelId - Id of the panel\n * @param {boolean} panelIndex - Index of the panel in the group\n * @param {string} props.source - Name of the source metadata of this Panel\n * @param {string} dir - The directionality of the text of the document\n */\nconst renderPanelItems = (\n    dispatch,\n    items,\n    selectedItem,\n    activeIndex,\n    active,\n    panelId,\n    panelIndex,\n    source,\n    dir\n) =>\n    items.map(\n        (\n            {\n                disabled,\n                displayValue,\n                secondaryValue,\n                hidden,\n                hintText,\n                isReference,\n                leadingImageSrc,\n                name,\n            },\n            i\n        ) => (\n            <PanelItem\n                active={active && i === activeIndex}\n                ariaLabel={t('Expand reference fields for {0} field', name)}\n                dir={dir}\n                disabled={disabled}\n                dispatch={dispatch}\n                displayValue={displayValue}\n                secondaryValue={secondaryValue}\n                fieldName={name}\n                hidden={hidden}\n                hintText={hintText}\n                isReference={isReference}\n                key={name}\n                leadingImageSrc={leadingImageSrc}\n                panelIndex={panelIndex}\n                selected={name === selectedItem}\n                source={source}\n            />\n        )\n    );\n\n/**\n * Panel components\n * @param {{}} props - Component props\n * @param {(type: string, payload: {}) => void)} props.dispatch Dispatch function to update app state\n * @param {string} props.dir - The directionality of the text of the document\n * @param {[{name: string, displayValue: string, isReference: boolean}]} props.items - Value to be mapped to list items\n * @param {string} props.panelId - Id of the component\n * @param {string} props.loading - Loading state of the component\n * @param {string} props.selectedItem - Name of the list item to receive active state classes\n * @param {boolean} props.active - Indicates whether the panel is active\n * @param {boolean} props.panelIndex - Index of the panel in the group\n * @param {boolean} props.activeIndex - Index of the active panel item\n * @param {string} props.source - Name of the source metadata of this Panel\n */\nconst Panel = ({\n    dispatch: d,\n    dir,\n    loading,\n    active,\n    panelId,\n    panelIndex,\n    items,\n    selectedItem,\n    activeIndex,\n    source,\n}) => {\n    return (\n        <div className={`ndw-panel panel-${panelIndex}`}>\n            <div className=\"ndw-panel-content\">\n                {loading ? (\n                    <div className=\"ndw-panel-content-loader\">\n                        <now-loader />\n                    </div>\n                ) : (\n                    <ul>\n                        {renderPanelItems(\n                            d,\n                            items,\n                            selectedItem,\n                            activeIndex,\n                            active,\n                            panelId,\n                            panelIndex,\n                            source,\n                            dir\n                        )}\n                    </ul>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Panel;\n","import '@servicenow/now-button';\nimport { t } from 'sn-translate';\nimport { actionTypes, PANEL_ITEM_CLICKED } from '../../actions';\n\n/**\n * Construct class name based on component state\n * @param {boolean} selected - Represents whether or not the item is selected\n * @param {boolean} active - Represents whether or not the item is active\n * @param {boolean} disabled - Represents whether or not the item is disabled\n * @param {string} panelIndex - Represents the index of the panel from the StackedPanel\n * @param {string} fieldName - Represents the name of the field this panel represents\n * @param {string} secondaryValue - Represents the optional secondary value derived from the transformMetaData function\n */\nconst getClassName = (\n    selected,\n    active,\n    disabled,\n    panelIndex,\n    fieldName,\n    secondaryValue\n) => {\n    const baseClassName = `ndw-panel-content-item`;\n    const selectedClassName = selected && !disabled ? ' is-selected' : '';\n    const activeClassName = active && !disabled ? ' is-active' : '';\n    const disabledClassName = disabled ? ' is-disabled' : '';\n    const testIdClassName = ` panel-${panelIndex}-panelItem-${fieldName}`;\n    const secondaryValueClassName = secondaryValue ? ` secondary-value` : '';\n\n    return `${baseClassName}${selectedClassName}${disabledClassName}${activeClassName}${testIdClassName}${secondaryValueClassName}`;\n};\n\nconst getSecondaryLabelClassName = leadingImageSrc => {\n    return leadingImageSrc\n        ? 'ndw-panel-content-item-secondary-value-image'\n        : 'ndw-panel-content-item-secondary-value';\n};\n\n/**\n * Handles item click\n * @param {(type: string, payload: {}) => void)} dispatch - Dispatch function to update app state\n * @param {string} displayValue - Display value of the panel item\n * @param {string} field - Name of the PanelItems field\n * @param {string} panelIndex - Index of the panel this item belongs to\n * @param {string} source - Source of the panel this item belongs to\n * @param {string} disabled - Indicates whether the item is disabled or not\n */\nconst handleItemClick = (\n    dispatch,\n    displayValue,\n    field,\n    panelIndex,\n    source,\n    disabled\n) => () => {\n    if (disabled) return;\n\n    dispatch(PANEL_ITEM_CLICKED, {\n        displayValue,\n        field,\n        panelIndex,\n        source,\n    });\n};\n\nconst handleIconVersion = (selected, disabled, dir) => {\n    const chevronFill = selected && !disabled ? 'fill' : 'outline';\n    const chevronDirection = dir === 'ltr' ? 'right' : 'left';\n    const iconVersion = `circle-chevron-${chevronDirection}-${chevronFill}`;\n\n    return iconVersion;\n};\n\nconst scrollIntoViewIfNeeded = active => ({ elm }) => {\n    if (!active) return;\n\n    if (elm.scrollIntoViewIfNeeded) {\n        elm.scrollIntoViewIfNeeded(false);\n        return;\n    }\n    elm.scrollIntoView(false);\n};\n\nconst getDotWalkButtonClassName = (panelIndex, fieldName) =>\n    `ndw-panel-content-item-icon panel-${panelIndex}-panelItem-${fieldName}-dotWalkButton`;\n\n/**\n * Item rendered inside a panel\n * @param {Object} props - Component props\n * @param {boolean} props.active - Indicated whether or not the item is active\n * @param {string} props.ariaLabel - Aria label used for accessibility requirements\n * @param {string} props.dir - The directionality of the text of the document\n * @param {string} props.disabled - Indicated whether or not the item is disabled\n * @param {(type: string, payload: {}) => void)} props.dispatch Dispatch function to update app state\n * @param {string} props.displayValue - Display value of the panel item\n * @param {string} props.fieldName - Name of the field this panelItem references\n * @param {string} props.hidden - Indicates whether or not the panel item should be displayed\n * @param {string} props.hintText - Text to be displayed in the title attribute of the panel text\n * @param {boolean} props.isReference - Indicates whether or not the item has references\n * @param {boolean} props.leadingImageSrc - Source of the image used in the panel item\n * @param {boolean} props.selected - Indicates whether or not the item is selected\n * @param {boolean} props.panelIndex - Index of the panel items' parent in the group\n * @param {string} props.source - Name of the source metadata of this PanelItem\n */\nconst PanelItem = ({\n    active,\n    ariaLabel,\n    dir,\n    disabled,\n    dispatch,\n    displayValue,\n    secondaryValue,\n    fieldName,\n    hidden,\n    hintText,\n    isReference,\n    leadingImageSrc,\n    panelIndex,\n    selected,\n    source,\n}) =>\n    hidden ? null : (\n        <li\n            aria-label={`${fieldName}, ${source}`}\n            className={getClassName(\n                selected,\n                active,\n                disabled,\n                panelIndex,\n                fieldName,\n                secondaryValue\n            )}\n            on-click={handleItemClick(\n                dispatch,\n                displayValue,\n                fieldName,\n                panelIndex,\n                source,\n                disabled\n            )}\n            hook-update={scrollIntoViewIfNeeded(active)}\n        >\n            {leadingImageSrc && (\n                <div\n                    className=\"ndw-panel-content-item-leading-image\"\n                    style={{\n                        backgroundImage: `url(${leadingImageSrc})`,\n                    }}\n                />\n            )}\n            <span\n                className=\"ndw-panel-content-item-label\"\n                title={t('{0}', hintText) || displayValue}\n            >\n                {displayValue}\n                {secondaryValue ? (\n                    <div\n                        className={getSecondaryLabelClassName(leadingImageSrc)}\n                    >\n                        {secondaryValue}\n                    </div>\n                ) : null}\n            </span>\n            {isReference ? (\n                <now-button-iconic\n                    className={getDotWalkButtonClassName(panelIndex, fieldName)}\n                    config-aria={{ 'aria-label': ariaLabel }}\n                    on-click={e => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                    }}\n                    append-to-payload={{\n                        source,\n                        fieldName,\n                        panelIndex,\n                        displayValue,\n                        type: actionTypes.DOTWALK_TRIGGER_BUTTON,\n                    }}\n                    bare={!selected || !!disabled}\n                    hide-padding\n                    high-contrast\n                    icon={handleIconVersion(selected, disabled, dir)}\n                    size=\"sm\"\n                    tooltip-content={t('Expand')}\n                    variant=\"primary\"\n                />\n            ) : null}\n        </li>\n    );\n\nexport default PanelItem;\n","import { breadcrumbTrimmedHandler } from './breadcrumbHandlers';\nimport {\n    ariaLiveMessageHandler,\n    buttonIconicClickHandler,\n    componentErrorHandler,\n    componentPropertyChangedHandler,\n} from './globalHandlers';\nimport {\n    panelItemButtonClickHandler,\n    panelItemClickHandler,\n} from './panelHandlers';\nimport {\n    arrowDownHandler,\n    arrowUpHandler,\n    enterPressedHandler,\n    searchInputBlurredHandler,\n    searchInputFocusedHandler,\n    searchTermUpdatedHandler,\n} from './searchInputHandlers';\n\nexport {\n    ariaLiveMessageHandler,\n    arrowDownHandler,\n    arrowUpHandler,\n    breadcrumbTrimmedHandler,\n    buttonIconicClickHandler,\n    componentPropertyChangedHandler,\n    componentErrorHandler,\n    enterPressedHandler,\n    panelItemButtonClickHandler,\n    panelItemClickHandler,\n    searchInputBlurredHandler,\n    searchInputFocusedHandler,\n    searchTermUpdatedHandler,\n};\n","import { t } from 'sn-translate';\nimport { breadcrumbTrimmedHandler } from './breadcrumbHandlers';\nimport { actionTypes } from '../actions';\nimport { getPanels } from './util';\nimport { panelItemButtonClickHandler } from './panelHandlers';\n\nconst ariaLiveMessageHandler = ({\n    action: {\n        payload: { message },\n    },\n    updateState,\n}) => {\n    updateState({\n        ariaLiveMessage: message,\n    });\n};\n\nconst buttonIconicClickHandler = coeffects => {\n    const {\n        action: { payload },\n    } = coeffects;\n\n    switch (payload.type) {\n        case actionTypes.BREADCRUMB_SEPARATOR_BUTTON_CLICKED:\n            breadcrumbTrimmedHandler(coeffects);\n            break;\n        case actionTypes.DOTWALK_TRIGGER_BUTTON:\n            panelItemButtonClickHandler(coeffects);\n            break;\n        default:\n            break;\n    }\n};\n\nconst componentPropertyChangedHandler = ({\n    properties: { metadata, dotWalkPath, leafPathSource, error },\n    updateState,\n}) => {\n    if (error) {\n        updateState({ error });\n        return;\n    }\n\n    const panels = getPanels(metadata, dotWalkPath, leafPathSource);\n    updateState({\n        activePanelIndex: panels.length - 1,\n        error: null,\n        panels,\n        searchTerm: null,\n    });\n};\n\nconst componentErrorHandler = ({ updateState }) => {\n    updateState({\n        error: t('Error occurred. Please contact your System Administrator'),\n    });\n};\n\nexport {\n    ariaLiveMessageHandler,\n    buttonIconicClickHandler,\n    componentPropertyChangedHandler,\n    componentErrorHandler,\n    getPanels,\n};\n","const createPath = (displayValue, field, source) => ({\n    displayValue,\n    field,\n    parent: source,\n});\n\nexport default createPath;\n","import cuid from 'cuid';\nimport createPanelModel from './createPanelModel';\n\nconst getPanels = (metadata, path, leafPathSource) => {\n    if (!metadata) return [];\n\n    let panels = [];\n    const currentPath = [];\n    if (path && path.length > 0) {\n        panels = path.map(({ field, parent }, i) => {\n            const newPanel = createPanelModel({\n                id: cuid(),\n                fields: metadata[parent] || {},\n                source: parent,\n                selectedItem: field,\n                panelIndex: i,\n            });\n            if (field) currentPath.push(field);\n            return newPanel;\n        });\n    }\n\n    if (leafPathSource) {\n        const fields = metadata[leafPathSource];\n        const leafPanel = createPanelModel({\n            id: cuid(),\n            fields: fields || {},\n            source: leafPathSource,\n            selectedItem: undefined,\n            panelIndex: Object.keys(panels).length,\n        });\n\n        if (!fields) {\n            leafPanel.loading = true;\n        }\n\n        panels.push(leafPanel);\n    }\n\n    return panels;\n};\n\nexport default getPanels;\n","const contains = (val, searchTerm) => {\n    if (!val || !searchTerm) return false;\n\n    return val.toLowerCase().includes(searchTerm.toLowerCase());\n};\n\nconst searchCriteria = [\n    {\n        matcher: (searchTerm, { displayValue }) =>\n            contains(displayValue, searchTerm),\n        order: 100,\n    },\n    {\n        matcher: (searchTerm, { secondaryValue }) =>\n            contains(secondaryValue, searchTerm),\n        order: 200,\n    },\n];\n\nconst partitionMatches = (fieldKey, field, searchTerm, resultPartsMap) => {\n    const updatedMap = new Map(resultPartsMap);\n\n    searchCriteria.forEach(({ matcher, order }) => {\n        if (!updatedMap.get(order)) updatedMap.set(order, {});\n\n        if (matcher(searchTerm, field)) updatedMap.get(order)[fieldKey] = field;\n    });\n\n    return updatedMap;\n};\n\nconst searchFields = (fields, searchTerm) => {\n    let resultPartsMap = new Map();\n    const fieldKeys = Object.keys(fields);\n    fieldKeys.forEach(fieldKey => {\n        resultPartsMap = partitionMatches(\n            fieldKey,\n            fields[fieldKey],\n            searchTerm,\n            resultPartsMap\n        );\n    });\n\n    const resultPartKeys = Array.from(resultPartsMap.keys()).sort();\n    const result = {};\n    resultPartKeys.forEach(partKey => {\n        const part = resultPartsMap.get(partKey);\n        Object.keys(part).forEach(key => {\n            result[key] = part[key];\n        });\n    });\n\n    return result;\n};\n\nexport default searchFields;\n","import dotWalkBehavior from './dotWalk';\n\n// eslint-disable-next-line import/prefer-default-export\nexport { dotWalkBehavior };\n","import { actionTypes } from '@servicenow/ui-core';\nimport last from 'lodash/last';\nimport map from 'lodash/map';\nimport { NOW_DOT_WALK_BEHAVIOR_PATH_UPDATED } from './actions';\nimport {\n    BREADCRUMB_PATH_UPDATED,\n    DOT_WALK_TRIGGERED,\n    METADATA_TABLE_FETCHED,\n    PATH_UPDATED,\n} from '../../actions';\n\nconst { COMPONENT_CONNECTED, COMPONENT_PROPERTY_CHANGED } = actionTypes;\n\nconst componentBootstrappedHandler = ({\n    updateState,\n    state: {\n        dotWalkModel,\n        dotWalkModel: { path, leafPathSource },\n    },\n}) => {\n    updateState({\n        dotWalkModel: {\n            ...dotWalkModel,\n            path,\n            leafPathSource,\n        },\n    });\n};\n\nconst getPathMetadata = (path, dotWalkMetadata) => {\n    const pathMetadata = {};\n    path.forEach(({ field, parent }) => {\n        pathMetadata[field] = dotWalkMetadata[parent][field].fieldMetadata;\n    });\n\n    return pathMetadata;\n};\n\nconst pathUpdatedHandler = ({\n    state: {\n        dotWalkModel,\n        dotWalkModel: { path: dotWalkModelPath, metadata },\n    },\n    action: {\n        payload: { path },\n    },\n    dispatch,\n    updateState,\n}) => {\n    const updatedPath = path || [];\n    let leafPathSource = null;\n\n    if (updatedPath.length === 0) leafPathSource = dotWalkModelPath[0].parent;\n\n    updateState({\n        dotWalkModel: {\n            ...dotWalkModel,\n            path: updatedPath,\n            leafPathSource,\n        },\n        error: null,\n    });\n\n    const combinedPath = map(updatedPath, 'field').join('.');\n    const combinedPathDisplay = map(updatedPath, 'displayValue').join(' > ');\n    const selectedFieldData = last(updatedPath);\n    dispatch(NOW_DOT_WALK_BEHAVIOR_PATH_UPDATED, {\n        path: updatedPath,\n        combinedPath,\n        combinedPathDisplay,\n        selectedFieldData,\n        metadata: getPathMetadata(updatedPath, metadata),\n    });\n};\n\nconst dotWalkTriggeredHandler = ({\n    action: {\n        payload: {\n            referenceSource,\n            fieldName,\n            displayValue,\n            source,\n            pathIndex,\n        },\n    },\n    dispatch,\n    updateState,\n    state: {\n        dotWalkModel,\n        dotWalkModel: { path },\n    },\n    properties: { includeTemplateMetadata, includeAllColumns },\n}) => {\n    let updatedPath;\n    if (pathIndex > path.length - 1) {\n        updatedPath = [\n            ...path,\n            { displayValue, field: fieldName, parent: source },\n        ];\n    } else {\n        updatedPath = path.slice(0, pathIndex + 1);\n        const lastUpdatedPathItem = updatedPath[updatedPath.length - 1];\n        lastUpdatedPathItem.field = fieldName;\n        lastUpdatedPathItem.displayValue = displayValue;\n    }\n\n    updateState({\n        dotWalkModel: {\n            ...dotWalkModel,\n            path: updatedPath,\n            leafPathSource: referenceSource,\n        },\n    });\n\n    dispatch(METADATA_TABLE_FETCHED, {\n        table_name: referenceSource,\n        sysparm_include_all_columns: includeAllColumns,\n        sysparm_include_template_metadata: includeTemplateMetadata,\n    });\n};\n\nconst actionHandlers = {\n    [BREADCRUMB_PATH_UPDATED]: pathUpdatedHandler,\n    [DOT_WALK_TRIGGERED]: dotWalkTriggeredHandler,\n    [PATH_UPDATED]: pathUpdatedHandler,\n    [COMPONENT_CONNECTED]: componentBootstrappedHandler,\n    [COMPONENT_PROPERTY_CHANGED]: componentBootstrappedHandler,\n};\n\nexport {\n    actionHandlers as default,\n    componentBootstrappedHandler,\n    dotWalkTriggeredHandler,\n    getPathMetadata,\n    pathUpdatedHandler,\n};\n","module.exports = __TECTONIC__lodash_4_17_19[\"last\"];","module.exports = __TECTONIC__lodash_4_17_19[\"map\"];","import NowDotWalkConnectedElement, {\n    dotWalkEnabledFieldTypeOptions,\n} from './NowDotWalkConnectedElement';\n\nexport { dotWalkEnabledFieldTypeOptions };\nexport default NowDotWalkConnectedElement;\n","import rtlBehavior from '@servicenow/behavior-rtl';\nimport { actionTypes, createCustomElement } from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\nimport { dotWalkBehavior } from '../now-dot-walk';\nimport { NOW_DOT_WALK_BEHAVIOR_PATH_UPDATED } from '../now-dot-walk/behaviors/dotWalk';\nimport { CONNECTED_PATH_UPDATED } from './actions';\nimport metadataBehavior from './behaviors/metadata';\nimport baseStyle from './now-dot-walk.scss';\nimport NowDotWalk from './NowDotWalkConnected';\nimport {\n    componentBootstrappedHandler,\n    componentErrorHandler,\n    componentPropertyChangedHandler,\n} from './state';\n\nconst {\n    COMPONENT_BOOTSTRAPPED,\n    COMPONENT_ERROR_THROWN,\n    COMPONENT_PROPERTY_CHANGED,\n} = actionTypes;\n\n/**\n * @enum {dotWalkEnabledFieldTypeOptions}\n */\nexport const dotWalkEnabledFieldTypeOptions = {\n    REFERENCE: 'reference',\n    GLIDE_LIST: 'glide_list',\n};\n\n/**\n * Now Dot Walk Connected is a table-based wrapper component for Now Dot Walk.\n *\n * ```\n *  <now-dot-walk-connected\n *     dot-walk-path={path}\n *     table-name={table}\n *  />\n * ```\n *\n * @seismicElement now-dot-walk-connected\n * @summary A table-based wrapper component for Now Dot Walk.\n */\nconst nowDotWalkConnectedElement = createCustomElement(\n    'now-dot-walk-connected',\n    {\n        dispatches: {\n            /**\n             * Dispatched when the dot walk path is updated\n             *\n             * @type {{path: string}}\n             */\n            [CONNECTED_PATH_UPDATED]: {},\n        },\n        properties: {\n            /**\n             * The field types that can be dot walked. `dotWalkEnabledFieldTypeOptions` can be imported from now-dot-walk-connected.\n             * Required: No\n             *\n             * @type {dotWalkEnabledFieldTypeOptions[]}\n             */\n            dotWalkEnabledFieldTypes: {\n                default: [dotWalkEnabledFieldTypeOptions.REFERENCE],\n                schema: {\n                    type: 'array',\n                },\n            },\n            /**\n             * Initial path value.\n             * Required: No\n             *\n             * @type {string}\n             */\n            dotWalkPath: {\n                default: '',\n                schema: { type: 'string' },\n            },\n            /**\n             * The table used to fetch metadata.\n             * Required: Yes\n             *\n             * @type {string}\n             */\n            tableName: {\n                default: '',\n                schema: { type: 'string' },\n            },\n            /**\n             * Flag to enable showing all columns for the given table\n             *\n             * @type {boolean}\n             */\n            includeAllColumns: {\n                default: false,\n                schema: { type: 'boolean' },\n            },\n            /**\n             * Flag to enable the inclusion of template metadata attributes\n             *\n             * @type {boolean}\n             */\n            includeTemplateMetadata: {\n                default: false,\n                schema: { type: 'boolean' },\n            },\n            /**\n             * Function to transform the metadata model\n             * Required: No\n             * @type {function (metadata)}\n             */\n            transformMetadata: {\n                default: metadata => metadata,\n            },\n            /**\n             * ---- HANDLED IN METADATA BEHAVIOR ----\n             * Metadata used to render dot walk panels\n             * Required: No\n             * @type {object}\n             * interface {\n             *   [tableKey: string]: {\n             *     [fieldKey: string]: {\n             *       displayValue: string;\n             *       isReference: boolean;\n             *       referenceDataKey: string;\n             *     }\n             *   }\n             * }\n             * metadata: {\n             *   default: {},\n             *   schema: { type: 'object' },\n             * },\n             */\n        },\n        actionHandlers: {\n            [COMPONENT_BOOTSTRAPPED]: componentBootstrappedHandler,\n            [COMPONENT_ERROR_THROWN]: componentErrorHandler,\n            [COMPONENT_PROPERTY_CHANGED]: componentPropertyChangedHandler,\n            [NOW_DOT_WALK_BEHAVIOR_PATH_UPDATED]: {\n                effect: ({ action: { payload }, dispatch }) => {\n                    dispatch(CONNECTED_PATH_UPDATED, payload);\n                },\n                stopPropagation: true,\n            },\n        },\n        behaviors: [\n            {\n                behavior: rtlBehavior,\n            },\n            dotWalkBehavior,\n            metadataBehavior,\n        ],\n        initialState: {\n            dotWalkModel: {\n                dotWalkPath: [],\n                metadata: {},\n            },\n        },\n        renderer: { type: snabbdom },\n        view: NowDotWalk,\n        styles: [baseStyle],\n    }\n);\n\nexport default nowDotWalkConnectedElement;\n","import actionHandlers from './actionHandlers';\n\nconst ELEMENT_NAME = 'dotwWalkMetadataBehavior';\nconst metadataBehavior = {\n    name: ELEMENT_NAME,\n    properties: {\n        /**\n         * Initial path value.\n         * Required: No\n         *\n         * @type {string}\n         */\n        dotWalkPath: {\n            default: '',\n            schema: { type: 'string' },\n        },\n        /**\n         * The table used to fetch metadata.\n         * Required: Yes\n         *\n         * @type {string}\n         */\n        tableName: {\n            default: '',\n            schema: { type: 'string' },\n        },\n        /**\n         * Metadata used to render dot walk panels\n         * Required: No\n         * @type {object}\n         * interface {\n         *   [tableKey: string]: {\n         *     [fieldKey: string]: {\n         *       displayValue: string;\n         *       isReference: boolean;\n         *       referenceDataKey: string;\n         *     }\n         *   }\n         * }\n         * */\n        metadata: {\n            default: {},\n            schema: { type: 'object' },\n        },\n    },\n    actionHandlers,\n};\n\nexport default metadataBehavior;\n","import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport { t } from 'sn-translate';\nimport {\n    METADATA_PATH_FETCHED,\n    METADATA_TABLE_FETCHED,\n} from '../../../now-dot-walk/actions';\nimport {\n    METADATA_PATH_FETCH_FAILED,\n    METADATA_PATH_FETCH_SUCCEEDED,\n    METADATA_TABLE_FETCH_FAILED,\n    METADATA_TABLE_FETCH_SUCCEEDED,\n} from '../../actions';\nimport { dotWalkPathFetchEffect, dotWalkTableFetchEffect } from './http';\nimport { constructDotWalkModel } from './util';\nimport { transformFieldValues } from './util/constructDotWalkModel';\n\nconst fetchErrorMessage = t(\n    'Error occurred while fetching data. Please contact your system administrator'\n);\nconst fetchErrorHandler = ({ updateState }) => {\n    updateState({\n        error: fetchErrorMessage,\n    });\n};\n\nconst pathMetadataFetchSuccessHandler = ({\n    action: { payload },\n    properties: {\n        dotWalkEnabledFieldTypes,\n        tableName,\n        manageMetadata,\n        metadata,\n    },\n    updateState,\n}) => {\n    const dotWalkModel = constructDotWalkModel(\n        payload.result,\n        dotWalkEnabledFieldTypes,\n        manageMetadata,\n        metadata\n    );\n\n    const pathLength = get(dotWalkModel, 'path.length', 0);\n    if (pathLength === 0) dotWalkModel.leafPathSource = tableName;\n\n    updateState({ dotWalkModel, error: null });\n};\n\nconst tableMetadataFetchSuccessHandler = ({\n    state: { dotWalkModel },\n    action: {\n        payload: { result },\n        meta: {\n            request: { updatedUrl },\n        },\n    },\n    properties: { dotWalkEnabledFieldTypes },\n    updateState,\n}) => {\n    let updatedDotWalkModel = { ...dotWalkModel };\n\n    // Temporary solution until the server returns table name back with payload\n    const updateUrlSplit = updatedUrl.split('/');\n    const tableNameIndex = updateUrlSplit.indexOf('dot_walk') + 1;\n    const tableName = updateUrlSplit[tableNameIndex];\n    const metadata = get(dotWalkModel, 'metadata');\n\n    // Usually occurs when initialized without a path\n    if (isEmpty(metadata)) {\n        updatedDotWalkModel = constructDotWalkModel(\n            {\n                path: [],\n                tables: { [tableName]: result },\n            },\n            dotWalkEnabledFieldTypes\n        );\n\n        updatedDotWalkModel.leafPathSource = tableName;\n        updateState({ dotWalkModel: updatedDotWalkModel, error: null });\n        return;\n    }\n\n    updateState({\n        dotWalkModel: {\n            ...dotWalkModel,\n            metadata: {\n                ...dotWalkModel.metadata,\n                [tableName]: transformFieldValues(result),\n            },\n        },\n        error: null,\n    });\n};\n\nconst actionHandlers = {\n    [METADATA_PATH_FETCHED]: dotWalkPathFetchEffect,\n    [METADATA_PATH_FETCH_SUCCEEDED]: pathMetadataFetchSuccessHandler,\n    [METADATA_PATH_FETCH_FAILED]: fetchErrorHandler,\n    [METADATA_TABLE_FETCHED]: dotWalkTableFetchEffect,\n    [METADATA_TABLE_FETCH_SUCCEEDED]: tableMetadataFetchSuccessHandler,\n    [METADATA_TABLE_FETCH_FAILED]: fetchErrorHandler,\n};\n\nexport {\n    actionHandlers as default,\n    fetchErrorHandler,\n    fetchErrorMessage,\n    pathMetadataFetchSuccessHandler,\n    tableMetadataFetchSuccessHandler,\n};\n","module.exports = __TECTONIC__lodash_4_17_19[\"isEmpty\"];","import dotWalkPathFetchEffect from './dotWalkPathFetchEffect';\nimport dotWalkTableFetchEffect from './dotWalkTableFetchEffect';\n\nexport { dotWalkPathFetchEffect, dotWalkTableFetchEffect };\n","import { createHttpEffect } from '@servicenow/ui-effect-http';\nimport {\n    METADATA_PATH_FETCH_STARTED,\n    METADATA_PATH_FETCH_SUCCEEDED,\n    METADATA_PATH_FETCH_FAILED,\n} from '../../../actions';\n\nexport default createHttpEffect('/api/now/ui/dot_walk/:table_name/path', {\n    method: 'GET',\n    headers: {},\n    pathParams: ['table_name'],\n    queryParams: [\n        'sysparm_path',\n        'sysparm_include_all_columns',\n        'sysparm_include_template_metadata',\n    ],\n    startActionType: METADATA_PATH_FETCH_STARTED,\n    successActionType: METADATA_PATH_FETCH_SUCCEEDED,\n    errorActionType: METADATA_PATH_FETCH_FAILED,\n});\n","import { createHttpEffect } from '@servicenow/ui-effect-http';\nimport {\n    METADATA_TABLE_FETCH_STARTED,\n    METADATA_TABLE_FETCH_SUCCEEDED,\n    METADATA_TABLE_FETCH_FAILED,\n} from '../../../actions';\n\nexport default createHttpEffect('/api/now/ui/dot_walk/:table_name/table', {\n    method: 'GET',\n    headers: {},\n    pathParams: ['table_name'],\n    queryParams: [\n        'sysparm_include_all_columns',\n        'sysparm_include_template_metadata',\n    ],\n    startActionType: METADATA_TABLE_FETCH_STARTED,\n    successActionType: METADATA_TABLE_FETCH_SUCCEEDED,\n    errorActionType: METADATA_TABLE_FETCH_FAILED,\n});\n","import constructDotWalkModel from './constructDotWalkModel';\n\n// eslint-disable-next-line import/prefer-default-export\nexport { constructDotWalkModel };\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/dist/cjs.js??ref--6-3!./now-dot-walk.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \":host{line-height:1.25;font-family:var(--now-font-family,\\\"Source Sans Pro\\\",\\\"Helvetica Neue\\\",helvetica,arial,sans-serif)}:host([hidden]){display:none}*,:after,:before{box-sizing:border-box}\", \"\"]);\n\n// exports\n","import '@servicenow/ui-renderer-snabbdom';\nimport '../now-dot-walk';\nimport getTransformedMetadata from './getTransformedMetadata';\n\nexport default state => {\n    const {\n        dotWalkModel,\n        error,\n        properties: { dir, transformMetadata },\n    } = state;\n\n    const { path, metadata, leafPathSource } = dotWalkModel;\n    const metadataWithTransform = getTransformedMetadata(\n        metadata,\n        transformMetadata\n    );\n\n    return (\n        <now-dot-walk\n            dotWalkPath={path}\n            metadata={metadataWithTransform}\n            leafPathSource={leafPathSource || ''}\n            error={error}\n            dir={dir}\n        />\n    );\n};\n","/* eslint-disable no-console */\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\nimport { t } from 'sn-translate';\n\nconst TRANSFORM_ERROR_MESSAGE = t(\n    'Invalid transformMetadata function provided to NowDotWalkConnected. Expected an object return value.'\n);\n\nconst INVALID_TRANSFORM_MESSAGE = t(\n    'Expected transformMetadata to be a function'\n);\n\nconst getTransformedMetadata = (metadata, transformMetadata) => {\n    if (!metadata) return null;\n    if (!isFunction(transformMetadata)) {\n        console.error(INVALID_TRANSFORM_MESSAGE);\n        return metadata;\n    }\n\n    const metadataWithTransform = transformMetadata(metadata);\n    if (!isObject(metadataWithTransform)) {\n        console.error(TRANSFORM_ERROR_MESSAGE);\n        return metadata;\n    }\n\n    return metadataWithTransform;\n};\n\nexport default getTransformedMetadata;\n","module.exports = __TECTONIC__lodash_4_17_19[\"isFunction\"];","module.exports = __TECTONIC__lodash_4_17_19[\"isObject\"];","import {\n    componentBootstrappedHandler,\n    componentErrorHandler,\n    componentPropertyChangedHandler,\n} from './globalHandlers';\n\nexport {\n    componentBootstrappedHandler,\n    componentErrorHandler,\n    componentPropertyChangedHandler,\n};\n","import { t } from 'sn-translate';\nimport {\n    METADATA_TABLE_FETCHED,\n    METADATA_PATH_FETCHED,\n} from '../../now-dot-walk/actions';\n\nconst componentBootstrappedHandler = ({\n    properties: {\n        dotWalkPath,\n        tableName,\n        includeAllColumns,\n        includeTemplateMetadata,\n    },\n    dispatch,\n}) => {\n    if (!dotWalkPath) {\n        dispatch(METADATA_TABLE_FETCHED, {\n            table_name: tableName,\n            sysparm_include_all_columns: includeAllColumns,\n            sysparm_include_template_metadata: includeTemplateMetadata,\n        });\n        return;\n    }\n\n    dispatch(METADATA_PATH_FETCHED, {\n        sysparm_path: dotWalkPath,\n        table_name: tableName,\n        sysparm_include_all_columns: includeAllColumns,\n        sysparm_include_template_metadata: includeTemplateMetadata,\n    });\n};\n\nconst componentPropertyChangedHandler = ({\n    dispatch,\n    action: { payload },\n    updateState,\n    properties: {\n        dotWalkPath,\n        tableName,\n        includeAllColumns,\n        includeTemplateMetadata,\n    },\n}) => {\n    updateState({ [payload.name]: payload.value });\n\n    switch (payload.name) {\n        case 'dotWalkPath': {\n            dispatch(METADATA_PATH_FETCHED, {\n                sysparm_path: payload.value,\n                table_name: tableName,\n                sysparm_include_all_columns: includeAllColumns,\n                sysparm_include_template_metadata: includeTemplateMetadata,\n            });\n            break;\n        }\n        case 'tableName': {\n            dispatch(METADATA_PATH_FETCHED, {\n                sysparm_path: dotWalkPath,\n                table_name: payload.value,\n                sysparm_include_all_columns: includeAllColumns,\n                sysparm_include_template_metadata: includeTemplateMetadata,\n            });\n            break;\n        }\n        case 'includeAllColumns': {\n            dispatch(METADATA_PATH_FETCHED, {\n                sysparm_path: dotWalkPath,\n                table_name: tableName,\n                sysparm_include_all_columns: payload.value,\n                sysparm_include_template_metadata: includeTemplateMetadata,\n            });\n            break;\n        }\n        case 'includeTemplateMetadata': {\n            dispatch(METADATA_PATH_FETCHED, {\n                sysparm_path: dotWalkPath,\n                table_name: tableName,\n                sysparm_include_all_columns: includeAllColumns,\n                sysparm_include_template_metadata: payload.value,\n            });\n            break;\n        }\n        default:\n            break;\n    }\n};\n\nconst componentErrorMessage = t(\n    'Error occurred. Please contact your System Administrator'\n);\n\nconst componentErrorHandler = ({ updateState }) => {\n    updateState({\n        error: componentErrorMessage,\n    });\n};\n\nexport {\n    componentBootstrappedHandler,\n    componentErrorHandler,\n    componentErrorMessage,\n    componentPropertyChangedHandler,\n};\n"],"sourceRoot":""}