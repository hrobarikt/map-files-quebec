{"version":3,"sources":["webpack://__TECTONIC__sn_component_em_hidden/webpack/bootstrap","webpack://__TECTONIC__sn_component_em_hidden/./src/emRefreshAlertList/emRefreshAlertListElement.js","webpack://__TECTONIC__sn_component_em_hidden/external \"__TECTONIC__sn_uxpage_presource_18_0_3\"","webpack://__TECTONIC__sn_component_em_hidden/./src/index.js","webpack://__TECTONIC__sn_component_em_hidden/external \"__TECTONIC__$servicenow_ui_core\"","webpack://__TECTONIC__sn_component_em_hidden/external \"__TECTONIC__$servicenow_ui_renderer_react\"","webpack://__TECTONIC__sn_component_em_hidden/./src/emRefreshAlertList/emRefreshAlertList.js","webpack://__TECTONIC__sn_component_em_hidden/external \"__TECTONIC__react\"","webpack://__TECTONIC__sn_component_em_hidden/./src/emRefreshAlertList/_emRefreshAlertList.scss?9603","webpack://__TECTONIC__sn_component_em_hidden/./src/emRefreshAlertList/_emRefreshAlertList.scss","webpack://__TECTONIC__sn_component_em_hidden/./node_modules/css-loader/lib/css-base.js","webpack://__TECTONIC__sn_component_em_hidden/external \"__TECTONIC__lodash_4_17_4\"","webpack://__TECTONIC__sn_component_em_hidden/./src/datasources/listFilters/ListFiltersGQLRead.js","webpack://__TECTONIC__sn_component_em_hidden/external \"__TECTONIC__$servicenow_ui_effect_amb\"","webpack://__TECTONIC__sn_component_em_hidden/external \"__TECTONIC__$servicenow_ui_effect_graphql\"","webpack://__TECTONIC__sn_component_em_hidden/./src/emRefreshAlertList/emRefreshAlertPresource.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","RECORD_WATCHER_UPDATED","RW_ACTIONS","recordWatcher","createAmbSubscriptionEffect","subscribeStartedActionType","subscribeSucceededActionType","subscribeFailedActionType","messageReceivedActionType","unsubscribeSucceededActionType","LIST_FILTER_DATA_FETCH","listFilterGraphQLEffect","createGraphQLEffect","ListFiltersGQLRead","variableList","successActionType","LIST_PROPERTIES_DATA_FETCH","listPropertiesGraphQLEffect","ListPropertiesGQLRead","createCustomElement","renderer","type","react","view","EmRefreshAlertList","properties","updateListMenuQuery","listUpdated","emAlertWatcher","listsFilter","sysProperties","listenTo","behaviors","emRefreshAlertPresourceBehavior","actionHandlers","effect","coeffects","updateProperties","timestamp","Date","now","stopPropagation","action","console","debug","JSON","stringify","payload","__TECTONIC__sn_uxpage_presource_18_0_3","default","__TECTONIC__$servicenow_ui_core","__TECTONIC__$servicenow_ui_renderer_react","props","clearTimers","this","internalTimer","clearTimeout","autoRefreshIntervalTimer","clearInterval","setInternalTimer","interval","dispatch","setTimeout","lastUpdateTime","background","initFromProps","nextProps","getOnceeFromServer","getTablesData","propertiesResults","find","propertiesResult","refreshInterval","parseInt","freezeTimeThreshold","isSubscriptionStateHandled","isRefreshByIntervalDisabled","stopSubscribe","isIntervalFound","intervalValue","setInterval","currentTable","currentFilter","tableName","alertSubscribe","filter","startSubscribe","emptyFilter","isUserAction","lastActionTime","lastTimestamp","manualActionProperty","intervalProperty","disableAutoRefrshProperty","freezeActions","helpers","queryConditions","autoRefreshLists","index","length","isEmpty","selectedListSysId","autoRefreshList","workspace_list","my_workspace_list","refresh_enabled","forced","actionName","btoa","replace","subscribe","newFilter","refresh_interval","isEmInstalled","_now","actionLastTimeUpdated","isFreezeAction","includes","inFreezeThreshold","isNewTimestamp","newMessage","prevProps","isNewMessage","isInSuppressTimeThreshold","timeForSuppression","untilNextUpdateInterval","React","Component","style","__TECTONIC__react","result","toString","push","useSourceMap","list","map","item","content","cssMapping","sourceMapping","sourceMap","unescape","encodeURIComponent","sourceURLs","sources","source","sourceRoot","concat","join","cssWithMappingToString","mediaQuery","alreadyImportedModules","id","__TECTONIC__lodash_4_17_4","__TECTONIC__$servicenow_ui_effect_amb","__TECTONIC__$servicenow_ui_effect_graphql","createPreSourceBehavior","transform","data"],"mappings":"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","file":"sn-component-em-hidden.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","import {createCustomElement} from '@servicenow/ui-core';\nimport react from '@servicenow/ui-renderer-react';\nimport {default as EmRefreshAlertList} from './emRefreshAlertList';\nimport {\n\tListFiltersGQLRead,\n\tListPropertiesGQLRead\n} from '../datasources/listFilters/ListFiltersGQLRead';\nimport {createPrefetchedReadOnlyDatasource} from 'sn-uxpage-presource';\nimport {createAmbSubscriptionEffect} from '@servicenow/ui-effect-amb';\nimport {createGraphQLEffect} from '@servicenow/ui-effect-graphql';\nimport {emRefreshAlertPresourceBehavior} from './emRefreshAlertPresource';\n\nexport const RECORD_WATCHER_UPDATED = 'RECORD_WATCHER_UPDATED';\nconst RW_ACTIONS = {\n\tSUBSCRIPTION_STARTED: 'SUBSCRIPTION_STARTED',\n\tSUBSCRIPTION_SUCCEEDED: 'SUBSCRIPTION_SUCCEEDED',\n\tSUBSCRIPTION_FAILED: 'SUBSCRIPTION_FAILED',\n\tMESSAGE_RECEIVED: 'MESSAGE_RECEIVED',\n\tSUBSCRIPTION_UNSUBSCRIBED: 'SUBSCRIPTION_UNSUBSCRIBED'\n};\n\nconst recordWatcher = createAmbSubscriptionEffect(\n\t'/rw/default/em_alert/:filter',\n\t{\n\t\tsubscribeStartedActionType: RW_ACTIONS.SUBSCRIPTION_STARTED,\n\t\tsubscribeSucceededActionType: RW_ACTIONS.SUBSCRIPTION_SUCCEEDED,\n\t\tsubscribeFailedActionType: RW_ACTIONS.SUBSCRIPTION_FAILED,\n\t\tmessageReceivedActionType: RW_ACTIONS.MESSAGE_RECEIVED,\n\t\tunsubscribeSucceededActionType: RW_ACTIONS.SUBSCRIPTION_UNSUBSCRIBED\n\t}\n);\n\nconst LIST_FILTER_DATA_FETCH_COMPLETED = 'LIST_FILTER_DATA_FETCH_COMPLETED';\nexport const LIST_FILTER_DATA_FETCH = 'LIST_FILTER_DATA_FETCH';\nconst listFilterGraphQLEffect = createGraphQLEffect(ListFiltersGQLRead, {\n\tvariableList: ['sys_id'],\n\tsuccessActionType: LIST_FILTER_DATA_FETCH_COMPLETED\n});\n\nconst LIST_PROPERTIES_DATA_FETCH_COMPLETED =\n\t'LIST_PROPERTIES_DATA_FETCH_COMPLETED';\nexport const LIST_PROPERTIES_DATA_FETCH = 'LIST_PROPERTIES_DATA_FETCH';\nconst listPropertiesGraphQLEffect = createGraphQLEffect(ListPropertiesGQLRead, {\n\tvariableList: ['queryConditions'],\n\tsuccessActionType: LIST_PROPERTIES_DATA_FETCH_COMPLETED\n});\n\nexport default createCustomElement('sn-component-em-hidden', {\n\trenderer: {\n\t\ttype: react,\n\t\tview: EmRefreshAlertList\n\t},\n\tproperties: {\n\t\tupdateListMenuQuery: {},\n\t\tlistUpdated: {},\n\t\temAlertWatcher: {},\n\t\tlistsFilter: {},\n\t\tsysProperties: {},\n\t\tlistenTo: \"refreshRequested:*/LIST_REFRESH_REQUESTED\"\n\t},\n\tbehaviors: [emRefreshAlertPresourceBehavior],\n\tactionHandlers: {\n\t\t[RECORD_WATCHER_UPDATED]: recordWatcher,\n\t\t[RW_ACTIONS.SUBSCRIPTION_STARTED]: {\n\t\t\teffect: coeffects => {}\n\t\t},\n\t\t[RW_ACTIONS.SUBSCRIPTION_SUCCEEDED]: {\n\t\t\teffect: coeffects => {}\n\t\t},\n\t\t[RW_ACTIONS.SUBSCRIPTION_FAILED]: {\n\t\t\teffect: coeffects => {}\n\t\t},\n\t\t[RW_ACTIONS.MESSAGE_RECEIVED]: {\n\t\t\teffect: coeffects => {\n\t\t\t\tconst {updateProperties} = coeffects;\n\t\t\t\tupdateProperties({\n\t\t\t\t\temAlertWatcher: {\n\t\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t[RW_ACTIONS.SUBSCRIPTION_UNSUBSCRIBED]: {\n\t\t\teffect: coeffects => {}\n\t\t},\n\t\t[LIST_FILTER_DATA_FETCH]: {\n\t\t\t...listFilterGraphQLEffect,\n\t\t\tstopPropagation: true\n\t\t},\n\t\t[LIST_PROPERTIES_DATA_FETCH]: {\n\t\t\t...listPropertiesGraphQLEffect,\n\t\t\tstopPropagation: true\n\t\t},\n\t\t[LIST_FILTER_DATA_FETCH_COMPLETED]: {\n\t\t\teffect: ({updateProperties, action}) => {\n\t\t\t\tconsole.debug(`EM RefreshList: Received response for LIST_FILTER_DATA_FETCH_COMPLETED ${JSON.stringify(action.payload)}`);\n\t\t\t\tupdateProperties({\n\t\t\t\t\tlistsFilter: {...action.payload}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t[LIST_PROPERTIES_DATA_FETCH_COMPLETED]: {\n\t\t\teffect: ({updateProperties, action}) => {\n\t\t\t\tconsole.debug(`EM RefreshList: Received response for LIST_PROPERTIES_DATA_FETCH_COMPLETED: ${JSON.stringify(action.payload)}`);\n\t\t\t\tupdateProperties({\n\t\t\t\t\tsysProperties: {...action.payload}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n});\n","module.exports = __TECTONIC__sn_uxpage_presource_18_0_3;","export {default as emRefreshAlertListElement} from './emRefreshAlertList/emRefreshAlertListElement';\n","module.exports = __TECTONIC__$servicenow_ui_core;","module.exports = __TECTONIC__$servicenow_ui_renderer_react;","import React from 'react';\nimport style from './_emRefreshAlertList.scss';\nimport {get, includes, find, isEmpty} from 'lodash';\nimport {\n\tLIST_FILTER_DATA_FETCH,\n\tLIST_PROPERTIES_DATA_FETCH,\n\tRECORD_WATCHER_UPDATED\n} from './emRefreshAlertListElement';\n\nfunction isNewMessage(prevProps, nextProps) {\n\tconst prevTS = get(prevProps, 'emAlertWatcher.timestamp');\n\tconst nextTS = get(nextProps, 'emAlertWatcher.timestamp');\n\treturn prevTS !== nextTS;\n}\n\nclass EmRefreshAlertList extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.alertSubscribe = false;\n\t\tthis.tableName = 'em_alert';\n\t\tthis.filter = '';\n\t\tthis.emptyFilter = 'sys_id!=-1';\n\t\tthis.isUserAction = false;\n\t\tthis.lastActionTime = 0;\n\t\tthis.lastTimestamp = 0;\n\t\tthis.lastUpdateTime = Date.now();\n\t\tthis.refreshInterval = 5000;//default there are alot of alerts per second need interval for the next refresh (5 second)\n\t\tthis.freezeTimeThreshold = 30000; //default if there is a user action need to wait 30 seconds.\n\t\tthis.manualActionProperty = 'evt_mgmt.ai_refresh_time_to_wait_after_manual_action';\n\t\tthis.intervalProperty = 'evt_mgmt.ai_refresh_time_interval';\n\t\tthis.disableAutoRefrshProperty = 'sn_em_ai.evt_mgmt.disable_lists_auto_refresh';\n\t    this.freezeActions = ['LIMIT', 'PAGE', 'SCROLL', 'ROW_CLICK', 'ORDER_BY', 'QUERY','PANEL_OPENED','CHECKBOX_TOGGLED'];\n\t\tthis.intervalValue = 20;//20 seconds.\n\t\tthis.getOnceeFromServer = false;\n\n\t\tthis.autoRefreshIntervalTimer = null;\n\t\tthis.internalTimer = null;\n\t}\n\n\tclearTimers = function() {\n\t\tif (this.internalTimer) {\n\t\t\tconsole.debug(`EM RefreshList: clear previous internal timer: ${this.internalTimer}`);\n\t\t\tclearTimeout(this.internalTimer);\n\t\t\tthis.internalTimer = null;\n\t\t}\n\n\t\tif (this.autoRefreshIntervalTimer) {\n\t\t\tconsole.debug(`EM RefreshList: clear previous auto refresh timer: ${this.autoRefreshIntervalTimer}`);\n\t\t\tclearInterval(this.autoRefreshIntervalTimer);\n\t\t\tthis.autoRefreshIntervalTimer = null;\n\t\t}\n\t}\n\n\tsetInternalTimer = function(interval, dispatch) {\n\t\tthis.clearTimers();\n\t\tthis.internalTimer = setTimeout(function () {\n\t\t\tthis.lastUpdateTime = Date.now();\n\t\t\tthis.internalTimer = null;\n\t\t\tdispatch('LIST_REFRESH_REQUESTED', {\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tbackground: true,\n\t\t\t});\n\t\t}.bind(this), interval);\n\t\tconsole.debug(`EM RefreshList: internal timer ${this.internalTimer} is set to ${interval} msec`);\n\t}\n\n\tgetTablesData() {\n\t\tconst {\n\t\t\thelpers: {dispatch}\n\t\t} = this.props;\n\n\t\tconst queryConditions =\n\t\t\t'name=' +\n\t\t\tthis.manualActionProperty +\n\t\t\t'^ORname=' +\n\t\t\tthis.intervalProperty +\n\t\t\t'^ORname=' +\n\t\t\tthis.disableAutoRefrshProperty;\n\n\t\tconsole.debug('EM RefreshList: Dispatching LIST_FILTER_DATA_FETCH');\n\t\tdispatch(LIST_FILTER_DATA_FETCH);\n\t\tconsole.debug('EM RefreshList: Dispatching LIST_PROPERTIES_DATA_FETCH');\n\t\tdispatch(LIST_PROPERTIES_DATA_FETCH, {queryConditions});\n\t}\n\n\tisEmInstalled(nextProps, dispatch) {\n\t\tconst currentTable = get(nextProps, 'updateListMenuQuery.table');\n\t\tif (currentTable !== this.tableName) {\n\t\t\tthis.stopSubscribe(dispatch);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tisRefreshByIntervalDisabled(nextProps) {\n\t\tconst autoRefreshLists = get(\n\t\t\tnextProps,\n\t\t\t'listsFilter.data.GlideRecord_Query.em_alert_lists_auto_refresh._results'\n\t\t);\n\t\tconst propertiesResults = get(\n\t\t\tnextProps,\n\t\t\t'sysProperties.data.GlideRecord_Query.sys_properties._results'\n\t\t);\n\t\tif (propertiesResults) {\n\t\t\tfor (let index = 0; index < propertiesResults.length; index++) {\n\t\t\t\tif (\n\t\t\t\t\tpropertiesResults[index].name.value ===\n\t\t\t\t\t\tthis.disableAutoRefrshProperty &&\n\t\t\t\t\tpropertiesResults[index].value.value === 'true'\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (isEmpty(autoRefreshLists)) {\n\t\t\treturn false;\n\t\t}\n\t\tlet selectedListSysId = get(\n\t\t\tnextProps,\n\t\t\t'updateListMenuQuery.selectedListSysId'\n\t\t);\n\t\tlet disableRefresh = find(autoRefreshLists, function(autoRefreshList) {\n\t\t\tlet listSysId =\n\t\t\t\tautoRefreshList.workspace_list.value ||\n\t\t\t\tautoRefreshList.my_workspace_list.value;\n\t\t\tif (\n\t\t\t\tlistSysId === selectedListSysId &&\n\t\t\t\t!autoRefreshList.refresh_enabled.value\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tif (disableRefresh) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tstopSubscribe(dispatch, forced = false) {\n\t\tif (this.alertSubscribe === true || forced) {\n\t\t\tconsole.debug(`EM RefreshList: stopSubscribe (actionName: ${this.actionName} alertSubscribe: ${this.alertSubscribe} forced: ${forced})`);\n\t\t\tdispatch(RECORD_WATCHER_UPDATED, {\n\t\t\t\tfilter: btoa(this.filter).replace(/=/g, '-'),\n\t\t\t\tsubscribe: false\n\t\t\t});\n\t\t\tthis.alertSubscribe = false;\n\t\t\tthis.filter = null;\n\t\t\tthis.clearTimers();\n\t\t}\n\t}\n\t\n\tstartSubscribe(filter, dispatch) {\n\t\tthis.alertSubscribe = true;\n\t\tthis.filter = filter;\n\t\tconst newFilter = (filter === null || filter === '') ? this.emptyFilter : filter;\n\n\t\tdispatch(RECORD_WATCHER_UPDATED, {\n\t\t\tfilter: btoa(newFilter).replace(/=/g, '-'),\n\t\t\tsubscribe: true\n\t\t});\n\n\t\tthis.clearTimers();\n\t}\n\n\tisIntervalFound(nextProps) {\n\t\tconst autoRefreshLists = get(\n\t\t\tnextProps,\n\t\t\t'listsFilter.data.GlideRecord_Query.em_alert_lists_auto_refresh._results'\n\t\t);\n\t\tif (isEmpty(autoRefreshLists)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst selectedListSysId = get(\n\t\t\tnextProps,\n\t\t\t'updateListMenuQuery.selectedListSysId'\n\t\t);\n\t\tlet isInterval = find(\n\t\t\tautoRefreshLists,\n\t\t\tfunction(autoRefreshList) {\n\t\t\t\tlet listSysId =\n\t\t\t\t\tautoRefreshList.workspace_list.value ||\n\t\t\t\t\tautoRefreshList.my_workspace_list.value;\n\t\t\t\tif (\n\t\t\t\t\tlistSysId === selectedListSysId &&\n\t\t\t\t\tautoRefreshList.refresh_interval.value > 0\n\t\t\t\t) {\n\t\t\t\t\tthis.intervalValue = autoRefreshList.refresh_interval.value;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}.bind(this)\n\t\t);\n\t\tif (isInterval) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n    initFromProps = (nextProps) => {\n\t\tif (this.getOnceeFromServer === false) {\n\t\t\tthis.getTablesData();\n\t\t\tthis.getOnceeFromServer = true;\n\t\t}\n\n\t\t/**\n\t\t * user can change the properties of evt_mgmt.ai_refresh_time_interval, and evt_mgmt.ai_refresh_time_to_wait_after_manual_action\n\t\t * from sys_properties table\n         */\n\t\tconst propertiesResults = get(nextProps, 'sysProperties.data.GlideRecord_Query.sys_properties._results');\n\t\tfind(propertiesResults, function (propertiesResult) {\n\t\t\tswitch (propertiesResult.name.value) {\n\t\t\t\tcase 'evt_mgmt.ai_refresh_time_interval':\n\t\t\t\t\tthis.refreshInterval = parseInt(propertiesResult.value.value, 10);\n\t\t\t\t\tconsole.debug(`EM RefreshList: set ai_refresh_time_interval (refresh interval) to ${this.refreshInterval}`);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'evt_mgmt.ai_refresh_time_to_wait_after_manual_action':\n\t\t\t\t\tthis.freezeTimeThreshold = parseInt(propertiesResult.value.value, 10);\n\t\t\t\t\tconsole.debug(`EM RefreshList: set evt_mgmt.ai_refresh_time_to_wait_after_manual_action (freeze time threshold) to ${this.freezeTimeThreshold}`);\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t}.bind(this));\n\t}\n\n\tisSubscriptionStateHandled = (nextProps, dispatch) => {\n\t\tif (this.isRefreshByIntervalDisabled(nextProps)) {\n\t\t\tconsole.debug(`EM RefreshList: refresh by interval disabled`);\n\t\t\tthis.stopSubscribe(dispatch);\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n         * user can add interVal for some lists\n         * then the auto refresh will be each X time 'refresh_interval' Time\n         * in the list that the user choose\n         */\n\t\tif (this.isIntervalFound(nextProps)) {\n\t\t\tthis.stopSubscribe(dispatch);\n\t\t\tconst interval = parseInt(this.intervalValue, 10) * 1000 || 200000;\n\t\t\tif (!this.autoRefreshIntervalTimer) {\n\t\t\t\tthis.autoRefreshIntervalTimer = setInterval(\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\tdispatch('LIST_REFRESH_REQUESTED', {\n\t\t\t\t\t\t\ttimestamp: Date.now(),\n\t\t\t\t\t\t\tbackground: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this), interval);\n\t\t\t\tconsole.debug(`EM RefreshList: setting auto refresh timer (id: ${this.autoRefreshIntervalTimer}) to ${interval} msec`);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tconst currentTable = get(nextProps, 'updateListMenuQuery.table');\n\t\tconst currentFilter = get(nextProps, 'updateListMenuQuery.conditions');\n\n\t\t// if the table not em_alert stop subscribing ..\n\t\tif (currentTable !== this.tableName && this.alertSubscribe === true) {\n\t\t\tconsole.debug(`EM RefreshList: table is not em_alert!`);\n\t\t\tthis.stopSubscribe(dispatch, true);\n\t\t\treturn true;\n\t\t}\n\n\t\t// if filter was changes in em_alert ( user change the em_alert list)\n\t\t// stop the subscribe to the prior list\n\t\tif (currentTable === this.tableName && this.alertSubscribe === true && this.filter !== currentFilter) {\n\t\t\tconsole.debug(`EM RefreshList: filter has been changed, stop previous subscription (filter: ${this.filter})`);\n\t\t\tthis.stopSubscribe(dispatch, true);\n\t\t\t\n\t\t}\n\n\t\t// if the table is em_alert start subscribing.\n\t\tif (currentTable === this.tableName && this.alertSubscribe === false) {\n\t\t\tconsole.debug(`EM RefreshList: starting new subscription (filter: ${currentFilter})`);\n\t\t\tthis.startSubscribe(currentFilter, dispatch);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\n\tcomponentWillReceiveProps({properties: nextProps, dispatch}) {\n\t\tif (!this.isEmInstalled(nextProps, dispatch)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.initFromProps(nextProps);\n\t\n\t\tif (this.isSubscriptionStateHandled(nextProps, dispatch))\n\t\t\treturn;\n\n\t\tconst _now = Date.now();\n\t\t/**\n\t\t\tcheck if there is user action , update the flag\n        \tand update the lastActionTime\n          */\n\t\tconst actionLastTimeUpdated = get(nextProps, 'listUpdated.data.timestamp') || 0;\n\t\tconst actionName = get(nextProps, 'listUpdated.type');\n\t\tconsole.debug(`EM RefreshList: actionLastTimeUpdated=${actionLastTimeUpdated}, actionName=${actionName}`);\n\n\t\tconst isFreezeAction = includes(this.freezeActions, actionName);\n\t\tconst inFreezeThreshold = _now - actionLastTimeUpdated < this.freezeTimeThreshold;\n\t\tconst isNewTimestamp = actionLastTimeUpdated !== this.lastTimestamp;\n\t\tconst newMessage = isNewMessage(this.props, nextProps);\n\n\t\tconsole.debug(`EM RefreshList: action '${actionName}' is freeze action (${isFreezeAction}) and in freeze threshold (${inFreezeThreshold}), isNewMessage (${newMessage})`);\n\t\tif (isFreezeAction && inFreezeThreshold) {\n\t\t\tthis.lastActionTime = _now;\n\t\t\t\n\t\t\t// not really received an update\n\t\t \tif (!isNewTimestamp && !newMessage) {\n\t\t\t\tconsole.debug(`EM RefreshList: no need to refresh...`);\n\t\t\t\treturn;\n\t\t\t }\n\n\t\t\tthis.lastTimestamp = actionLastTimeUpdated;\n\t\t}\n\n\t\t/**\n\t\t * ignore the huge number of  updates per second.\n\t\t * suppress multiple requests when not already waiting (or in freeze)\n\t\t */\n\t\tconst isInSuppressTimeThreshold = _now < this.lastUpdateTime + this.refreshInterval;\n\t\tconst timeForSuppression = this.lastUpdateTime + this.refreshInterval - _now;\n\t\tconst untilNextUpdateInterval = isNewTimestamp && isFreezeAction ? this.freezeTimeThreshold : (isInSuppressTimeThreshold ? timeForSuppression: 1);\n\n\t\tconsole.debug(`EM RefreshList: ( new timestamp ${isNewTimestamp},[and] isFreezeAction: ${isFreezeAction} ) OR ( internal timer ${this.internalTimer},[and] is new message ${newMessage}, last update time ${this.lastUpdateTime} )`);\n\n\t\t// I'm not in suppress or there is no timer and we did not recieve a message... we already have a timer, no need to create a new one (already in freeze)\n\t\t// if not in suppress time threshold (>5 sec) \n\t\t//    or new time stamp and freeze action (this is a new freeze)\n\t\t//    or there was no timer and this is a new message\n\t\tif ((isNewTimestamp && isFreezeAction) || (!this.internalTimer && newMessage)) {\n\t\t\tconsole.debug(`EM RefreshList: setting new debounce timer with (${untilNextUpdateInterval}) msec`);\n\t\t\tthis.setInternalTimer(untilNextUpdateInterval, dispatch);\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.stopSubscribe(this.props.dispatch, true);\n\t}\n\n\trender() {\n\t\treturn null;\n\t}\n}\n\nEmRefreshAlertList.style = style;\nexport default EmRefreshAlertList;","module.exports = __TECTONIC__react;","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/dist/cjs.js??ref--6-3!./_emRefreshAlertList.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","module.exports = __TECTONIC__lodash_4_17_4;","export const ListFiltersGQLRead = `\nquery ($sys_id: String) {\n\tGlideRecord_Query {\n\t\tem_alert_lists_auto_refresh(sys_id: $sys_id) {\n\t\t\t\t\t_results {\n\t\t\t\t\tworkspace_list{\n\t\t\t\t\tlabel\n\t\t\t\t\tdisplayValue\n\t\t\t\t\tvalue\n\t\t\t\t  }\n\t\t\t\t  \n\t\t\t\t  my_workspace_list{\n\t\t\t\t\tlabel\n\t\t\t\t\tdisplayValue\n\t\t\t\t\tvalue\n\t\t\t\t  }\n\t\t\t\t  \n\t\t\t\t  \trefresh_enabled{\n\t\t\t\t\tlabel\n\t\t\t\t\tdisplayValue\n\t\t\t\t\tvalue\n\t\t\t\t  }\n\t\t\t\t\n\t\t\t\t  \tsys_id{\n\t\t\t\t\tlabel\n\t\t\t\t\tdisplayValue\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t \trefresh_interval{\n\t\t\t\t\tlabel\n\t\t\t\t\tdisplayValue\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\t   \n\t\t\t}\n\t\t}\n\t}\n}\n`;\n\n\nexport const ListPropertiesGQLRead = `\nquery ($queryConditions: String!) {\n\tGlideRecord_Query {\n\t\tsys_properties(queryConditions: $queryConditions) {\n\t\t\t\t\t_results {\n\t\t\t\t\tname{\n\t\t\t\t\tlabel\n\t\t\t\t\tdisplayValue\n\t\t\t\t\tvalue\n\t\t\t\t  }\t\t  \t\t\t \n\t\t\t\t  value{\n\t\t\t\t\tlabel\n\t\t\t\t\tdisplayValue\n\t\t\t\t\tvalue\n\t\t\t\t  }\t\t\t \n\t\t\t\t   \n\t\t\t}\n\t\t}\n\t}\n}\n`;\n\n\n\n","module.exports = __TECTONIC__$servicenow_ui_effect_amb;","module.exports = __TECTONIC__$servicenow_ui_effect_graphql;","import {createPreSourceBehavior} from 'sn-uxpage-presource';\n\nconst EM_HIDDEN_PRESOURCE_KEY = 'emHiddenSaHash';\nexport const emRefreshAlertPresourceBehavior = createPreSourceBehavior(\n\t'sn-workspace-list-module',\n\t{\n\t\tname: EM_HIDDEN_PRESOURCE_KEY,\n\t\ttransform: data => {\n\t\t\treturn {data};\n\t\t}\n\t}\n);\n"],"sourceRoot":""}