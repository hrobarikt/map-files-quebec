{"version":3,"sources":["webpack://__TECTONIC__sn_wsd_components/webpack/bootstrap","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_ui_renderer_snabbdom\"","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_ui_core\"","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__sn_translate\"","webpack://__TECTONIC__sn_wsd_components/./node_modules/css-loader/lib/css-base.js","webpack://__TECTONIC__sn_wsd_components/./src/utils/generalUtils.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/constants.js","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_button\"","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_ui_effect_http\"","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/actions.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-reservation-summary/actions.js","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_icon\"","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_heading\"","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-price-label/index.js","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__lodash_4_17_4[\\\"isEmpty\\\"]\"","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_text_link\"","webpack://__TECTONIC__sn_wsd_components/./src/utils/moaDateTimeUtils.js","webpack://__TECTONIC__sn_wsd_components/./src/office/officeHelper.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-manager/actions.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-reservation-summary/constants.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-layout/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-result/actions.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-filter/actions.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search/actions.js","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_loader\"","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__lodash_4_17_4\"","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-input-wrapper/index.js","webpack://__TECTONIC__sn_wsd_components/./src/constants.js","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__lodash_4_17_4[\\\"cloneDeep\\\"]\"","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-space-card/actions.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-filter/constants.js","webpack://__TECTONIC__sn_wsd_components/./src/utils/multiEffectStateWrapper.js","webpack://__TECTONIC__sn_wsd_components/./src/office/officeUtils.js","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-700italic.woff","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-700italic.woff2","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-700.woff","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-700.woff2","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-600italic.woff","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-600italic.woff2","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-600.woff","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-600.woff2","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-italic.woff","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-italic.woff2","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-regular.woff","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-regular.woff2","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-300.woff","webpack://__TECTONIC__sn_wsd_components/./src/fonts/source-sans-pro-v13-latin-300.woff2","webpack://__TECTONIC__sn_wsd_components/./node_modules/css-loader/lib/url/escape.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/styles.scss?e2d2","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-diagnostic/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-diagnostic/styles.scss?a214","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-diagnostic/actionHandlers.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-diagnostic/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-diagnostic/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-manager/actionHandlers.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-manager/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-manager/styles.scss?878b","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-service-request-card/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-service-request-card/styles.scss?6886","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-service-request-card/actions.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-input-wrapper/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-input-wrapper/styles.scss?5095","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-input-wrapper/view.js","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__moment_2_24_0\"","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-service-request-card/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-service-request-card/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-header/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-header/styles.scss?02ff","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-header/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-manager/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-manager/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-reservation-summary/effects/extraServiceRequestEffects.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-reservation-summary/effects/reservationEffects.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-reservation-summary/actionHandlers.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-reservation-summary/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-reservation-summary/styles.scss?b013","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-space-summary-card/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-space-summary-card/styles.scss?aef9","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-space-summary-card/actions.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-summary/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-summary/styles.scss?9085","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-summary/actionHandlers.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-price-label/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-price-label/styles.scss?c4c6","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-price-label/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-summary/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-services-summary/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-space-summary-card/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-space-summary-card/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-reservation-summary/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-reservation-summary/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search/effects/searchEffect.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search/actionHandlers.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-result/actionHandlers.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-result/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-result/styles.scss?9e19","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-space-card/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-space-card/styles.scss?7f37","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_highlighted_value\"","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_record_checkbox\"","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-space-card/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-space-card/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-layout/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-layout/styles.scss?4a0d","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_label_value\"","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-result/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-result/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-filter/styles.scss","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-filter/styles.scss?0538","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_input\"","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_record_field_lookup_connected\"","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-filter/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-filter/actionHandlers.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search-filter/index.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search/view.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-search/index.js","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_modal\"","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__$servicenow_now_alert\"","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/view.js","webpack://__TECTONIC__sn_wsd_components/external \"__TECTONIC__moment_timezone_0_5_33\"","webpack://__TECTONIC__sn_wsd_components/./src/utils/htmlUtils.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/effects/loadReservationEffects.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/effects/locationEffects.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/effects/availabilityEffect.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/effects/settingEffect.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/actionHandlers.js","webpack://__TECTONIC__sn_wsd_components/./src/office/officeLoader.js","webpack://__TECTONIC__sn_wsd_components/./src/office/officeRestService.js","webpack://__TECTONIC__sn_wsd_components/./src/sn-wsd-moa-app/index.js","webpack://__TECTONIC__sn_wsd_components/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__TECTONIC__$servicenow_ui_renderer_snabbdom","__TECTONIC__$servicenow_ui_core","__TECTONIC__sn_translate","useSourceMap","list","toString","this","map","item","content","cssMapping","btoa","sourceMapping","sourceMap","unescape","encodeURIComponent","JSON","stringify","toComment","sourceURLs","sources","source","sourceRoot","concat","join","cssWithMappingToString","mediaQuery","alreadyImportedModules","length","id","push","filterSelectedReservables","safeBool","is_selected","resolveListIntoStr","arr","delimiter","isArrayHasElement","reduce","accumulator","element","index","_lodash","isEmpty","mapObject","obj","callback","objEntries","entries","_ref","_ref2","_slicedToArray","objKey","objValue","fromEntries","generateGUID","dt","Date","getTime","replace","Math","random","floor","calculateServiceCategoryQuantity","addedServices","calculateTotalNumberInServiceCategory","calculateServiceCategoryPrice","isEqual","val1","val2","caseInsensitive","toLowerCase","isValidNumber","input","number","Number","isNaN","constructLocationDescription","locationDetails","existsInWsd","_snTranslate","result","forEach","field","display_value","isRequestUnauthorized","code","text","String","indexOf","trim","Array","isArray","totalVal","addedService","val","parseFloat","cancelFlag","flexibleServiceId","CONSTANTS","OFFICEJS_URL","SUPPORTED_VERIONS","OUTLOOK_PLATFORM_TYPE","RECURRENCE_TYPES","SINGLE","MASTER","OCCURRENCE","NA","DEFAULT_SUBJECT","VIEWS","SEARCH_FILTER","SEARCH_RESULTS","SUMMARY","SERVICES_MANAGER","__TECTONIC__$servicenow_now_button","__TECTONIC__$servicenow_ui_effect_http","ACTIONS","RESERVABLES_PAGE_LOADED","RESERVABLE_SELECTED","ON_TIME_CHANGED","ON_ENHANCED_LOCATIONS_CHANGED","ON_RECURRENCE_CHANGED","LOAD_SETTINGS","ON_LOAD_SETTINGS_SUCCESS","ON_LOAD_SETTINGS_FAILED","SETTINGS_LOADED","TRIGGER_REFRESH_AVAILABLITIES","GET_AVAILABILITY","ON_GET_AVAILABILITY_SUCCESS","ON_GET_AVAILABILITY_FAILED","TRIGGER_NAVIGATION","TRIGGER_LOAD_LOCATIONS_DETAILS","LOAD_LOCATIONS_DETAILS","ON_LOAD_LOCATIONS_DETAILS_SUCCESS","ON_LOAD_LOCATIONS_DETAILS_FAILURE","ON_SAVE_RESERVABLES","SELECT_LOCATION_FOR_EDITING_SERVICES","UPDATE_SERVICE_REQUESTS","OPEN_NOW_MODAL","CLOSE_NOW_MODAL","NOW_MODAL_OPENED_SET","NOW_MODAL_FOOTER_ACTION_CLICKED","TRIGGER_UNAUTHORIZED_MODAL","CLOSE_APP","TRIGGER_LOAD_RESERVATION","LOAD_RESERVATION","LOAD_RESERVATION_SUCCESS","LOAD_RESERVATION_FAILURE","LOAD_RESERVATION_SERVICE_REQUESTS","LOAD_RESERVATION_SERVICE_REQUESTS_SUCCESS","LOAD_RESERVATION_SERVICE_REQUESTS_FAILURE","LOAD_FULL_RESERVATION_COMPLETED","LOAD_FULL_RESERVATION_FAILURE","UPDATE_SEARCH_REQUEST","RESET_LOADED_RESERVABLES","SAVE_RESERVATION","SAVE_RESERVATION_SUCCESS","SAVE_RESERVATION_FAILURE","INSERT_RESERVATION","UPDATE_RESERVATION","INSERT_MULTI_RESERVATION","UPDATE_MULTI_RESERVATION","SUBMIT_EXTRA_SERVICES_REQUEST","SUBMIT_EXTRA_SERVICES_REQUEST_SUCCESS","SUBMIT_EXTRA_SERVICES_REQUEST_FAILURE","ALL_SUBMIT_SERVICE_REQUEST_SUCCESS","ALL_SUBMIT_SERVICE_REQUEST_FAILURE","__TECTONIC__$servicenow_now_icon","__TECTONIC__$servicenow_now_heading","_uiCore","_view","createCustomElement","renderer","type","snabbdom","properties","default","orientation","label","view","styles","__TECTONIC__lodash_4_17_4","__TECTONIC__$servicenow_now_text_link","convertToUTC","date","moment","utc","format","formatUTCDateTimeForUser","dateTime","timeZone","formattedDateTime","tz","getOfficeHelper","MOAData","officeHelper","Error","initializeOfficeHelper","Office","OfficeHelper","_constants","appointment","ewsUrl","_classCallCheck","SAVE_TEXT_FORMAT","SAVE_TEXT_REGEX","RegExp","mailboxItem","context","mailbox","ewsId","_this","platformType","total","current","requirements","isSetSupported","fields","getItemData","apply","values","fieldData","getRecurringData","recurrenceInfo","getItemId","catch","getStart","getEnd","start","end","recurrence","seriesId","calculateAppointmentType","base","prepareAppointment","then","console","log","error","_context3","t0","reject","Promise","resolve","_this2","loadCustomPropertiesAsync","_ref5","_asyncToGenerator","regeneratorRuntime","mark","_callee4","asyncResult","customProps","wrap","_context4","prev","next","status","AsyncResultStatus","Failed","abrupt","saveAppointmentAsync","sent","set","debug","saveAsync","stop","_x","arguments","currentSubject","match","getSubject","_ref7","_callee6","currentAppointmentSubject","newSubject","_context6","generateSubject","setItemData","saveMailboxItemAsync","_this3","_x2","_this4","subject","requiredAttendees","newAttendee","getRequiredAttendees","some","attendee","emailAddress","setRequiredAttendees","attendeeEmail","attendeeIndex","findIndex","splice","roomEmail","enhancedLoc","MailboxEnums","LocationType","Room","addAsync","removeAsync","roomName","supportedVersions","addEnhancedLocation","requiredAttendee","displayName","recipientType","addRequiredAttendee","removeEnhancedLocation","removeRequiredAttendee","_getItemDataSingle","promises","_this5","all","_this6","getAsync","message","ex","_this7","getItemIdAsync","_this8","setAsync","handler","_subscribeChangeHandler","EventType","AppointmentTimeChanged","EnhancedLocationsChanged","_this9","RecipientsChanged","_ref27","_callee27","_context27","data","changedRecipientFields","_x18","_this10","RecurrenceChanged","_ref28","_callee28","_context28","_x19","eventType","_this11","addHandlerAsync","window","ui","closeContainer","ACCORDION_CLICK","ADD_EXTRA_SERVICE_REQUEST","UPDATE_EXTRA_SERVICE_REQUEST","REMOVE_EXTRA_SERVICE_REQUEST","SAVE_SERVICE_REQUESTS","RESERVATION_SUMMARY","SAVE_IN_PROGRESS","SAVE_SUCCESSFUL","SAVE_FAILED","state","_uiRendererSnabbdom","createElement","className","page","slots","layoutHeader","layoutBody","layoutFooter","TRIGGER_SEARCH","NOW_BUTTON_BARE_CLICKED","NOW_INPUT_CHANGED","RECORD_PICKER_VALUE_CHANGED","ON_SEARCH_BUTTON_CLICKED","REQUEST_SPACES","ON_SEARCH_SUCCESS","ON_SEARCH_FAILED","__TECTONIC__$servicenow_now_loader","mandatory","disabled","showError","empty","defaultSlot","RESERVATION_TYPE_SPACE","RESERVATION_SUB_TYPES","MULTI_PARENT","RESERVATION_PURPOSE_MEETING","RESERVATION_SOURCE_EXCHANGE","RESERVATION_SUB_SOURCE_OUTLOOK_ADDIN","RESERVATION_LAST_UPDATED_SOURCE_EXTERNAL_PROVIDER","RESERVATION_SENSITIVITY","NORMAL","PRIVATE","OFFICE","SENSITIVITY","TABLES","BUILDING","FLOOR","RECORD_PICKER","MultiEffectStateWrapper","completedCountKey","totalCountKey","isFailedKey","successAction","failureAction","_completedCountKey","_totalCountKey","_isFailedKey","_successAction","_failureAction","dispatch","success","newCompletedCount","failed","dispatchOnComplete","setTimeout","getWSDSensitivity","sensitivity","url","test","slice","escape","_officeHelper","COMPONENT_BOOTSTRAPPED","actionTypes","actionHandlers","updateState","userConfig","env","host","location","href","browser","isEdge","document","documentMode","StyleMedia","navigator","userAgent","_getBrowser","agent","temp","exec","appName","appVersion","_getFriendlyUseragent","isExpanded","settingsLoaded","on-click","Fragment","colspan","timezone","date_format","time_format","_actionHandlers","initialState","_actions","utils","COMPONENT_DOM_READY","CATEGORY_MODEL","comment","categoryFriendlyName","categoryCurrencyCode","totalPrice","totalQuantity","hasErrors","SERVICE_REQUEST_MODEL","clientId","category","subCategory","flexibleServiceName","servicePrice","currencyCode","quantity","_updateCalculatedStateProperties","selectedServices","selectServiceEntryId","selectedServiceEntryValue","_extends","_defineProperty","servicesManager","action","payload","shadowRoot","querySelector","focus","_ref3","_action$payload","selectedCategory","_ref4","_action$payload2","categoryId","subCategoryId","flexible_services","find","locationCategory","flexible_service","sub_category","categorySelectedServices","_cloneDeep2","currency_code","newExtraServiceRequest","_toConsumableArray","newServiceRequestState","serviceRequest","_newServiceRequestSta","oldAddedServices","addedServicesIndex","_updateServiceRequestCalculatedProperties","_updateAddedServicesState","_ref6","requestId","filter","locationId","sys_id","locationExtraServiceRequests","newSelectedServices","_areServiceRequestsValid","subTotalPrice","newSubTotalPrice","categoryEntry","_ref8","_ref9","_state$properties","containerClassNames","mandatoryClassNames","size","icon","__TECTONIC__moment_2_24_0","_moaDateTimeUtils","deliveryTime","subCategoryLabel","deliveryTimeDisplay","time_simple_format","variant","on-change","event","onSelectedServiceChanged","elm","services","service","selected","constructFlexibleServiceOptionsView","min","quantityField","newQuantity","updateServiceRequest","onQuantityChanged","toFixed","commentOpen","autofocus","newState","selectedService","flexibleService","price_per_unit","onBackCallback","onBackClickHandler","onBack","bare","title","triggers","reservable","tabindex","slot","categorySelection","categoryIsActive","categoryClassName","categoryName","getCategoryPriceLabel","getCategoryMetadata","hidePadding","config-aria","aria-label","selectedCategoryServices","hasServices","dispatchAddExtraServiceRequest","additional_text","generateCategoryServiceRequests","generateInitialServicesView","generateCategoryContent","generateCategory","class","generateErrorBody","actions","_uiEffectHttp","submitExtraServicesRequest","createHttpEffect","EXTRA_SERVICE_REQUEST_BASE_URL","method","dataParam","successActionType","errorActionType","insertReservation","RESERVATION_BASE_URL","updateReservation","pathParams","insertMultiReservation","MULTI_RESERVATION_BASE_URL","updateMultiReservation","_callee2","_ref14","selectedReservables","_properties$appointme","iCalUId","reservableModule","_properties$userConfi","timeFormat","reservation","reservationId","reservationSubject","reservationSensitivity","reservationLocations","validSelectedReservables","isMulti","isUpdate","reservationIsMulti","reservationObj","_context2","locations","external_ical","reservation_type","Constants","reservation_purpose","sub_source","last_updated_source","last_updated_sub_source","reservables","selectedReservable","number_of_attendees","reservable_module","_constants3","_constants4","_reservationEffects","_extraServiceRequestEffects","COMPONENT_PROPERTY_CHANGED","multiEffectStateWrapper","rsvSummary","locationsDetails","_checkAndMoveToSearchResultView","activeView","_isEmpty3","isEligibleForSubmission","_checkSubmissionEligibility","_callee","_len","actionInputs","_key","_actionInputs","_actionInputs$","requestObj","_context","createReservationObject","RESERVATION_SUMMARY_CONSTANTS","savedReservables","reset","undefined","_action$payload$resul","successfulReservations","parent","reservationsServiceCategories","reservableId","locationServiceCategories","locationsServiceCategories","reservationLocationId","serviceCategories","serviceCategory","newAddedServices","filterServicesToCancel","serviceRequestsSentCount","blockerSources","addedServiceCategories","_ref16","_ref17","flexibleServices","_ref18","extraServiceRequestId","prepareServiceCategoriesForSubmission","statusCode","statusText","handleRequestComplete","_ref10","_ref11","_ref12","_ref13","APP_CONSTANTS","is_available","SUB_CATEGORY_MODEL","servicesLabels","servicesIds","servicesSummary","serviceRequests","serviceRequestsBySubCategories","subCategoryServiceRequests","_state$properties$ser","_state$properties$ser2","isOpen","extraServiceRequests","disableServices","resolveReservableForView","subtotalDetails","extraServiceRequest","categoryNames","keys","price","constructSubtotalDetails","disabledClass","isAvailable","serviceCategoriesKeys","reservableHasServices","serviceCategoriesKey","configAria","availablityLabel","color","show-icon","capacity","description","spaceCategoryExtraServiceRequests","flexibleServiceCategory","getUnavailableViewForServiceAction","iconStart","currentLocationSysId","reasonIsRecurring","details","_constants2","viewInputs","generateSaveInProgressView","_len2","_key2","saveServicesFailed","_state$properties2","savedReservable","serviceCategoryClassNames","serviceCategoryText","handleEditReservationButtonClicked","generateReservationSavedBody","_len3","_key3","generateReservationFailedBody","generateReservationSummary","wontWrap","tabIndex","hook-insert","vnode","reloadReservation","serviceRequestSentCount","serviceRequestsCompletedCount","searchReservables","queryParams","batch","_searchEffect","searchRequest","resetSearchPagination","q","searchRequestParam","reservationSysIds","reservedReservableSysIds","selectedReservedReservables","selectedReservedReservablesStr","defaultReservableModule","_constructEncodedQuery","include_standard_services","include_reservable_purposes","pageSize","page_size","loc","filterSelectedReservedReservables","reservation_ids","reserved_reservables","next_item_index","nextItemIndex","searchHasMore","reservableUnits","hasInitSearched","hasMore","headerLabel","_properties$searchReq","building","floors","reservedReservableSysId","resultWrapper","__TECTONIC__$servicenow_now_highlighted_value","__TECTONIC__$servicenow_now_record_checkbox","isEligibleForSubmit","reservableCssClass","onValueChange","readonly","__TECTONIC__$servicenow_now_label_value","_state$properties$sea","hasSelectedReservables","floorNames","displayValue","constructAvailableSpacesView","__TECTONIC__$servicenow_now_input","__TECTONIC__$servicenow_now_record_field_lookup_connected","isValidCapacity","tableName","fieldName","required","additionalQueryString","multiSelection","invalid","fieldValue","showFilter","__TECTONIC__$servicenow_now_modal","__TECTONIC__$servicenow_now_alert","appInitCompleted","enableDiagnostic","_state$notificationCo","notificationConfig","opened","footerActions","renderActiveView","getLoadingIndicator","msg","appInitSuccess","getActiveView","expanded","__TECTONIC__moment_timezone_0_5_33","applyDefaultNowModalStyles","nowModalComponent","nowModalShadowRoot","nowModal","nowModalDialog","nowModalHeading","nowModalBody","nowModalFooterButton","nowButton","assign","style","display","alignItems","justifyContent","width","height","fontSize","loadReservation","loadReservationServiceRequests","getLocationsDetails","getAvailability","getSettings","requireRefreshEnhancedLocation","subscribeTimeChanges","res","subscribeEnhancedLocationChanges","enhancedLocations","subscribeRecurrenceChanged","rec","_settingEffect","_availabilityEffect","_locationEffects","_loadReservationEffects","_htmlUtils","COMPONENT_RENDERED","_initialCompleted","nowModalStylingApplied","defaultReservableModuleSysId","initSearchConfig","newReservables","default_reservable_module","init_search_config","enable_diagnostic","user_config","_completeIntialSetup","searchConfigResult","_fetchSearchConfig","_mergeReservables","isSyncableAppointment","_setupSubscribers","initSearchRequestWithLocationsCompleted","_refreshAvailablities","_action$payload3","payloadReservables","oldReservables","selectedReservableEmails","email","resultReservables","matchedResult","fromOutlook","_fetchSearchDataToReservables","tobeAddedReservables","selectedReservableEmail","foundSelectedReservable","addRoomToMeeting","removeRoomFromMeeting","_ref15","onlySelectedItems","_state$appointment","_refreshAvailablitiesUsingState","_ref19","_loop","reservableIdx","_ref20","_action$payload4","_ref21","_ref22","selectedReservableIdsArr","reservableIdsArr","locationDetailsIds","locationDetailsToLoad","selectedReservableId","includes","ids","reservable_module_sys_id","include_flexible_services","include_layouts","_ref23","locationsDetailsPayload","_ref24","locDetail","_getLocationDetailsByEmail","updateSearchRequestObj","locationDetailsWithBuilding","srLocationDetails","_locationDetailsWithB","buildingValue","buildingDisplayValue","_getSearchRequestBySelectedReservables","_ref25","_action$payload5","_ref26","extraServiceRequestsForSingleLocation","_action$payload6","_ref29","_ref30","footerAction","origin","_ref31","_action$payload7","_ref32","closeAddin","_ref34","_callee3","_ref33","_x3","_ref35","_ref36","_ref37","_ref38","reservedLocations","active","_ref39","rl","cloneDeep","is_reserved","loadReservationServicesTotalCount","_loadServiceRequests","_ref40","_ref41","_ref42","_action$payload$resul2","locationServiceCategory","_objectWithoutProperties","_ref43","_action$payload8","_ref44","_ref45","_action$payload9","newSearchRequest","_ref46","config","configBuilding","configFloor","el","prop","locationIdx","locationIdentifier","tobeCheckedReservables","isValidEmail","isIncluded","reservableIds","requestData","reservable_ids","reservationIds","acc","_getReservationSysIdsFromReserved","isCompleted","isSuccessful","_getInitialFinalStateObj","_ref48","loadJS","onReady","body","scriptTag","src","onload","onreadystatechange","appendChild","OfficeRestService","DEFAULT_MS_REST_URL","eventId","convertToRestId","RestVersion","v2_0","msRestUrl","restUrl","_requestToOffice","_getAccessToken","accessToken","fetch","headers","Headers","Authorization","Content-Type","response","json","getCallbackTokenAsync","isRest","_officeLoader","loadOffice","initComponent","initialAppData","loadReservationServicesCompletedCount","loadReservationServicesFailed","officeRestService","initializeAppointment","getMeetingServerInfo","warn","office","times","apptResponse","seriesMasterId","t1","t2","t3","_officeUtils","t4","getFullMeetingInfo","Recurrence","SeriesMasterId","Sensitivity","t5","_officeRestService","initApp"],"mappings":"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","file":"sn-wsd-components.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 130);\n","module.exports = __TECTONIC__$servicenow_ui_renderer_snabbdom;","module.exports = __TECTONIC__$servicenow_ui_core;","module.exports = __TECTONIC__sn_translate;","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","import { t } from 'sn-translate';\n\nimport { isEqual as _isEqual, isEmpty as _isEmpty } from 'lodash';\n\n/**\n* Filter on reservables that are selected\n* @param {*}\n* @return {boolean}\n*/\nexport function filterSelectedReservables(item) {\n\treturn safeBool(item.is_selected);\n}\n\n/**\n * Resolve a list into a string\n * @param {Array} arr\n * @param {string} key\n * @param {string} delimiter\n * @return {string}\n */\nexport function resolveListIntoStr(arr, key, delimiter) {\n\tif (!isArrayHasElement(arr) || !key)\n\t\treturn '';\n\n\tdelimiter = delimiter || ',';\n\n\treturn arr.reduce(function (accumulator, element, index) {\n\t\tif (_isEmpty(element[key]))\n\t\t\treturn accumulator;\n\n\t\treturn index === 0 ? element[key] : accumulator + delimiter + element[key];\n\t}, '');\n}\n\n/**\n* check if a value is a true or false\n* @param {*} value \n* @return {boolean}\n*/\nexport function safeBool(value) {\n\tif (!value || typeof value === 'undefined')\n\t\treturn false;\n\n\treturn ['true', '1'].indexOf(String(value).toLowerCase().trim()) >= 0;\n}\n\n/**\n* Validate that param is an array with at least one element\n* @param {Array}\n* @return {boolean}\n*/\nexport function isArrayHasElement(arr) {\n\treturn arr && Array.isArray(arr) && arr.length > 0;\n}\n\n/**\n * Applies the callback to each of the values in the object.\n * @param {object} obj \n * @param {MapObjectCallback}  \n * @returns {object}\n */\nexport function mapObject(obj, callback) {\n\tif (!obj || !callback)\n\t\treturn obj;\n\n\tlet objEntries = Object.entries(obj);\n\tobjEntries = objEntries.map(([objKey, objValue]) => [objKey, callback(objKey, objValue)]);\n\treturn Object.fromEntries(objEntries);\n}\n\n/**\n * Generates a GUID\n * @returns {string}\n */\nexport function generateGUID() {\n\tvar dt = new Date().getTime();\n\tvar uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tvar r = (dt + Math.random()*16)%16 | 0;\n\t\tdt = Math.floor(dt/16);\n\t\treturn (c=='x' ? r :(r&0x3|0x8)).toString(16);\n\t});\n\n\treturn uuid;\n}\n\n/**\n * Calculates the totalQuantity for a serviceCategory\n * @param {*} addedServices \n * @returns {number}\n */\nexport function calculateServiceCategoryQuantity(addedServices) {\n\treturn calculateTotalNumberInServiceCategory(addedServices, 'quantity');\n}\n\n/**\n * Calculates the totalPrice for a serviceCategory\n * @param {*} addedServices \n * @returns {number}\n */\nexport function calculateServiceCategoryPrice(addedServices) {\n\treturn calculateTotalNumberInServiceCategory(addedServices, 'totalPrice');\n}\n\nexport function calculateTotalNumberInServiceCategory(addedServices, field) {\n\treturn addedServices.reduce((totalVal, addedService) => {\n\t\tconst val = parseFloat(addedService[field]);\n\t\tif (addedService.cancelFlag || isNaN(val) || !addedService.flexibleServiceId)\n\t\t\treturn  totalVal;\n\n\t\treturn val + totalVal;\n\t}, 0);\n}\n\n/**\n * If values are string, and user allows caseInsensitive, then checks if the strings match without case, else uses lodash isEqual\n * @param {*} val1\n * @param {*} val2\n * @param {boolean} [caseInsensitive]\n * @returns {boolean}\n */\nexport function isEqual(val1, val2, caseInsensitive) {\n\tif (caseInsensitive && typeof val1 === 'string' && typeof val2 === 'string')\n\t\treturn val1.toLowerCase() === val2.toLowerCase();\n\n\treturn _isEqual(val1, val2);\n}\n\n/**\n * Check if input is a valid number\n * @param {*} input \n * @return {boolean}\n */\nexport function isValidNumber(input) {\n\tconst number = Number(input);\n\treturn !isNaN(number);\n}\n\n/**\n * @callback MapObjectCallback\n * @param {string} id\n * @param {*} value\n */\n\n/**\n * Construct a full location string - contains campus, building and floor\n * @param {*} {locationDetails}\n * @return {string}\n */\n export function constructLocationDescription(locationDetails) {\n\tif (!locationDetails || !locationDetails.existsInWsd)\n\t\treturn t('Item can not be recognized in WSD');\n\n\tconst fields = ['campus', 'building', 'floor'];\n\tconst result = [];\n\n\tfields.forEach(field => {\n\t\tif (locationDetails[field] && locationDetails[field].display_value)\n\t\t\tresult.push(locationDetails[field].display_value);\n\t});\n\n\treturn result.join(', ');\n}\n\n/**\n * Check whether the request was unauthorized (based on status code/text)\n * @param {string} code\n * @param {string} text\n * @return {boolean}\n */\nexport function isRequestUnauthorized(code, text) {\n\treturn code === 401 || String(text.toLowerCase()) === 'unauthorized';\n}","export const CONSTANTS = {\n\tOFFICEJS_URL: 'https://appsforoffice.microsoft.com/lib/1/hosted/office.js',\n\tSUPPORTED_VERIONS: ['1.7', '1.8'],\n\tOUTLOOK_PLATFORM_TYPE: 'Mailbox',\n\tRECURRENCE_TYPES: {\n\t\tSINGLE: 'single',\n\t\tMASTER: 'master',\n\t\tOCCURRENCE: 'occurrence',\n\t\tNA: 'na'\n\t},\n\tDEFAULT_SUBJECT: `Draft`,\n\tVIEWS: {\n\t\tSEARCH_FILTER: 'search_filter',\n\t\tSEARCH_RESULTS: 'search_results',\n\t\tSUMMARY: 'summary',\n\t\tSERVICES_MANAGER: 'services_manager'\n\t}\n}\n","module.exports = __TECTONIC__$servicenow_now_button;","module.exports = __TECTONIC__$servicenow_ui_effect_http;","export const ACTIONS = {\n\tRESERVABLES_PAGE_LOADED: 'RESERVABLES_PAGE_LOADED',\n\tRESERVABLE_SELECTED: 'RESERVABLE_SELECTED',\n\tON_TIME_CHANGED: 'ON_TIME_CHANGED',\n\tON_ENHANCED_LOCATIONS_CHANGED: 'ON_ENHANCED_LOCATIONS_CHANGED',\n\tON_RECURRENCE_CHANGED: 'ON_RECURRENCE_CHANGED',\n\tLOAD_SETTINGS: 'LOAD_SETTINGS',\n\tON_LOAD_SETTINGS_SUCCESS: 'ON_LOAD_SETTINGS_SUCCESS',\n\tON_LOAD_SETTINGS_FAILED: 'ON_LOAD_SETTINGS_FAILED',\n\tSETTINGS_LOADED: 'SETTINGS_LOADED',\n\tTRIGGER_REFRESH_AVAILABLITIES: 'TRIGGER_REFRESH_AVAILABLITIES',\n\tGET_AVAILABILITY: 'GET_AVAILABILITY',\n\tON_GET_AVAILABILITY_SUCCESS: 'ON_GET_AVAILABILITY_SUCCESS',\n\tON_GET_AVAILABILITY_FAILED: 'ON_GET_AVAILABILITY_FAILED',\n\tTRIGGER_NAVIGATION: 'TRIGGER_NAVIGATION',\n\tTRIGGER_LOAD_LOCATIONS_DETAILS: 'TRIGGER_LOAD_LOCATIONS_DETAILS',\n\tLOAD_LOCATIONS_DETAILS: 'LOAD_LOCATIONS_DETAILS',\n\tON_LOAD_LOCATIONS_DETAILS_SUCCESS: 'ON_LOAD_LOCATIONS_DETAILS_SUCCESS',\n\tON_LOAD_LOCATIONS_DETAILS_FAILURE: 'ON_LOAD_LOCATIONS_DETAILS_FAILURE',\n\tON_SAVE_RESERVABLES: 'ON_SAVE_RESERVABLES',\n\tSELECT_LOCATION_FOR_EDITING_SERVICES: 'SELECT_LOCATION_FOR_EDITING_SERVICES',\n\tUPDATE_SERVICE_REQUESTS: 'UPDATE_SERVICE_REQUESTS',\n\tOPEN_NOW_MODAL: 'OPEN_NOW_MODAL',\n\tCLOSE_NOW_MODAL: 'CLOSE_NOW_MODAL',\n\tNOW_MODAL_OPENED_SET: 'NOW_MODAL#OPENED_SET',\n\tNOW_MODAL_FOOTER_ACTION_CLICKED: 'NOW_MODAL#FOOTER_ACTION_CLICKED',\n\tTRIGGER_UNAUTHORIZED_MODAL: 'TRIGGER_UNAUTHORIZED_MODAL',\n\tCLOSE_APP: 'CLOSE_APP',\n\tTRIGGER_LOAD_RESERVATION: 'TRIGGER_LOAD_RESERVATION',\n\tLOAD_RESERVATION: 'LOAD_RESERVATION',\n\tLOAD_RESERVATION_SUCCESS: 'LOAD_RESERVATION_SUCCESS',\n\tLOAD_RESERVATION_FAILURE: 'LOAD_RESERVATION_FAILURE',\n\tLOAD_RESERVATION_SERVICE_REQUESTS: 'LOAD_RESERVATION_SERVICE_REQUESTS',\n\tLOAD_RESERVATION_SERVICE_REQUESTS_SUCCESS: 'LOAD_RESERVATION_SERVICE_REQUESTS_SUCCESS',\n\tLOAD_RESERVATION_SERVICE_REQUESTS_FAILURE: 'LOAD_RESERVATION_SERVICE_REQUESTS_FAILURE',\n\tLOAD_FULL_RESERVATION_COMPLETED: 'LOAD_FULL_RESERVATION_COMPLETED',\n\tLOAD_FULL_RESERVATION_FAILURE: 'LOAD_FULL_RESERVATION_FAILURE',\n\tUPDATE_SEARCH_REQUEST: 'UPDATE_SEARCH_REQUEST',\n\tRESET_LOADED_RESERVABLES: 'RESET_LOADED_RESERVABLES'\n};\n","export const ACTIONS = {\n\tOPEN_NOW_MODAL: 'OPEN_NOW_MODAL',\n\tTRIGGER_NAVIGATION: 'TRIGGER_NAVIGATION',\n\tTRIGGER_REFRESH_AVAILABLITIES: 'TRIGGER_REFRESH_AVAILABLITIES',\n\tSAVE_RESERVATION: 'SAVE_RESERVATION',\n\tSAVE_RESERVATION_SUCCESS: 'SAVE_RESERVATION_SUCCESS',\n\tSAVE_RESERVATION_FAILURE: 'SAVE_RESERVATION_FAILURE',\n\tINSERT_RESERVATION: 'INSERT_RESERVATION',\n\tUPDATE_RESERVATION: 'UPDATE_RESERVATION',\n\tINSERT_MULTI_RESERVATION: 'INSERT_MULTI_RESERVATION',\n\tUPDATE_MULTI_RESERVATION: 'UPDATE_MULTI_RESERVATION',\n\tSUBMIT_EXTRA_SERVICES_REQUEST: 'SUBMIT_EXTRA_SERVICES_REQUEST',\n\tSUBMIT_EXTRA_SERVICES_REQUEST_SUCCESS: 'SUBMIT_EXTRA_SERVICES_REQUEST_SUCCESS',\n\tSUBMIT_EXTRA_SERVICES_REQUEST_FAILURE: 'SUBMIT_EXTRA_SERVICES_REQUEST_FAILURE',\n\tALL_SUBMIT_SERVICE_REQUEST_SUCCESS: 'ALL_SUBMIT_SERVICE_REQUEST_SUCCESS',\n\tALL_SUBMIT_SERVICE_REQUEST_FAILURE: 'ALL_SUBMIT_SERVICE_REQUEST_FAILURE',\n\tTRIGGER_LOAD_LOCATIONS_DETAILS: 'TRIGGER_LOAD_LOCATIONS_DETAILS',\n\tCLOSE_APP: 'CLOSE_APP',\n\tTRIGGER_LOAD_RESERVATION: 'TRIGGER_LOAD_RESERVATION'\n};","module.exports = __TECTONIC__$servicenow_now_icon;","module.exports = __TECTONIC__$servicenow_now_heading;","import { createCustomElement } from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { view } from './view';\nimport styles from './styles.scss';\n\ncreateCustomElement('sn-wsd-moa-price-label', {\n\trenderer: {type: snabbdom},\n\tproperties: {\n\t\tmode: {\n\t\t\tdefault: 'medium'\n\t\t},\n\t\torientation: {\n\t\t\tdefault: 'left'\n\t\t},\n\t\tlabel: {\n\t\t\tdefault: ''\n\t\t},\n\t\tvalue: {\n\t\t\tdefault: ''\n\t\t}\n\t},\n\tview,\n\tstyles\n});\n","module.exports = __TECTONIC__lodash_4_17_4[\"isEmpty\"];","module.exports = __TECTONIC__$servicenow_now_text_link;","/**\n * Static utilitily functions\n */\n\nimport moment from 'moment-timezone';\n\n/**\n * convert date representation data to UTC format string\n * @param {string|DateTime} date - either a string or a javascript Date object\n * @return {string}\n */\nexport function convertToUTC(date) {\n\tif (!date) return null;\n\n\treturn moment.utc(date).format();\n}\n\nexport function formatUTCDateTimeForUser(dateTime, timeZone, format) {\n\tif (!format && !timeZone) {\n\t\treturn dateTime;\n\t}\n\n\tconst formattedDateTime = moment.utc(dateTime);\n\tformattedDateTime.tz(timeZone);\n\treturn formattedDateTime.format(format);\n}","import {CONSTANTS} from \"../sn-wsd-moa-app/constants\";\n\n/**\n * Object to hold the instantiated officejs singleton\n * @type {{officeHelper: null}}\n */\nconst MOAData = {\n\tofficeHelper: null,\n\tappointment: null,\n\tewsUrl: null\n};\n\n\nclass OfficeHelper {\n\tconstructor(Office) {\n\t\tthis.Office = Office;\n\t\tthis.mailboxItem = this.Office.context.mailbox.item;\n\t\tthis.appointment = null;\n\t\tthis.ewsUrl = null;\n\t\tthis.ewsId = null;\n\t}\n\n\tSAVE_TEXT_FORMAT = ' ';\n\tSAVE_TEXT_REGEX = new RegExp(' $', 'gm');\n\n\t/**\n\t * Checks which versions of officeJs are supported based on the versions array in the constants\n\t * @return {Object.<string, boolean>} - dictionary of version: string and boolean on whether the current client supports this version\n\t */\n\tsupportedVersions() {\n\t\tconst platformType = CONSTANTS.OUTLOOK_PLATFORM_TYPE;\n\t\tconst versions = CONSTANTS.SUPPORTED_VERIONS;\n\t\treturn versions.reduce((total, current) => {\n\t\t\ttotal[current] = this.Office.context.requirements.isSetSupported(platformType, current);\n\t\t\treturn total;\n\t\t}, {});\n\t}\n\n\t/**\n\t * Retrieves meeting data from officejs\n\t * @return {Promise<MeetingData>}\n\t */\n\tasync getMeetingData() {\n\t\tconst fields = ['itemType', 'subject', 'organizer', 'location', 'requiredAttendees', 'optionalAttendees'];\n\t\tconst values = await this.getItemData(...fields);\n\t\tconst fieldData = fields.reduce((total, current, index) => {\n\t\t\ttotal[current] = values[index];\n\t\t\treturn total;\n\t\t}, {});\n\n\t\tconst recurrenceInfo = await this.getRecurringData();\n\t\treturn {\n\t\t\tid: await this.getItemId().catch(() => null),\n\t\t\tstart: await this.getStart(),\n\t\t\tend: await this.getEnd(),\n\t\t\trecurrenceInfo: recurrenceInfo,\n\t\t\t...fieldData\n\t\t}\n\t}\n\n\t/**\n\t * Gets information about the frequency and types of recurrence from a meeting\n\t * @return {Promise<{[recurrence]: Recurrence, type: string, [seriesId]: string}>}\n\t */\n\tasync getRecurringData() {\n\t\tconst recurrence = await this.getItemData('recurrence').catch(() => null);\n\t\tconst seriesId = await this.getItemData('seriesId').catch(() => null)\n\n\t\treturn {\n\t\t\trecurrence: recurrence,\n\t\t\tseriesId: seriesId,\n\t\t\ttype: this.calculateAppointmentType(recurrence, seriesId)\n\t\t};\n\t}\n\n\t/**\n\t * Depending on the value of recurrence and seriesId, the reservation type will be calculated\n\t * @param {object} recurrence \n\t * @param {string} seriesId \n\t * @returns {{recurrence: object, seriesId: object, type}}\n\t */\n\t calculateAppointmentType(recurrence, seriesId) {\n\t\tlet recurringType;\n\n\t\tif (seriesId)\n\t\t\trecurringType = CONSTANTS.RECURRENCE_TYPES.OCCURRENCE;\n\t\telse if (recurrence)\n\t\t\trecurringType = CONSTANTS.RECURRENCE_TYPES.MASTER;\n\t\telse\n\t\t\trecurringType = CONSTANTS.RECURRENCE_TYPES.SINGLE;\n\n\t\treturn recurringType;\n\t}\n\n\t/**\n\t * funtionality that is called when the addin is first started, to make sure the appointment can be loaded etc.\n\t * if the appointment can't be found or saved. application will be terminated\n\t * @returns {Promise<void>}\n\t */\n\tasync initializeAppointment() {\n\t\tconst base = this;\n\t\ttry {\t\t\t\n\t\t\treturn base.prepareAppointment().then((result) => {\n\t\t\t\tconsole.log(\"Appointment prepared. Result: \", result);\n\t\t\t\tbase.ewsId = result;\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\tconsole.error('Failed to process custom properties. This might due to unsupported client or officeHelper malfunction', ex);\n\t\t\treturn reject(ex);\n\t\t}\n\t}\n\n\t/**\n\t * Prepare appointment using custom properites. Save appointment (with default subject) if not previously saved.\n\t * Store EwsId to custom properties, to avoid resaving appointment and cause annoying popup in outlook\n\t * @returns {Promise<unknown>}\n\t */\n\tasync prepareAppointment() {\n\t\tvar base = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.mailboxItem.loadCustomPropertiesAsync(async (asyncResult) => {\n\t\t\t\tif (asyncResult.status === this.Office.AsyncResultStatus.Failed) {\n\t\t\t\t\treject(asyncResult.error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst customProps = asyncResult.value;\n\t\t\t\tlet ewsId = customProps.get(\"ewsId\");\n\n\t\t\t\tif (ewsId) {\n\t\t\t\t\t// appointment was previously loaded and saved\n\t\t\t\t\tconsole.log('EwsId existed, appointment was previous saved');\n\t\t\t\t\tresolve(ewsId);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// complete new appointment from add-in perspective\n\t\t\t\tewsId = await base.saveAppointmentAsync();\n\t\t\t\tcustomProps.set(\"ewsId\", ewsId);\n\t\t\t\tconsole.debug('Saving EwsId to custom properties...');\n\t\t\t\tcustomProps.saveAsync();\n\t\t\t\tresolve(ewsId);\n\t\t\t});\n\t\t})\n\t}\n\n\t/**\n\t * generate a subject for a appointment based on current subject\n\t * @param currentSubject\n\t * @returns {string}\n\t */\n\tgenerateSubject(currentSubject) {\n\t\tlet newSubject;\n\t\tif (!currentSubject || currentSubject === '') {\n\t\t\tnewSubject = CONSTANTS.DEFAULT_SUBJECT;\n\t\t} else if (currentSubject.match(this.SAVE_TEXT_REGEX) !== null) {\n\t\t\tnewSubject = currentSubject.replace(this.SAVE_TEXT_REGEX, '');\n\t\t} else {\n\t\t\tnewSubject = currentSubject + this.SAVE_TEXT_FORMAT;\n\t\t}\n\t\treturn newSubject\n\n\t}\n\n\t/**\n\t * force a change in the appointment so that it can be saved towards exchange, used when the addin is loaded initially\n\t * @param customProps\n\t * @returns {Promise<void>}\n\t */\n\tasync saveAppointmentAsync(...customProps) {\n\t\tconst base = this;\n\n\t\treturn base.getSubject().then(async (currentAppointmentSubject) => {\n\t\t\tconst newSubject = base.generateSubject(currentAppointmentSubject);\n\n\t\t\tawait base.setItemData('subject', newSubject);\n\t\t\t\n\t\t\treturn base.saveMailboxItemAsync();\n\t\t});\n\t}\n\n\t/**\n\t * Calls mailboxItem save async, forcing the appointment to be saved in exchange\n\t * @returns {Promise<string>} (contain ewsId value)\n\t */\n\tasync saveMailboxItemAsync() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.mailboxItem.saveAsync((asyncResult) => {\n\t\t\t\tif (asyncResult.status === this.Office.AsyncResultStatus.Failed)\n\t\t\t\t\treject(asyncResult.error);\n\t\t\t\telse\n\t\t\t\t\tresolve(asyncResult.value);\n\n\t\t\t})\n\t\t})\n\t}\n\n\t/**\n\t * Gets the subject of the open meeting in the outlook frame\n\t * @return {Promise<string>}\n\t */\n\tasync getSubject() {\n\t\treturn this.getItemData('subject');\n\t}\n\n\t/**\n\t * Sets the subject of the open meeting in the outlook frame\n\t * @param subject\n\t * @return {Promise<string>}\n\t */\n\tasync setSubject(subject) {\n\t\treturn this.setItemData('subject', subject);\n\t}\n\n\t/**\n\t * gets the start datetime of the meeting\n\t * @return {Promise<Date>}\n\t */\n\tasync getStart() {\n\t\treturn new Date(await this.getItemData('start'))\n\t}\n\n\t/**\n\t * set the start of the meeting\n\t * @param {Date} start\n\t * @return {Promise<string>}\n\t */\n\tasync setStart(start) {\n\t\treturn this.setItemData('start', start);\n\t}\n\n\t/**\n\t * gets the end datetime of the meeting\n\t * @return {Promise<Date>}\n\t */\n\tasync getEnd() {\n\t\treturn new Date(await this.getItemData('end'));\n\t}\n\n\t/**\n\t * sets the end datetime of the meeting\n\t * @param {Date} end\n\t * @return {Promise<string>}\n\t */\n\tasync setEnd(end) {\n\t\treturn this.setItemData('end', end);\n\t}\n\n\t/**\n\t * Getter for required attendees field.\n\t * @return {Promise<EmailAddressDetails[]>}\n\t */\n\tasync getRequiredAttendees() {\n\t\treturn this.getItemData('requiredAttendees');\n\t}\n\n\t/**\n\t * Setter for required attendees field.\n\t * @param {EmailAddressDetails[]} requiredAttendees - The attendees to set to required attendees field.\n\t */\n\tasync setRequiredAttendees(requiredAttendees) {\n\t\tawait this.setItemData('requiredAttendees', requiredAttendees);\n\t}\n\n\t/**\n\t * Adds provided email address details to the required attendees.\n\t * @param {EmailAddressDetails} newAttendee - The attendee to add to required attendees.\n\t */\n\tasync addRequiredAttendee(newAttendee) {\n\t\tlet requiredAttendees = await this.getRequiredAttendees();\n\n\t\tif (requiredAttendees.some((attendee) => attendee.emailAddress === newAttendee.emailAddress))\n\t\t\treturn;\n\n\t\trequiredAttendees.push(newAttendee);\n\t\tawait this.setRequiredAttendees(requiredAttendees);\n\t}\n\n\t/**\n\t * Removes a attendee from the required attendees list.\n\t * @param {string} attendeeEmail - SMTP email address of the attendee to remove.\n\t */\n\tasync removeRequiredAttendee(attendeeEmail) {\n\t\tlet requiredAttendees = await this.getRequiredAttendees();\n\t\tlet attendeeIndex = requiredAttendees.findIndex((attendee) => attendee.emailAddress === attendeeEmail);\n\n\t\tif (attendeeIndex > -1) {\n\t\t\trequiredAttendees.splice(attendeeIndex, 1);\n\t\t\tawait this.setRequiredAttendees(requiredAttendees)\n\t\t}\n\t}\n\n\t/**\n\t * Adds an enhanced location to the meeting.\n\t * @param {string} roomEmail - SMTP Email address of the room to add.\n\t */\n\tasync addEnhancedLocation (roomEmail) {\n\t\tif(!roomEmail)\n\t\t\treturn;\n\n\t\tlet enhancedLoc = [{\n\t\t\tid: roomEmail,\n\t\t\ttype: this.Office.MailboxEnums.LocationType.Room\n\t\t}];\n\n\t\tthis.mailboxItem['enhancedLocation'].addAsync(enhancedLoc);\n\t}\n\n\t/**\n\t * Removes an enhanced location to the meeting.\n\t * @param {string} roomEmail - SMTP Email address of the room to remove.\n\t */\n\tasync removeEnhancedLocation (roomEmail) {\n\t\tif(!roomEmail)\n\t\t\treturn;\n\n\t\tlet enhancedLoc = [{\n\t\t\tid: roomEmail,\n\t\t\ttype: this.Office.MailboxEnums.LocationType.Room\n\t\t}];\n\n\t\tthis.mailboxItem['enhancedLocation'].removeAsync(enhancedLoc);\n\t}\n\n\t/**\n\t * Adds a room to the meeting.\n\t * @param {string} roomName - Display name of the room.\n\t * @param {string} roomEmail - SMTP email address of the room.\n\t */\n\tasync addRoomToMeeting (roomName, roomEmail) {\n\t\tlet supportedVersions = this.supportedVersions();\n\n\t\tif (supportedVersions['1.8']) {\n\t\t\tawait this.addEnhancedLocation(roomEmail);\n\t\t} else {\n\t\t\tif(!roomName || !roomEmail)\n\t\t\t\treturn;\n\n\t\t\tlet requiredAttendee = {\n\t\t\t\temailAddress: roomEmail,\n\t\t\t\tdisplayName: roomName,\n\t\t\t\trecipientType: 'other'\n\t\t\t};\n\n\t\t\tawait this.addRequiredAttendee(requiredAttendee);\n\t\t}\n\t}\n\n\t/**\n\t * Removes a room from the meeting.\n\t * @param {string} roomName - Display name of the room.\n\t * @param {string} roomEmail - SMTP email address of the room.\n\t */\n\tasync removeRoomFromMeeting (roomName, roomEmail) {\n\t\tlet supportedVersions = this.supportedVersions();\n\n\t\tif (supportedVersions['1.8']) {\n\t\t\tawait this.removeEnhancedLocation(roomEmail);\n\t\t} else {\n\t\t\tawait this.removeRequiredAttendee(roomEmail);\n\t\t}\n\t}\n\n\t/**\n\t * Wrapper function around getting data from the officejs API\n\t * @param {...string} fields - \"rest\" operator array of all fields that are passed in to retrieve\n\t * @return {Promise<string|string[]>}\n\t * @example\n\t * await office.getItemDate('subject');\n\t * // returns 'meeting subject'\n\t * await office.getItemDate('subject', 'location');\n\t * // returns ['meeting subject', 'Tue Mar 23 2021 13:45:06 GMT+0100 (Central European Standard Time)']\n\t */\n\tasync getItemData(...fields) {\n\t\tif (fields.length === 0)\n\t\t\tthrow Error('Invalid arguments count, cannot get 0 fields');\n\n\t\tif (fields.length === 1)\n\t\t\treturn this._getItemDataSingle(fields[0]);\n\n\t\tconst promises = fields.map((field) => this._getItemDataSingle(field));\n\n\t\treturn Promise.all(promises);\n\t}\n\n\t/**\n\t * Documentation on which fields are available can be found here\n\t * https://docs.microsoft.com/en-us/office/dev/add-ins/reference/objectmodel/requirement-set-1.7/office.context.mailbox.item#methods\n\t * @param {string} field\n\t * @return {Promise<string>}\n\t * @private\n\t */\n\tasync _getItemDataSingle(field) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tif (!field)\n\t\t\t\t\treject(Error('Invalid parameter'));\n\t\n\t\t\t\tif (!this.mailboxItem[field]) {\n\t\t\t\t\tconsole.error(`Invalid field on mailbox item: ${field}`);\n\t\t\t\t\tresolve(null);\n\t\t\t\t}\n\n\t\t\t\t// check for fields that are not retrieved with getAsync but need to be called directly\n\t\t\t\tif (!this.mailboxItem[field].getAsync || typeof (this.mailboxItem[field].getAsync) !== 'function')\n\t\t\t\t\tresolve(this.mailboxItem[field]);\n\n\t\t\t\tthis.mailboxItem[field].getAsync(\n\t\t\t\t\t(asyncResult) => {\n\t\t\t\t\t\tif (asyncResult.status === this.Office.AsyncResultStatus.Failed) {\n\t\t\t\t\t\t\tconsole.error(`Get async result in failed status: ${field}, ${asyncResult.error.message}`);\n\t\t\t\t\t\t\tresolve(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tresolve(asyncResult.value);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch(ex) {\n\t\t\t\tconsole.error('Unable to get outlook item data', field);\n\t\t\t\treturn Promise.resolve(null);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Promise wrapper around getting the id\n\t * @return {Promise<string>}\n\t */\n\tasync getItemId() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.mailboxItem.getItemIdAsync((asyncResult) => {\n\t\t\t\tif (asyncResult.status === this.Office.AsyncResultStatus.Failed)\n\t\t\t\t\treject(asyncResult.error.message);\n\t\t\t\telse\n\t\t\t\t\tresolve(asyncResult.value);\n\t\t\t})\n\t\t})\n\t}\n\n\t/**\n\t * wrapper function around officejs that will set data in the outlook frame\n\t * @param {string} field\n\t * @param value\n\t * @return {Promise<string>} return is based on what field type you set\n\t */\n\tasync setItemData(field, value) {\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tif (!field)\n\t\t\t\treject(Error('Invalid parameter'));\n\n\t\t\tconst options = {};\n\t\t\tthis.mailboxItem[field].setAsync(value, options,\n\t\t\t\t(asyncResult) => {\n\t\t\t\t\tif (asyncResult.status === this.Office.AsyncResultStatus.Failed)\n\t\t\t\t\t\treject(asyncResult.error.message);\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve(asyncResult.value);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * notifies subscribers of changes in the outlook window for the time data\n\t * @param {changeSubscriberHandlerResult} handler\n\t */\n\tsubscribeTimeChanges(handler) {\n\t\tthis._subscribeChangeHandler(this.Office.EventType.AppointmentTimeChanged, (result) => {\n\t\t\thandler(result);\n\t\t});\n\t}\n\n\t/**\n\t * notifies subscribers of changes in the outlook window for the location data\n\t * @param {changeSubscriberHandlerResult} handler\n\t */\n\tsubscribeEnhancedLocationChanges(handler) {\n\t\tthis._subscribeChangeHandler(this.Office.EventType.EnhancedLocationsChanged, (result) => {\n\t\t\thandler(result);\n\t\t});\n\t}\n\n\t/**\n\t * notifies subscribers of changes in the outlook window for the recipients data\n\t * @param {changeSubscriberHandlerResult} handler\n\t */\n\tsubscribeRecipientsChanges(handler) {\n\t\tthis._subscribeChangeHandler(this.Office.EventType.RecipientsChanged, async (result) => {\n\t\t\tresult.data = result.data.changedRecipientFields;\n\t\t\thandler(result);\n\t\t});\n\t}\n\n\t/**\n\t * notifies subscribers of changes in the outlook window for the recurrence data\n\t * @param {changeSubscriberHandlerResult} handler\n\t */\n\tsubscribeRecurrenceChanged(handler) {\n\t\tthis._subscribeChangeHandler(this.Office.EventType.RecurrenceChanged, async (result) => {\n\t\t\thandler(result);\n\t\t});\n\t}\n\n\t/**\n\t * helper to wrap around creating a subscriber on changes in the outlook window\n\t * @param {string} eventType - one of the options from Office.EventType\n\t * @param {changeSubscriberHandler} handler\n\t * @private\n\t */\n\t_subscribeChangeHandler(eventType, handler) {\n\t\tif (!handler)\n\t\t\tthrow Error('Invalid arguments, missing param handler');\n\n\t\tthis.Office.context.mailbox.item.addHandlerAsync(eventType, (asyncResult) => {\n\t\t\tconst result = {};\n\t\t\tif (asyncResult.status === this.Office.AsyncResultStatus.Failed) {\n\t\t\t\tresult.status = 'failure';\n\t\t\t\tresult.data = asyncResult.error.message;\n\t\t\t} else {\n\t\t\t\tresult.status = 'success';\n\t\t\t\tresult.data = asyncResult.value || asyncResult;\n\t\t\t\t// in some cases such as for 'changedRecipientFields', the result is not returned in the value field\n\t\t\t}\n\n\t\t\thandler(result);\n\t\t})\n\t}\n\n\t/**\n\t * Closes the addin sidebar\n\t */\n\tcloseAddin() {\n\t\twindow.Office.context.ui.closeContainer();\n\t}\n\n}\n\n/**\n * @callback changeSubscriberHandler\n * @param {changeSubscriberHandlerResult} result\n */\n\n/**\n * @typedef changeSubscriberHandlerResult\n * @property {'success' | 'failure'} status\n * @property {*} data - data passed to handler with relevant subscriber data\n */\n\n/**\n * Gets the current instance of officeHelper\n * @return {OfficeHelper}\n */\nexport function getOfficeHelper() {\n\tif (!MOAData.officeHelper)\n\t\tthrow Error('Officehelper not available wait for officejs to load');\n\n\treturn MOAData.officeHelper;\n}\n\n/**\n * Initialize officejs either from cdn or from mock with testing.\n * @param {Office} Office - office js library\n */\nexport function initializeOfficeHelper(Office) {\n\tif (!MOAData.officeHelper)\n\t\tMOAData.officeHelper = new OfficeHelper(Office);\n}\n\n/**\n * @typedef MeetingData\n * @property {Date} start\n * @property {Date} end\n * @property {string} [id] - can be empty for non saved meetings\n * @property {object} recurrenceInfo\n * @property {Recurrence} [recurrenceInfo.recurrence] - is empty for single meetings\n * @property {'single' | 'master' | 'occurrence'} recurrenceInfo.type - See CONSTANTS.RECURRENCE_TYPES\n * @property {string} [recurrenceInfo.seriesId] - can be empty for non saved meetings and recurring master meetings and single meetings\n */\n\n/**\n * @typedef Recurrence\n * @property {object} recurrenceProperties\n * @property {number} recurrenceProperties.interval\n * @property {object} recurrenceTimeZone\n * @property {string} recurrenceTimeZone.name\n * @property {number} recurrenceTimeZone.offset\n * @property {string} recurrenceType\n * @property {SeriesTime} seriesTime\n */\n\n/**\n * Recurrence seriesTime object returned by officejs recurrence data\n * @typedef SeriesTime\n * @property {number} durationMinutes\n * @property {number} endDay\n * @property {number} endMont\n * @property {number} endYear\n * @property {number} startDay\n * @property {number} startMonth\n * @property {number} startTimeMinutes\n * @property {number} startYear\n */\n\n/**\n * @typedef EmailAddressDetails\n * @property {string} displayName - The display name associated with an email address\n * @property {string} emailAddress - The SMTP email address\n * @property {string} recipientType - Type of recipient, possible options; distributionList, externalUser, other, user\n */\n","export const ACTIONS = {\n\tACCORDION_CLICK: 'ACCORDION_CLICK',\n\tADD_EXTRA_SERVICE_REQUEST: 'ADD_EXTRA_SERVICE_REQUEST',\n\tUPDATE_EXTRA_SERVICE_REQUEST: 'UPDATE_EXTRA_SERVICE_REQUEST',\n\tREMOVE_EXTRA_SERVICE_REQUEST: 'REMOVE_EXTRA_SERVICE_REQUEST',\n\tSAVE_SERVICE_REQUESTS: 'SAVE_SERVICE_REQUESTS',\n\tUPDATE_SERVICE_REQUESTS: 'UPDATE_SERVICE_REQUESTS',\n\tTRIGGER_NAVIGATION: 'TRIGGER_NAVIGATION',\n};","export const CONSTANTS = {\n\tVIEWS: {\n\t\tRESERVATION_SUMMARY: 'reservation_summary',\n\t\tSAVE_IN_PROGRESS: 'save_in_progress',\n\t\tSAVE_SUCCESSFUL: 'save_successful',\n\t\tSAVE_FAILED: 'save_failed',\n\t\tSEARCH_RESULTS: 'search_results'\n\t}\n};","import {createCustomElement} from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport styles from './styles.scss';\n\nconst view = (state) => {\n\treturn (\n\t\t<div className='layout'>\n\t\t\t<div page='layout__header'>\n\t\t\t\t<slot name='layoutHeader' />\n\t\t\t</div>\n\t\t\t<div className='layout__body hide-scrollbar'>\n\t\t\t\t<slot name='layoutBody' />\n\t\t\t</div>\n\t\t\t<div className='layout__footer'>\n\t\t\t\t<slot name='layoutFooter' />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\ncreateCustomElement('sn-wsd-moa-layout', {\n\trenderer: {type: snabbdom},\n\tview,\n\tslots: {\n\t\tlayoutHeader: {},\n\t\tlayoutBody: {},\n\t\tlayoutFooter: {},\n\t},\n\tstyles\n});\n","export const ACTIONS = {\n\tTRIGGER_SEARCH: 'TRIGGER_SEARCH',\n\tTRIGGER_NAVIGATION: 'TRIGGER_NAVIGATION',\n\tON_SAVE_RESERVABLES: 'ON_SAVE_RESERVABLES',\n\tNOW_BUTTON_BARE_CLICKED: 'NOW_BUTTON_BARE#CLICKED'\n};","export const ACTIONS = {\n\tNOW_INPUT_CHANGED: 'NOW_INPUT#INPUT',\n\tRECORD_PICKER_VALUE_CHANGED: 'NOW_RECORD_FIELD_LOOKUP_CONNECTED#VALUE_CHANGED',\n\tUPDATE_SEARCH_REQUEST: 'UPDATE_SEARCH_REQUEST',\n\tON_SEARCH_BUTTON_CLICKED: 'ON_SEARCH_BUTTON_CLICKED',\n\tTRIGGER_NAVIGATION: 'TRIGGER_NAVIGATION'\n};","export const ACTIONS = {\n\tTRIGGER_SEARCH: 'TRIGGER_SEARCH',\n\tREQUEST_SPACES: 'REQUEST_SPACES',\n\tON_SEARCH_SUCCESS: 'ON_SEARCH_SUCCESS',\n\tON_SEARCH_FAILED: 'ON_SEARCH_FAILED',\n\tRESERVABLES_PAGE_LOADED: 'RESERVABLES_PAGE_LOADED',\n\tRESET_LOADED_RESERVABLES: 'RESET_LOADED_RESERVABLES',\n\tOPEN_NOW_MODAL: 'OPEN_NOW_MODAL',\n\tON_SEARCH_BUTTON_CLICKED: 'ON_SEARCH_BUTTON_CLICKED',\n\tTRIGGER_UNAUTHORIZED_MODAL: 'TRIGGER_UNAUTHORIZED_MODAL'\n};","module.exports = __TECTONIC__$servicenow_now_loader;","module.exports = __TECTONIC__lodash_4_17_4;","import {createCustomElement} from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { view } from './view';\nimport styles from './styles.scss';\n\ncreateCustomElement('sn-wsd-moa-input-wrapper', {\n\trenderer: {type: snabbdom},\n\tview,\n\tproperties: {\n\t\tlabel: {\n\t\t\tdefault: ''\n\t\t},\n\t\tmandatory: {\n\t\t\tdefault: false\n\t\t},\n\t\tdisabled: {\n\t\t\tdefault: false\n\t\t},\n\t\tshowError: {\n\t\t\tdefault: false\n\t\t},\n\t\tempty: {\n\t\t\tdefault: false\n\t\t}\n\t},\n\tslots: {\n\t\tdefaultSlot: {}\n\t},\n\tstyles,\n});\n","export default {\n\tRESERVATION_TYPE_SPACE: 'space',\n\tRESERVATION_SUB_TYPES: {\n\t\tSINGLE: 'single',\n\t\tMULTI_PARENT: 'multi_parent'\n\t},\n\tRESERVATION_PURPOSE_MEETING: 'meeting',\n\tRESERVATION_SOURCE_EXCHANGE: 'exchange',\n\tRESERVATION_SUB_SOURCE_OUTLOOK_ADDIN: 'microsoft_outlook_addin',\n\tRESERVATION_LAST_UPDATED_SOURCE_EXTERNAL_PROVIDER: 'external_provider',\n\tRESERVATION_SENSITIVITY: {\n\t\tNORMAL: 'normal',\n\t\tPRIVATE: 'private'\n\t},\n\n\tOFFICE: {\n\t\tSENSITIVITY: {\n\t\t\tNORMAL: 'Normal',\n\t\t\tPRIVATE: 'Private'\n\t\t}\n\t}\n}","module.exports = __TECTONIC__lodash_4_17_4[\"cloneDeep\"];","export const ACTIONS = {\n\tRESERVABLE_SELECTED: 'RESERVABLE_SELECTED'\n};\n","export const CONSTANTS = {\n\tTABLES: {\n\t\tBUILDING: 'sn_wsd_core_building',\n\t\tFLOOR: 'sn_wsd_core_floor'\n\t},\n\tRECORD_PICKER: {\n\t\tBUILDING: 'building',\n\t\tFLOOR: 'floors'\n\t}\n}\n","/**\n * Helper class to handle updating the state based on completed http effects\n */\nexport default class MultiEffectStateWrapper {\n\n\t_completedCountKey = '';\n\t_totalCountKey = '';\n\t_isFailedKey = '';\n\n\t_successAction = '';\n\t_failureAction = '';\n\n\t/**\n\t * Initializes the required fields for the class to work\n\t * @param {MultiEffectStateWrapperConstructor} multiEffectStateWrapperInput\n\t */\n\tconstructor({ completedCountKey, totalCountKey, isFailedKey, successAction, failureAction }) {\n\t\tthis._completedCountKey = completedCountKey;\n\t\tthis._totalCountKey = totalCountKey;\n\t\tthis._isFailedKey = isFailedKey;\n\t\tthis._successAction = successAction;\n\t\tthis._failureAction = failureAction;\n\t}\n\n\t/**\n\t * Resets the required fields to begin another multi request\n\t * @param {*} state \n\t * @returns {*} new state\n\t */\n\treset(state) {\n\t\tstate[this._completedCountKey] = 0;\n\t\tstate[this._totalCountKey] = 0;\n\t\tstate[this._isFailedKey] = false;\n\t\treturn state;\n\t}\n\n\t/**\n\t * Handles updating the state upon a completion of a request\n\t * @param {*} state \n\t * @param {callback} dispatch \n\t * @param {boolean} success - whether or not the request was successful \n\t * @returns {*} new state\n\t */\n\thandleRequestComplete(state, dispatch, success) {\n\t\tconst newCompletedCount = state[this._completedCountKey] + 1;\n\t\tconst failed = state[this._isFailedKey] || !success;\n\t\t\n\t\tif (newCompletedCount === state[this._totalCountKey])\n\t\t\tthis.dispatchOnComplete(state, dispatch, !failed);\n\n\t\tstate[this._completedCountKey] = newCompletedCount;\n\t\tstate[this._isFailedKey] = failed;\n\t\treturn state;\n\t}\n\n\t/**\n\t * Dispatches success or failure based on whether the multi request was successful\n\t * @param {*} state \n\t * @param {callback} dispatch \n\t * @param {boolean} success - whether or not the multi request was successful\n\t */\n\tdispatchOnComplete(state, dispatch, success) {\n\t\t// set timeout so that the dispatch only occurs after the state is returns and updated.\n\t\tsetTimeout(() => {\n\t\t\tdispatch(success ? this._successAction : this._failureAction);\n\t\t}, 0);\n\t}\n}\n\n/**\n * @typedef MultiEffectStateWrapperConstructor\n * @property {string} completedCountKey\n * @property {string} totalCountKey\n * @property {string} isFailedKey\n * @property {string} successAction\n * @property {string} failureAction\n */","\nimport CONSTANTS from '../constants';\n\nexport function getWSDSensitivity(sensitivity) {\n\tif (sensitivity === CONSTANTS.OFFICE.SENSITIVITY.PRIVATE)\n\t\treturn CONSTANTS.RESERVATION_SENSITIVITY.PRIVATE;\n\n\treturn CONSTANTS.RESERVATION_SENSITIVITY.NORMAL;\n}","module.exports = \"data:font/woff;base64,\"","module.exports = \"data:font/woff2;base64,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\"","module.exports = \"data:font/woff;base64,\"","module.exports = \"data:font/woff2;base64,\"","module.exports = \"data:font/woff;base64,\"","module.exports = \"data:font/woff2;base64,\"","module.exports = \"data:font/woff;base64,\"","module.exports = \"data:font/woff2;base64,\"","module.exports = \"data:font/woff;base64,\"","module.exports = \"data:font/woff2;base64,\"","module.exports = \"data:font/woff;base64,\"","module.exports = \"data:font/woff2;base64,\"","module.exports = \"data:font/woff;base64,\"","module.exports = \"data:font/woff2;base64,\"","module.exports = function escape(url) {\n    if (typeof url !== 'string') {\n        return url\n    }\n    // If url is already wrapped in quotes, remove them\n    if (/^['\"].*['\"]$/.test(url)) {\n        url = url.slice(1, -1);\n    }\n    // Should url be wrapped?\n    // See https://drafts.csswg.org/css-values-3/#urls\n    if (/[\"'() \\t\\n]/.test(url)) {\n        return '\"' + url.replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n') + '\"'\n    }\n\n    return url\n}\n","var escape = require(\"../../node_modules/css-loader/lib/url/escape.js\");\nexports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}@font-face{font-style:normal;font-weight:300;font-family:Source Sans Pro;src:local(\\\"Source Sans Pro Light\\\"),local(\\\"SourceSansPro-Light\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-300.woff2\")) + \") format(\\\"woff2\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-300.woff\")) + \") format(\\\"woff\\\")}@font-face{font-style:normal;font-weight:400;font-family:Source Sans Pro;src:local(\\\"Source Sans Pro Regular\\\"),local(\\\"SourceSansPro-Regular\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-regular.woff2\")) + \") format(\\\"woff2\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-regular.woff\")) + \") format(\\\"woff\\\")}@font-face{font-style:italic;font-weight:400;font-family:Source Sans Pro;src:local(\\\"Source Sans Pro Italic\\\"),local(\\\"SourceSansPro-Italic\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-italic.woff2\")) + \") format(\\\"woff2\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-italic.woff\")) + \") format(\\\"woff\\\")}@font-face{font-style:normal;font-weight:600;font-family:Source Sans Pro;src:local(\\\"Source Sans Pro SemiBold\\\"),local(\\\"SourceSansPro-SemiBold\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-600.woff2\")) + \") format(\\\"woff2\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-600.woff\")) + \") format(\\\"woff\\\")}@font-face{font-style:italic;font-weight:600;font-family:Source Sans Pro;src:local(\\\"Source Sans Pro SemiBold Italic\\\"),local(\\\"SourceSansPro-SemiBoldItalic\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-600italic.woff2\")) + \") format(\\\"woff2\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-600italic.woff\")) + \") format(\\\"woff\\\")}@font-face{font-style:normal;font-weight:700;font-family:Source Sans Pro;src:local(\\\"Source Sans Pro Bold\\\"),local(\\\"SourceSansPro-Bold\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-700.woff2\")) + \") format(\\\"woff2\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-700.woff\")) + \") format(\\\"woff\\\")}@font-face{font-style:italic;font-weight:700;font-family:Source Sans Pro;src:local(\\\"Source Sans Pro Bold Italic\\\"),local(\\\"SourceSansPro-BoldItalic\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-700italic.woff2\")) + \") format(\\\"woff2\\\"),url(\" + escape(require(\"../fonts/source-sans-pro-v13-latin-700italic.woff\")) + \") format(\\\"woff\\\")}.sn-wsd-moa-app{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;color:#4a4948;height:100vh}.sn-wsd-moa-app .configuration-error{padding:12px}.sn-wsd-moa-app .loading-wrapper{display:flex;align-items:center;justify-content:center;height:100%;width:100%}.sn-wsd-moa-app__container{height:100%}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.moa-diagnostic-wrapper{width:100%}.moa-diagnostic-wrapper a{text-decoration:none;color:inherit;margin-top:-16px}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","import { actionTypes } from '@servicenow/ui-core';\nimport { getOfficeHelper } from '../office/officeHelper';\n\nconst {COMPONENT_BOOTSTRAPPED} = actionTypes;\n\nexport const actionHandlers = {\n\t[COMPONENT_BOOTSTRAPPED]: ({state, properties, updateState}) => {\n\t\tconst officeHelper = getOfficeHelper();\n\t\tconst { userConfig } = properties;\n\n\t\tconst env = {\n\t\t\thost: window.location.href,\n\t\t\tbrowser: _getBrowser(),\n\t\t\tagent: _getFriendlyUseragent(),\n\t\t\tsupportedVersions: officeHelper.supportedVersions(),\n\t\t\tuserConfig: userConfig\n\t\t};\n\n\t\tupdateState({\n\t\t\tenv\n\t\t});\n\t},\n};\n\n/**\n * util function to get browser that the app runs on\n * @return {string} browser \n */\nfunction _getBrowser() {\n\tconst isIE = /*@cc_on!@*/false || !!document.documentMode;\n\tconst isEdge = !isIE && !!window.StyleMedia;\n\n\tif(navigator.userAgent.indexOf('Chrome') != -1 && !isEdge)\n\t\treturn 'chrome';\n\t\n\tif(navigator.userAgent.indexOf('Safari') != -1 && !isEdge)\n\t\treturn 'safari';\n\n\tif(navigator.userAgent.indexOf('Firefox') != -1 ) \n\t\treturn 'firefox';\n\t\n\tif((navigator.userAgent.indexOf('MSIE') != -1 ) || (!!document.documentMode == true )) //IF IE > 10\n\t\treturn 'ie';\n\n\tif(isEdge)\n\t\treturn 'edge';\n\t\n\treturn 'other-browser';\n}\n\n/**\n * this function returns the browser and version in a friendly way instead of showing the full user agent\n * @return {string} user friendly client agent\n */\nfunction _getFriendlyUseragent() {\n\tconst userAgent = navigator.userAgent;\n\tlet temp;\n\tlet match = userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n\n\tif (/trident/i.test(match[1])) {\n\t\ttemp =  /\\brv[ :]+(\\d+)/g.exec(userAgent) || [];\n\t\treturn 'IE ' + (temp[1] || '');\n\t}\n\tif (match[1] === 'Chrome') {\n\t\ttemp = userAgent.match(/\\b(OPR|Edge)\\/(\\d+)/);\n\t\tif (temp != null) { return temp.slice(1).join(' ').replace('OPR', 'Opera'); }\n\t}\n\tmatch = match[2] ? [match[1], match[2]] : [navigator.appName, navigator.appVersion, '-?'];\n\tif ((temp = userAgent.match(/version\\/(\\d+)/i)) != null) { match.splice(1, 1, temp[1]); }\n\treturn match.join(' ');\n}","import { Fragment } from '@servicenow/ui-renderer-snabbdom';\nimport { t } from 'sn-translate';\n\nexport const view = (state, {updateState}) => {\n\tconst { env, isExpanded, settingsLoaded } = state;\n\n\treturn (\n\t\t<div className=\"moa-diagnostic-wrapper\">\n\t\t\t<div>\n\t\t\t\t<a className=\"pull-right\"\n\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\ton-click={() => updateState({...state, isExpanded: !state.isExpanded }) }>__</a>\n\t\t\t</div>\n\n\t\t\t{\n\t\t\t\t!isExpanded ? '' :\n\t\t\t\t(\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<h5>{t('MOA Add-in information')}</h5>\n\t\t\t\t\t\t<div className=\"moa-diagnostic__content\">\n\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>{t('Host')}:</td><td>{env.host}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>{t('Browser')}:</td><td>{env.browser}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>{t('Agent')}:</td><td>{env.agent}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>{t('Req. sets')}:</td><td>{ JSON.stringify(env.supportedVersions) }</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td colspan=\"2\"><strong>{t('Application info')}</strong></td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t!env.userConfig ? '' :\n\t\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{t('Timezone')}:</td><td>{env.userConfig.timezone}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{t('Date format')}:</td><td>{env.userConfig.date_format}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{t('Time format')}:</td><td>{env.userConfig.time_format}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</table>\n\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t)\n\t\t\t}\n\t\t</div>\n\t);\n};\n","import {createCustomElement, actionTypes} from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\nimport { view } from './view';\nimport { actionHandlers } from './actionHandlers';\nimport styles from './styles.scss';\n\n/**\n* Diagnostic compontent, showing client information, versions, requirement set support etc...\n*/\ncreateCustomElement('sn-wsd-moa-diagnostic', {\n\trenderer: {type: snabbdom},\n\tview,\n\tstyles,\n\tinitialState: {\n\t\tenv: {},\n\t\tisExpanded: false\n\t},\n\tproperties: {\n\t\tuserConfig: {\n\t\t\tdefault: null\n\t\t}\n\t},\n\tactionHandlers\n});","import {actionTypes} from '@servicenow/ui-core';\nconst {COMPONENT_BOOTSTRAPPED, COMPONENT_DOM_READY} = actionTypes;\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { ACTIONS } from './actions';\nimport * as utils from '../utils/generalUtils';\n\nconst CATEGORY_MODEL = {\n\tcomment: '',\n\tcategoryFriendlyName: '',\n\tcategoryCurrencyCode: '',\n\taddedServices: [],\n\ttotalPrice: 0,\n\ttotalQuantity: 0,\n\thasErrors: false\n};\n\nconst SERVICE_REQUEST_MODEL = {\n\tclientId: '',\n\tcategory: '',\n\tcategoryFriendlyName: '',\n\tsubCategory: {\n\t\tvalue: '',\n\t\tdisplay_value: ''\n\t},\n\tflexibleServiceId: '',\n\tflexibleServiceName: '',\n\tservicePrice: 0,\n\tcurrencyCode: '',\n\ttotalPrice: 0,\n\tquantity: 1,\n\tcomment: '',\n};\n\nexport const actionHandlers = {\n\t[COMPONENT_BOOTSTRAPPED]: ({ properties, state, updateState }) => {\n\t\tconst selectedServices = utils.mapObject(properties.selectedServices, (selectServiceEntryId, selectedServiceEntryValue) => {\n\t\t\treturn {\n\t\t\t\t...selectedServiceEntryValue,\n\t\t\t\ttotalPrice: parseFloat(selectedServiceEntryValue.totalPrice),\n\t\t\t\ttotalQuantity: utils.calculateServiceCategoryQuantity(selectedServiceEntryValue.addedServices),\n\t\t\t\thasErrors: false\n\t\t\t}\n\t\t});\n\n\t\tconst newState = _updateCalculatedStateProperties(state, selectedServices);\n\t\tupdateState(newState);\n\t},\n\n\t[COMPONENT_DOM_READY]: ({action}) => {\n\t\tconst {payload: {host}} = action;\n\t\tconst servicesManager = host.shadowRoot.querySelector('.services-manager');\n\t\t\n\t\tif (servicesManager)\n\t\t\tservicesManager.focus();\n\t},\n\n\t[ACTIONS.ACCORDION_CLICK]: ({action, state, updateState}) => {\n\t\tconst {\n\t\t\tid,\n\t\t\tvalue\n\t\t} = action.payload;\n\n\t\tconst selectedCategory = value ? id : null;\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tselectedCategory\n\t\t});\n\t},\n\n\t[ACTIONS.ADD_EXTRA_SERVICE_REQUEST]: ({action, state, properties, updateState}) => {\n\t\tconst {\n\t\t\tcategory: categoryId,\n\t\t\tsubCategory: subCategoryId\n\t\t} = action.payload;\n\n\t\tconst category = properties.location.flexible_services.find(locationCategory => locationCategory.category === categoryId);\n\t\tconst subCategory = category.flexible_service.find(subCategory => subCategory.sub_category === subCategoryId);\n\t\t\n\t\tlet categorySelectedServices = state.selectedServices[categoryId];\n\t\tif (!categorySelectedServices) {\n\t\t\tcategorySelectedServices = {\n\t\t\t\t...cloneDeep(CATEGORY_MODEL),\n\t\t\t\tcategoryFriendlyName: category.label,\n\t\t\t\tcategoryCurrencyCode: category.currency_code\n\t\t\t};\n\t\t} else\n\t\t\tcategorySelectedServices = {...categorySelectedServices};\n\n\t\tconst newExtraServiceRequest = {\n\t\t\t...cloneDeep(SERVICE_REQUEST_MODEL),\n\t\t\tclientId: utils.generateGUID(),\n\t\t\tcategory: category.category,\n\t\t\tcategoryFriendlyName: category.label,\n\t\t\tsubCategory: {\n\t\t\t\tvalue: subCategory.sub_category,\n\t\t\t\tdisplay_value: subCategory.label\n\t\t\t},\n\t\t};\n\n\t\tcategorySelectedServices.addedServices = [...categorySelectedServices.addedServices, newExtraServiceRequest];\n\t\tcategorySelectedServices.hasErrors = true;\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tselectedServices: {\n\t\t\t\t...state.selectedServices,\n\t\t\t\t[categoryId]: categorySelectedServices\n\t\t\t},\n\t\t\thasErrors: true\n\t\t})\n\t},\n\n\t[ACTIONS.UPDATE_EXTRA_SERVICE_REQUEST]: ({ action, state, updateState }) => {\n\t\tlet newServiceRequestState = {...action.payload.serviceRequest};\n\n\t\tconst {\n\t\t\tclientId,\n\t\t\tcategory\n\t\t} = newServiceRequestState;\n\n\t\tconst selectedServiceCategory = state.selectedServices[category];\n\t\tconst oldAddedServices = selectedServiceCategory.addedServices;\n\t\tconst addedServices = oldAddedServices.concat();\n\t\tconst addedServicesIndex = oldAddedServices.findIndex(serviceRequest => serviceRequest.clientId === clientId);\n\n\t\tif (!newServiceRequestState.cancelFlag)\n\t\t\tnewServiceRequestState = _updateServiceRequestCalculatedProperties(newServiceRequestState);\n\n\t\taddedServices[addedServicesIndex] = newServiceRequestState;\n\n\t\t_updateAddedServicesState(updateState, state, category, addedServices);\n\t},\n\n\t[ACTIONS.REMOVE_EXTRA_SERVICE_REQUEST]: ({ action, state, updateState, dispatch }) => {\n\t\tconst serviceRequest = action.payload.serviceRequest;\n\t\tconst {\n\t\t\trequestId,\n\t\t\tclientId,\n\t\t\tcategory\n\t\t} = serviceRequest;\n\n\t\tif (requestId) {\n\t\t\tdispatch(ACTIONS.UPDATE_EXTRA_SERVICE_REQUEST, {\n\t\t\t\tserviceRequest: {\n\t\t\t\t\t...serviceRequest,\n\t\t\t\t\tcancelFlag: true\t\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldAddedServices = state.selectedServices[category].addedServices;\n\t\tconst addedServices = oldAddedServices.filter(serviceRequest => serviceRequest.clientId !== clientId);\n\n\t\t_updateAddedServicesState(updateState, state, category, addedServices);\n\t},\n\n\t[ACTIONS.SAVE_SERVICE_REQUESTS]: ({ state, dispatch, properties }) => {\n\t\tif (state.hasErrors) {\n\t\t\tconsole.error('Trying to save services when there are errors present.');\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch(ACTIONS.UPDATE_SERVICE_REQUESTS, { locationId: properties.location.sys_id, locationExtraServiceRequests: state.selectedServices });\n\t}\n}\n\n/**\n * Updates the service requests calculated properties\n * @param {*} serviceRequest\n * @returns {*} returns new service request state\n */\nfunction _updateServiceRequestCalculatedProperties(serviceRequest) {\n\treturn {\n\t\t...serviceRequest,\n\t\ttotalPrice: serviceRequest.servicePrice * serviceRequest.quantity\n\t};\n}\n\n/**\n * Updates the addedServices, and updates the calculated properties based on the addedServices\n * @param {*} updateState\n * @param {*} state\n * @param {*} category\n * @param {*} addedServices\n */\nfunction _updateAddedServicesState(updateState, state, category, addedServices) {\n\tconst newSelectedServices ={\n\t\t...state.selectedServices,\n\t\t[category]: {\n\t\t\t...state.selectedServices[category],\n\t\t\taddedServices,\n\t\t\ttotalPrice: utils.calculateServiceCategoryPrice(addedServices),\n\t\t\ttotalQuantity: utils.calculateServiceCategoryQuantity(addedServices),\n\t\t\thasErrors: !_areServiceRequestsValid(addedServices)\n\t\t}\n\t};\n\n\tconst calculatedNewState = _updateCalculatedStateProperties(state, newSelectedServices);\n\tupdateState(calculatedNewState);\n}\n\n/**\n * Updates the calculated values of the state. such as total price of each category\n * @param {*} state\n * @returns {*} - returns the new state\n */\nfunction _updateCalculatedStateProperties(state, selectedServices) {\n\tconst {subTotalPrice} = state;\n\tconst categoryEntries = Object.entries(selectedServices);\n\n\tconst newSubTotalPrice = categoryEntries.reduce((accumulator, categoryEntry) => {\n\t\tconst category = categoryEntry[1];\n\t\treturn {\n\t\t\tvalue: accumulator.value + category.totalPrice,\n\t\t\tcurrencyCode: category.categoryCurrencyCode !== accumulator.currencyCode ? category.categoryCurrencyCode : accumulator.currencyCode\n\t\t};\n\t}, { value: 0, currencyCode: subTotalPrice.currencyCode });\n\n\treturn {\n\t\t...state,\n\t\tselectedServices,\n\t\tsubTotalPrice: newSubTotalPrice,\n\t\thasErrors: Object.entries(selectedServices).some(([categoryId, servicesCategory]) => servicesCategory.hasErrors)\n\t};\n}\n\n/**\n * Validates that all services of the provided category are valid\n * @param {*} addedServices \n * @returns {boolean}\n */\nfunction _areServiceRequestsValid(addedServices) {\n\treturn !addedServices.some(addedService =>\n\t\t!addedService.cancelFlag && (\n\t\t\t!addedService.flexibleServiceId\n\t\t\t|| typeof addedService.flexibleServiceId !== 'string'\n\t\t\t|| addedService.quantity < 1\n\t\t\t|| typeof addedService.quantity !== 'number'\t\n\t\t)\n\t);\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.services-manager{height:100%}.services-manager-category{border-top:1px solid #ccc}.services-manager-category:first-child{border-top:0}.services-manager-category--closed{background-color:#f7f7f7}.services-manager-category--closed:last-child{border-bottom:1px solid #ccc}.services-manager-category-header{display:flex;align-items:center;padding:8px 12px}.services-manager-category-header__title{flex:1;font-size:18px}.services-manager-category-header__amount{vertical-align:middle;padding-right:8px;max-width:140px}.services-manager-category-header__error-icon{color:#c83c36;padding:0 5px}.services-manager-category-content{padding:6px 12px;margin-bottom:6px}.services-manager-category-content__header{padding-bottom:12px;font-size:18px;color:#465354}.services-manager-category-content__subcategory-link{margin:0 -8px;padding-bottom:2px}.services-manager__subtotal-amount{align-self:flex-end;text-align:end;align-self:center;padding:12px 12px 0;font-size:16px;color:#465354}.services-manager__footer{border-top:1px solid #ccc}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis,.service-request-card__add-comments-link,.service-request-card__cost,.service-request-card__delivery-time,.service-request-card__quantity,.service-request-card__section{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.card__header{display:flex;align-items:start}.card__header-left{flex:1;margin:0}.wsd-card{padding:12px;border:1px solid #ccc;border-radius:2px;background:#fff}.service-request-card,.wsd-card{margin-bottom:12px}.service-request-card__section{font-size:12px;display:flex;margin:0 -10px;padding:5px}.service-request-card__section>*{padding:5px;flex:1}.service-request-card__section textarea{padding:0;font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif}.service-request-card__delivery-time{flex:4}.service-request-card__cost,.service-request-card__quantity{flex:2}.service-request-card__add-comments-link{align-self:center;margin:0 5px;border-bottom:1px solid #ccc;padding-bottom:8px}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","export const ACTIONS = {\n\tUPDATE_EXTRA_SERVICE_REQUEST: 'UPDATE_EXTRA_SERVICE_REQUEST',\n\tREMOVE_EXTRA_SERVICE_REQUEST: 'REMOVE_EXTRA_SERVICE_REQUEST'\n};","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis,.moa-input__header{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.moa-input{padding-bottom:5px}.moa-input--enabled{border-bottom:1px solid #ccc}.moa-input__header{color:#637274;padding-bottom:12px}.moa-input__mandatory-icon{padding-left:5px}.moa-input__mandatory-icon--empty{color:#c83c36}.moa-input--error{border-color:#c83c36}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","import '@servicenow/now-icon';\nimport { Fragment } from '@servicenow/ui-renderer-snabbdom';\n\nexport const view = (state) => {\n\tconst {\n\t\tlabel,\n\t\tmandatory,\n\t\tdisabled,\n\t\tempty,\n\t\tshowError\n\t} = state.properties;\n\n\tconst containerClassNames = ['moa-input'];\n\tif (!disabled)\n\t\tcontainerClassNames.push('moa-input--enabled');\n\n\tif (showError && empty)\n\t\tcontainerClassNames.push('moa-input--error');\n\n\tconst mandatoryClassNames = ['moa-input__mandatory-icon'];\n\tif (empty)\n\t\tmandatoryClassNames.push('moa-input__mandatory-icon--empty');\n\n\treturn (\n\t\t<div className={containerClassNames.join(' ')}>\n\t\t\t<div className='moa-input__header'>\n\t\t\t\t{label}\n\t\t\t\t{\n\t\t\t\t\t!mandatory ? '' :\n\t\t\t\t\t\t<now-icon size='sm' icon='asterisk-fill' className={mandatoryClassNames.join(' ')} />\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t<slot />\n\t\t</div>\n\t)\n};","module.exports = __TECTONIC__moment_2_24_0;","import { t } from 'sn-translate';\nimport { Fragment } from '@servicenow/ui-renderer-snabbdom';\nimport moment from 'moment';\nimport '@servicenow/now-text-link';\nimport '@servicenow/now-icon';\nimport '@servicenow/now-heading';\n\nimport '../sn-wsd-moa-input-wrapper';\nimport { ACTIONS } from './actions';\nimport { formatUTCDateTimeForUser } from '../utils/moaDateTimeUtils';\nimport * as utils from '../utils/generalUtils';\n\nexport const view = (state, { dispatch, updateState }) => {\n\tconst {\n\t\tserviceRequest,\n\t\tsubCategory,\n\t\tdeliveryTime,\n\t\tuserConfig\n\t} = state.properties;\n\n\tif (!serviceRequest || !subCategory)\n\t\treturn null;\n\n\tconst {\n\t\tflexibleServiceId,\n\n\t\tquantity,\n\t\tcomment,\n\t\tcurrencyCode,\n\t\ttotalPrice,\n\t\tsubCategory: {\n\t\t\tdisplay_value: subCategoryLabel\n\t\t}\n\t} = serviceRequest;\n\n\tconst deliveryTimeDisplay = formatUTCDateTimeForUser(deliveryTime, userConfig.timezone, userConfig.time_simple_format);\n\n\treturn (\n\t\t<div className='service-request-card card'>\n\t\t\t<div className='card__header'>\n\t\t\t\t<h3 className='card__header-left'>\n\t\t\t\t\t<now-heading\n\t\t\t\t\t\tlabel={subCategoryLabel}\n\t\t\t\t\t\tvariant=\"title-primary\"\n\t\t\t\t\t/>\n\t\t\t\t</h3>\n\t\t\t\t<now-text-link\n\t\t\t\t\tlabel={ t('Remove') }\n\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\ton-click={() => dispatch(ACTIONS.REMOVE_EXTRA_SERVICE_REQUEST, {serviceRequest})}\n\t\t\t\t\tclassName='card__header-right'\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className='service-request-card__section'>\n\t\t\t\t<sn-wsd-moa-input-wrapper label={subCategoryLabel} mandatory={true} empty={!flexibleServiceId}>\n\t\t\t\t\t<select on-change={ (event, element) => onSelectedServiceChanged(dispatch, state, subCategory, element.elm.value) } className='input-default'>\n\t\t\t\t\t\t{constructFlexibleServiceOptionsView(dispatch, state, subCategory, flexibleServiceId)}\n\t\t\t\t\t</select>\n\t\t\t\t</sn-wsd-moa-input-wrapper>\n\t\t\t</div>\n\n\t\t\t<div className='service-request-card__section'>\n\t\t\t\t<sn-wsd-moa-input-wrapper className='service-request-card__delivery-time' label={ t('Delivery time') } disabled={true}>\n\t\t\t\t\t<input type='text' value={deliveryTimeDisplay} className='input-default' disabled />\n\t\t\t\t</sn-wsd-moa-input-wrapper>\n\n\t\t\t\t<sn-wsd-moa-input-wrapper className='service-request-card__quantity' label={ t('Quantity') } mandatory={true}>\n\t\t\t\t\t<input type='number' min='1' value={quantity} className='input-default' on-change={(event, field) => onQuantityChanged(dispatch, state, field)}/>\n\t\t\t\t</sn-wsd-moa-input-wrapper>\n\n\t\t\t\t<sn-wsd-moa-input-wrapper className='service-request-card__cost' label={ t('Cost') } disabled={true}>\n\t\t\t\t\t<div className=\"ellipsis\">{ !flexibleServiceId ? '' : `${currencyCode} ${totalPrice.toFixed(2)}` }</div>\n\t\t\t\t</sn-wsd-moa-input-wrapper>\n\t\t\t</div>\n\t\t\t<div className='service-request-card__section'>\n\t\t\t\t{\n\t\t\t\t\t!comment && !state.commentOpen ?\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t<now-text-link\n\t\t\t\t\t\t\t\tlabel={(\n\t\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t\t<now-icon icon='pencil-outline' size='sm' />\n\t\t\t\t\t\t\t\t\t\t{ ' ' + t('Add a comment')}\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\t\t\ton-click={() => updateState({commentOpen: true})}\n\t\t\t\t\t\t\t\tclassName='service-request-card__add-comments-link'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) :\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t<sn-wsd-moa-input-wrapper label={ t('Comments') }>\n\t\t\t\t\t\t\t\t<textarea className='input-default' autofocus value={comment} on-change={ (event, element) => updateServiceRequest(dispatch, state, { comment: element.elm.value }) }/>\n\t\t\t\t\t\t\t</sn-wsd-moa-input-wrapper>\n\t\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n/**\n * Sends an updated state of the service request\n * @param {*} newState \n */\nfunction updateServiceRequest(dispatch, state, newState) {\n\tdispatch(ACTIONS.UPDATE_EXTRA_SERVICE_REQUEST, {\n\t\tserviceRequest: {\n\t\t\t...state.properties.serviceRequest,\n\t\t\t...newState\n\t\t}\n\t});\n};\n\n/**\n * Handles quantity change, and handles updating quantity on the service request state\n * @param {*} event \n * @param {*} field \n */\nfunction onQuantityChanged(dispatch, state, field) {\n\tconst quantityField = field.elm;\n\tlet newQuantity = parseFloat(quantityField.value);\n\n\tif (isNaN(newQuantity) || newQuantity < 1) {\n\t\tnewQuantity = 1;\n\t\tquantityField.value = 1; // need to update the element directly as state doesnt always actually change\n\t}\n\n\tupdateServiceRequest(dispatch, state, {\n\t\tquantity: newQuantity\n\t});\n}\n\nfunction onSelectedServiceChanged(dispatch, state, subCategory, selectedService) {\n\tconst flexibleService = subCategory.flexible_service.find(flexibleService => flexibleService.sys_id === selectedService);\n\n\tupdateServiceRequest(dispatch, state, {\n\t\tflexibleServiceId: selectedService,\n\t\tflexibleServiceName: flexibleService.name,\n\t\tservicePrice: flexibleService.price_per_unit.value,\n\t\tcurrencyCode: flexibleService.price_per_unit.code,\n\t});\n}\n\n/**\n * Construct the view for the flexible service options\n * @param {*} dispatch \n * @param {*} state \n * @param {Object} subCategory\n * @param {string} flexibleServiceId\n * @returns {*}\n */\nfunction constructFlexibleServiceOptionsView(dispatch, state, subCategory, flexibleServiceId) {\n\tconst {flexible_service: services} = subCategory;\n\n\tif (!utils.isArrayHasElement(services))\n\t\treturn;\n\n\tif (!flexibleServiceId) {\n\t\tif (services.length === 1) {\n\t\t\tconst service = services[0];\n\t\t\tonSelectedServiceChanged(dispatch, state, subCategory, service.sys_id);\n\n\t\t\treturn (\n\t\t\t\t<option\n\t\t\t\t\tvalue={service.sys_id}\n\t\t\t\t\tselected={true}>\n\t\t\t\t\t{service.name}\n\t\t\t\t</option>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<option value=\"\">{t('Select')}</option>\n\t\t\t\t\t{services.map(service => (\n\t\t\t\t\t\t<option value={service.sys_id}>\n\t\t\t\t\t\t\t{service.name}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t\t</Fragment>\n\t\t\t);\n\t\t}\n\t}\n\n\treturn (\n\t\tservices.map(service => (\n\t\t\t<option\n\t\t\t\tvalue={service.sys_id}\n\t\t\t\tselected={flexibleServiceId === service.sys_id}>\n\t\t\t\t{service.name}\n\t\t\t</option>\n\t\t))\n\t);\n}","import {createCustomElement} from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { view } from './view';\nimport styles from './styles.scss';\n\ncreateCustomElement('sn-wsd-moa-service-request-card', {\n\trenderer: {type: snabbdom},\n\tview,\n\tproperties: {\n\t\tserviceRequest: {\n\t\t\tdefault: null\n\t\t},\n\t\tsubCategory: {\n\t\t\tdefault: null\n\t\t},\n\t\tdeliveryTime: {\n\t\t\tdefault: ''\n\t\t},\n\t\tuserConfig: {\n\t\t\tdefault: null\n\t\t}\n\t},\n\tinitialState: {\n\t\tcommentOpen: false\n\t},\n\tstyles\n});\n","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.header{display:flex;padding:12px;background-color:#f7f7f7;color:#525f60;border-bottom:1px solid #ccc}.header__left{flex:1 0;margin:auto 0;font-size:12px}.header__right{flex:1 1}.header__title{flex:2 0;margin:auto 0;text-align:center;font-size:20px}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","import '@servicenow/now-icon';\nimport '@servicenow/now-button';\n\nimport {createCustomElement} from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\nimport { t } from 'sn-translate';\n\nimport styles from './styles.scss';\n\nconst view = ({ properties }) => (\n\t<div className='header'>\n\t\t<div className='header__left' on-click={() => onBackClickHandler(properties.onBack)}>\n\t\t\t<now-button\n\t\t\t\tbare\n\t\t\t\tlabel={t('Back')}\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"tertiary\"\n\t\t\t\ticon=\"chevron-left-fill\"\n\t\t\t/>\n\t\t</div>\n\t\t<div className='header__title'>\n\t\t\t{properties.title}\n\t\t</div>\n\t\t<div className='header__right'>\n\t\t</div>\n\t</div>\n);\n\nfunction onBackClickHandler(onBackCallback) {\n\tif (onBackCallback)\n\t\tonBackCallback();\n}\n\n\ncreateCustomElement('sn-wsd-moa-header', {\n\trenderer: {type: snabbdom},\n\tview,\n\tproperties: {\n\t\ttitle: {\n\t\t\tdefault: 'Title'\n\t\t},\n\t\tonBack: {\n\t\t\tdefault: null\n\t\t},\n\t},\n\tstyles\n});\n","import { t } from 'sn-translate';\nimport { Fragment } from '@servicenow/ui-renderer-snabbdom';\nimport '@servicenow/now-button';\nimport '@servicenow/now-icon';\n\nimport '../sn-wsd-moa-header';\nimport '../sn-wsd-moa-layout';\nimport '../sn-wsd-moa-service-request-card';\nimport '../sn-wsd-moa-input-wrapper';\nimport '../sn-wsd-moa-price-label';\nimport { ACTIONS } from './actions';\nimport { CONSTANTS } from '../sn-wsd-moa-app/constants';\n\nexport const view = (state, triggers) => {\n\tconst {\n\t\tsubTotalPrice,\n\t\tproperties: {\n\t\t\tlocation: reservable\n\t\t}\n\t} = state;\n\n\tif (!reservable) {\n\t\treturn (\n\t\t\t<div className='services-manager'>\n\t\t\t\t{ generateErrorBody(state, triggers) }\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div className='services-manager unselectable' tabindex={0}>\n\t\t\t<sn-wsd-moa-layout>\n\t\t\t\t<div slot='layoutHeader'>\n\t\t\t\t\t<sn-wsd-moa-header\n\t\t\t\t\t\ttitle={reservable.name}\n\t\t\t\t\t\tonBack={() => triggers.dispatch(ACTIONS.TRIGGER_NAVIGATION, { view: CONSTANTS.VIEWS.SUMMARY})}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div slot='layoutBody' className='services-manager__body'>\n\t\t\t\t\t{\n\t\t\t\t\t\treservable.flexible_services.map(category => {\n\t\t\t\t\t\t\treturn generateCategory(state, triggers, category);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div slot='layoutFooter' className='services-manager__footer'>\n\t\t\t\t\t<div className='services-manager__subtotal-amount'>\n\t\t\t\t\t\t<sn-wsd-moa-price-label\n\t\t\t\t\t\t\tclassName=\"text-uppercase\"\n\t\t\t\t\t\t\tmode='large'\n\t\t\t\t\t\t\tlabel={t('Subtotal ({0})', subTotalPrice.currencyCode)}\n\t\t\t\t\t\t\tvalue={subTotalPrice.value.toFixed(2)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='action-buttons'>\n\t\t\t\t\t\t<now-button\n\t\t\t\t\t\t\tlabel={ t('Cancel') }\n\t\t\t\t\t\t\tsize='md'\n\t\t\t\t\t\t\ton-click={ () => triggers.dispatch(ACTIONS.TRIGGER_NAVIGATION, { view: CONSTANTS.VIEWS.SUMMARY}) } />\n\t\t\t\t\t\t<now-button\n\t\t\t\t\t\t\tlabel={ t('Save services') }\n\t\t\t\t\t\t\tvariant='primary'\n\t\t\t\t\t\t\tsize='md'\n\t\t\t\t\t\t\tdisabled={state.hasErrors}\n\t\t\t\t\t\t\ton-click={ () => triggers.dispatch(ACTIONS.SAVE_SERVICE_REQUESTS) } />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</sn-wsd-moa-layout>\n\t\t</div>\n\t);\n}\n\n/**\n * Generates a single categories accordion item\n * @param {*} category \n * @param {*} state \n */\nfunction generateCategory(state, triggers, category) {\n\tconst categorySelection = state.selectedServices[category.category];\n\tconst categoryIsActive = category.category === state.selectedCategory;\n\tlet categoryClassName = 'services-manager-category';\n\n\tif (!categoryIsActive)\n\t\tcategoryClassName = `${categoryClassName} services-manager-category--closed`;\n\n\treturn (\n\t\t<div className={categoryClassName}>\n\t\t\t<div className='services-manager-category-header'\n\t\t\t\ton-click={() => triggers.dispatch(ACTIONS.ACCORDION_CLICK, {value: !categoryIsActive, id: category.category})}>\n\t\t\t\t<span className='services-manager-category-header__title'>{category.label || t('Category name')}</span>\n\t\t\t\t{\n\t\t\t\t\t// generate each accordions right hand data\n\t\t\t\t\tcategoryIsActive ? '' : (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName='services-manager-category-header__amount'\n\t\t\t\t\t\t\t\ttitle={getCategoryPriceLabel(state, category.category)}>\n\t\t\t\t\t\t\t\t{getCategoryMetadata(state, triggers, category)}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t!categorySelection || !categorySelection.hasErrors ? '' : (\n\t\t\t\t\t\t\t\t\t<now-icon icon='circle-exclamation-fill' size='md' className='services-manager-category-header__error-icon' />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t<now-button-iconic\n\t\t\t\t\tbare\n\t\t\t\t\ticon={categoryIsActive ? 'chevron-up-fill' : 'chevron-down-fill'}\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\ton-click={() => triggers.dispatch(ACTIONS.ACCORDION_CLICK, {value: !categoryIsActive, id: category.category})}\n\t\t\t\t\thidePadding={true}\n\t\t\t\t\tconfig-aria={{'aria-label': categoryIsActive ? t('Collapse {0}', category.label) : t('Expand {0}', category.label)}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t{ categoryIsActive ? generateCategoryContent(state, triggers, category) : '' }\n\t\t</div>\n\t);\n}\n\n/**\n * Generates a single categories accordion items content\n * @param {*} category\n */\nfunction generateCategoryContent(state, triggers, category) {\n\tconst selectedCategoryServices = state.selectedServices[category.category];\n\tconst hasServices = selectedCategoryServices\n\t\t&& Array.isArray(selectedCategoryServices.addedServices)\n\t\t&& selectedCategoryServices.addedServices.some((service) => !service.cancelFlag);\n\n\treturn (\n\t\t<div className='services-manager-category-content'>\n\t\t\t{\n\t\t\t\thasServices\n\t\t\t\t\t? generateCategoryServiceRequests(state, triggers, category)\n\t\t\t\t\t: generateInitialServicesView(state, triggers, category)\n\t\t\t}\n\t\t</div>\n\t);\n}\n\n/**\n * Generates the sub-categories add link for the category\n * @param {*} state \n * @param {*} triggers \n * @param {*} category \n */\nfunction generateInitialServicesView(state, triggers, category) {\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className='services-manager-category-content__header'>{ t('What do you want to add to your reservation?') }</div>\n\t\t\t{\n\t\t\t\tcategory.flexible_service.map(subCategory => (\n\t\t\t\t\t<div className='services-manager-category-content__subcategory-link'>\n\t\t\t\t\t\t<now-button\n\t\t\t\t\t\t\tbare\n\t\t\t\t\t\t\tlabel={subCategory.label}\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\ticon=\"plus-fill\"\n\t\t\t\t\t\t\ton-click={() => dispatchAddExtraServiceRequest(triggers.dispatch, category.category, subCategory.sub_category)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t\t}\n\t\t</Fragment>\n\t)\n}\n\n/**\n * Generates the service requests for the category, and the select to add more\n * @param {*} state \n * @param {*} triggers \n * @param {*} category \n */\nfunction generateCategoryServiceRequests(state, triggers, category) {\n\tconst selectedCategoryServices = state.selectedServices[category.category];\n\n\treturn (\n\t\t<Fragment>\n\t\t\t{\n\t\t\t\tselectedCategoryServices.addedServices.map((selectedService, index) => {\n\t\t\t\t\tif (selectedService.cancelFlag)\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<sn-wsd-moa-service-request-card\n\t\t\t\t\t\t\tserviceRequest={selectedService}\n\t\t\t\t\t\t\tsubCategory={category.flexible_service.find(subCategory => subCategory.sub_category === selectedService.subCategory.value)}\n\t\t\t\t\t\t\tdeliveryTime={state.properties.appointment.start}\n\t\t\t\t\t\t\tuserConfig={state.properties.userConfig} />\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t\t<sn-wsd-moa-input-wrapper>\n\t\t\t\t<select className='input-default' on-change={ (event, element) => dispatchAddExtraServiceRequest(triggers.dispatch, category.category, element.elm.value) }>\n\t\t\t\t\t{ /* By using the length of the added services,\n\t\t\t\t\t* everytime the length changes, ie a new service is added\n\t\t\t\t\t* the selection is reset to the default */}\n\t\t\t\t\t<option selected={selectedCategoryServices.addedServices.length} value=\"\">{category.additional_text}</option>\n\t\t\t\t\t{\n\t\t\t\t\t\tcategory.flexible_service.map(subCategory => (\n\t\t\t\t\t\t\t<option value={subCategory.sub_category}>{subCategory.label}</option>\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</select>\n\t\t\t</sn-wsd-moa-input-wrapper>\n\t\t</Fragment>\n\t);\n}\n\n/**\n * Default view for error body for service manager\n */\nfunction generateErrorBody(state, {dispatch}) {\n\treturn (\n\t\t<div class='services-manager__error'>\n\t\t\t<sn-wsd-moa-header\n\t\t\t\ttitle={\"Error\"}\n\t\t\t\tonBack={() => dispatch(ACTIONS.TRIGGER_NAVIGATION, { view: CONSTANTS.VIEWS.SUMMARY})}  />\n\t\t\t{ t('Something went wrong') }\n\t\t</div>\n\t);\n}\n\n/**\n * Dispatches the event to add new extra service request\n * @param {callback} dispatch\n * @param {string} category\n * @param {string} subCategory\n */\nfunction dispatchAddExtraServiceRequest(dispatch, category, subCategory) {\n\tdispatch(ACTIONS.ADD_EXTRA_SERVICE_REQUEST, {category, subCategory})\n}\n\nfunction getCategoryMetadata(state, triggers, category) {\n\tconst categorySelectedServices = state.selectedServices[category.category];\n\tif (!categorySelectedServices || categorySelectedServices.totalQuantity === 0)\n\t\treturn '';\n\n\treturn (\n\t\t<sn-wsd-moa-price-label\n\t\t\tmode='medium'\n\t\t\tlabel={t('{0} item(s):', categorySelectedServices.totalQuantity)}\n\t\t\tvalue={`${categorySelectedServices.categoryCurrencyCode} ${categorySelectedServices.totalPrice.toFixed(2)}`}\n\t\t/>\n\t);\n}\n\n/**\n * Get the full price label string for a single category\n * @param {*} selectedServices \n * @param {string} categoryName \n * @returns {string}\n */\nfunction getCategoryPriceLabel({selectedServices}, categoryName) {\n\tconst categorySelectedServices = selectedServices[categoryName];\n\tif (!categorySelectedServices || categorySelectedServices.totalQuantity === 0)\n\t\treturn '';\n\n\tconst {\n\t\ttotalPrice,\n\t\ttotalQuantity,\n\t\tcategoryCurrencyCode\n\t} = categorySelectedServices;\n\t\t\n\treturn t('{0} item(s): {1} {2}', [totalQuantity, categoryCurrencyCode, totalPrice.toFixed(2)]);\n}","import {createCustomElement} from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { view } from './view';\nimport styles from './styles.scss';\nimport { ACTIONS } from './actions';\nimport { actionHandlers } from './actionHandlers';\n\ncreateCustomElement('sn-wsd-moa-services-manager', {\n\trenderer: {type: snabbdom},\n\tview,\n\tproperties: {\n\t\tlocation: {\n\t\t\tdefault: null\n\t\t},\n\t\tselectedServices: {\n\t\t\tdefault: []\n\t\t},\n\t\tappointment: {\n\t\t\tdefault: null\n\t\t},\n\t\tuserConfig: {\n\t\t\tdefault: null\n\t\t}\n\t},\n\tinitialState: {\n\t\tselectedCategory: null,\n\t\tsubTotalPrice: {value: 0, currencyCode: 'EUR'},\n\t\tselectedServices: [],\n\t\thasErrors: false\n\t},\n\tstyles,\n\tactions: ACTIONS,\n\tactionHandlers\n});\n","import {createHttpEffect} from '@servicenow/ui-effect-http';\n\nimport { ACTIONS } from '../actions';\n\nconst EXTRA_SERVICE_REQUEST_BASE_URL = '/api/sn_wsd_rsv/wsd_extra_service_request';\n\nexport const submitExtraServicesRequest = createHttpEffect(`${EXTRA_SERVICE_REQUEST_BASE_URL}/submit`, {\n\tmethod: 'POST',\n\tdataParam: 'data',\n\tsuccessActionType: ACTIONS.SUBMIT_EXTRA_SERVICES_REQUEST_SUCCESS,\n\terrorActionType: ACTIONS.SUBMIT_EXTRA_SERVICES_REQUEST_FAILURE\n})\n\nexport default {\n\tsubmitExtraServicesRequest\n};","import {createHttpEffect} from '@servicenow/ui-effect-http';\n\nimport { ACTIONS } from '../actions';\n\nconst RESERVATION_BASE_URL = '/api/sn_wsd_rsv/reservation';\nconst MULTI_RESERVATION_BASE_URL = '/api/sn_wsd_rsv/multi_reservation';\n\nexport const insertReservation = createHttpEffect(`${RESERVATION_BASE_URL}/add`, {\n\tmethod: 'POST',\n\tdataParam: 'data',\n\tsuccessActionType: ACTIONS.SAVE_RESERVATION_SUCCESS,\n\terrorActionType: ACTIONS.SAVE_RESERVATION_FAILURE\n});\n\nexport const updateReservation = createHttpEffect(`${RESERVATION_BASE_URL}/update/:id`, {\n\tmethod: 'PATCH',\n\tpathParams: ['id'],\n\tdataParam: 'data',\n\tsuccessActionType: ACTIONS.SAVE_RESERVATION_SUCCESS,\n\terrorActionType: ACTIONS.SAVE_RESERVATION_FAILURE\n});\n\nexport const insertMultiReservation = createHttpEffect(`${MULTI_RESERVATION_BASE_URL}/add`, {\n\tmethod: 'POST',\n\tdataParam: 'data',\n\tsuccessActionType: ACTIONS.SAVE_RESERVATION_SUCCESS,\n\terrorActionType: ACTIONS.SAVE_RESERVATION_FAILURE\n});\n\nexport const updateMultiReservation = createHttpEffect(`${MULTI_RESERVATION_BASE_URL}/update/:id`, {\n\tmethod: 'PATCH',\n\tpathParams: ['id'],\n\tdataParam: 'data',\n\tsuccessActionType: ACTIONS.SAVE_RESERVATION_SUCCESS,\n\terrorActionType: ACTIONS.SAVE_RESERVATION_FAILURE\n});\n\nexport default {\n\tinsertReservation,\n\tupdateReservation,\n\tinsertMultiReservation,\n\tupdateMultiReservation\n};","import { actionTypes } from '@servicenow/ui-core';\nimport { t } from 'sn-translate';\nimport  _isEmpty from 'lodash/isEmpty';\nimport Constants from '../constants';\nimport { CONSTANTS as APP_CONSTANTS } from '../sn-wsd-moa-app/constants';\nimport { CONSTANTS as RESERVATION_SUMMARY_CONSTANTS } from './constants';\nimport { ACTIONS } from './actions';\nimport { getOfficeHelper } from '../office/officeHelper';\nimport { insertReservation, updateReservation, insertMultiReservation, updateMultiReservation } from './effects/reservationEffects';\nimport { submitExtraServicesRequest } from './effects/extraServiceRequestEffects';\nimport MultiEffectStateWrapper from '../utils/multiEffectStateWrapper';\nimport * as utils from '../utils/generalUtils';\nimport { formatUTCDateTimeForUser } from '../utils/moaDateTimeUtils';\n\nconst {COMPONENT_BOOTSTRAPPED, COMPONENT_PROPERTY_CHANGED, COMPONENT_DOM_READY} = actionTypes;\n\nconst multiEffectStateWrapper = new MultiEffectStateWrapper({\n\tisFailedKey: 'saveServicesFailed',\n\tcompletedCountKey: 'serviceRequestsCompletedCount',\n\ttotalCountKey: 'serviceRequestsSentCount',\n\tsuccessAction: ACTIONS.ALL_SUBMIT_SERVICE_REQUEST_SUCCESS,\n\tfailureAction: ACTIONS.ALL_SUBMIT_SERVICE_REQUEST_FAILURE\n});\n\nexport const actionHandlers = {\n\t[COMPONENT_DOM_READY]: ({action}) => {\n\t\tconst {payload: {host}} = action;\n\t\tconst rsvSummary = host.shadowRoot.querySelector('.sn-wsd-moa-reservation-summary');\n\t\t\n\t\tif (rsvSummary)\n\t\t\trsvSummary.focus();\n\t},\n\n\t[COMPONENT_BOOTSTRAPPED]: ({ properties, dispatch, state, updateState }) => {\n\t\tvar { locationsDetails, selectedReservables, appointment } = properties;\n\n\t\tif (_checkAndMoveToSearchResultView(selectedReservables, state.activeView, dispatch))\n\t\t\treturn;\n\n\t\tif (_isEmpty(locationsDetails))\n\t\t\tdispatch(ACTIONS.TRIGGER_LOAD_LOCATIONS_DETAILS);\n\n\t\tconst isEligibleForSubmission = _checkSubmissionEligibility(selectedReservables, appointment.type);\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tisEligibleForSubmission\n\t\t});\n\t},\n\n\t[COMPONENT_PROPERTY_CHANGED]: ({action: {payload}, properties, state, updateState, dispatch}) => {\n\t\tvar { name, value } = payload;\n\n\t\tif (name !== 'selectedReservables')\n\t\t\treturn;\n\n\t\tconst selectedReservables = value;\n\t\tif (_checkAndMoveToSearchResultView(selectedReservables, state.activeView, dispatch))\n\t\t\treturn;\n\n\t\tconst isEligibleForSubmission = _checkSubmissionEligibility(selectedReservables, properties.appointment.type);\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tisEligibleForSubmission\n\t\t});\n\t},\t\n\n\t[ACTIONS.INSERT_RESERVATION]: insertReservation,\n\n\t[ACTIONS.UPDATE_RESERVATION]: updateReservation,\n\t\n\t[ACTIONS.INSERT_MULTI_RESERVATION]: insertMultiReservation,\n\n\t[ACTIONS.UPDATE_MULTI_RESERVATION]: updateMultiReservation,\n\n\t[ACTIONS.SUBMIT_EXTRA_SERVICES_REQUEST]: submitExtraServicesRequest,\n\t\n\t[ACTIONS.SAVE_RESERVATION]: async (...actionInputs) => {\n\t\tconst [{ dispatch, state, updateState, properties }] = actionInputs;\n\t\tconst { selectedReservables, appointment } = properties;\n\n\t\tconst isEligibleForSubmission = _checkSubmissionEligibility(selectedReservables, appointment.type);;\n\t\tif (!isEligibleForSubmission) {\n\t\t\tconsole.error('One of the items is unavailable, submission blocked');\n\t\t\treturn;\n\t\t}\n\n\t\tconst reservationObj = await createReservationObject(...actionInputs);\n\t\tconst reservation = properties.reservation;\n\t\tconst isUpdate = !!reservation;\n\t\tconst reservationId = isUpdate && reservation.sys_id;\n\t\tconst reservationIsMulti = isUpdate && !!reservation.locations;\n\t\tconst isMulti = reservationObj.reservables && reservationObj.reservables.length > 0;\n\t\tconst requestObj = {\n\t\t\tid: reservationId,\n\t\t\tdata: reservationObj\n\t\t};\n\n\t\tif (isMulti || reservationIsMulti) {\n\t\t\tif (isUpdate) \n\t\t\t\tdispatch(ACTIONS.UPDATE_MULTI_RESERVATION, requestObj);\n\t\t\telse\n\t\t\t\tdispatch(ACTIONS.INSERT_MULTI_RESERVATION, requestObj);\n\t\t} else {\n\t\t\tif (isUpdate) \n\t\t\t\tdispatch(ACTIONS.UPDATE_RESERVATION, requestObj);\n\t\t\telse\n\t\t\t\tdispatch(ACTIONS.INSERT_RESERVATION, requestObj);\n\t\t}\n\n\t\tlet newState = {\n\t\t\t...state,\n\t\t\tactiveView: RESERVATION_SUMMARY_CONSTANTS.VIEWS.SAVE_IN_PROGRESS,\n\t\t\tsavedReservables: selectedReservables.filter(selectedReservable => selectedReservable.existsInWsd)\n\t\t};\n\n\t\tnewState = multiEffectStateWrapper.reset(newState);\n\t\tupdateState(newState);\n\t},\n\t\n\t[ACTIONS.SAVE_RESERVATION_SUCCESS]: ({ dispatch, action, state, properties, updateState }) => {\n\t\tconst {\n\t\t\tsys_id: reservationId,\n\t\t\tparent,\n\t\t\tsuccessfulReservations\n\t\t} = action.payload.result;\n\n\t\tconst {\n\t\t\treservation,\n\t\t} = properties;\n\n\t\tconst reservationsServiceCategories = [];\n\n\t\tconst isSingle = !successfulReservations;\n\n\t\t// single reservation\n\t\tif (isSingle) {\n\t\t\tconst reservableId = properties.selectedReservables[0].sys_id;\n\t\t\treservationsServiceCategories.push({\n\t\t\t\treservationId,\n\t\t\t\treservableId,\n\t\t\t\tlocationServiceCategories: properties.locationsServiceCategories[reservableId]\n\t\t\t});\n\n\t\t\t// need to handle services that were for another location but dont apply anymore\n\t\t\t// no need to do this for multi as any cancelled reservations have their services cancelled,\n\t\t\t// and multi always cancels for non-applicable locations\n\t\t\tconst reservationLocationId = properties.reservation && properties.reservation.location && properties.reservation.location.sys_id;\n\t\t\tif (reservationLocationId && reservationLocationId !== reservableId) {\n\t\t\t\treservationsServiceCategories.push({\n\t\t\t\t\treservationId,\n\t\t\t\t\treservableId: reservationLocationId,\n\t\t\t\t\tlocationServiceCategories: filterServicesToCancel(properties.locationsServiceCategories[reservationLocationId])\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\t// multi reservation\n\t\t\tsuccessfulReservations.forEach(reservation => {\n\t\t\t\tconst {\n\t\t\t\t\tsys_id: reservationId,\n\t\t\t\t\treservable: reservableId\n\t\t\t\t} = reservation;\n\n\t\t\t\treservationsServiceCategories.push({\n\t\t\t\t\treservationId,\n\t\t\t\t\treservableId,\n\t\t\t\t\tlocationServiceCategories: properties.locationsServiceCategories[reservableId]\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tlet serviceRequestsSentCount = 0;\n\t\tif (utils.isArrayHasElement(reservationsServiceCategories)) {\n\t\t\tlet blockerSources = {\n\t\t\t\tsource: 'servicenow',\n\t\t\t\tsub_source: 'microsoft_outlook_addin',\n\t\t\t\tlast_updated_source: 'external_provider',\n\t\t\t\tlast_updated_sub_source: 'microsoft_outlook_addin'\n\t\t\t};\n\n\t\t\t// if the reservation is confirmed, last updated source is set to servicenow to trigger the sync.\n\t\t\tif (reservation && reservation.state.value === 'confirmed')\n\t\t\t\tblockerSources.last_updated_source = 'servicenow';\n\n\t\t\treservationsServiceCategories.forEach(({reservationId, reservableId, locationServiceCategories}) => {\n\t\t\t\tconst serviceCategories = prepareServiceCategoriesForSubmission(locationServiceCategories, properties.appointment.start);\n\t\t\t\tif (serviceCategories) {\n\t\t\t\t\tserviceRequestsSentCount++;\n\t\t\t\t\tdispatch(ACTIONS.SUBMIT_EXTRA_SERVICES_REQUEST, {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t...blockerSources,\n\t\t\t\t\t\t\treservableId,\n\t\t\t\t\t\t\treservationId,\n\t\t\t\t\t\t\tserviceCategories\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst newState = {\n\t\t\t...state,\n\t\t\tserviceRequestsSentCount,\n\t\t};\n\n\t\tif (serviceRequestsSentCount === 0) {\n\t\t\tnewState.activeView = RESERVATION_SUMMARY_CONSTANTS.VIEWS.SAVE_SUCCESSFUL;\n\t\t}\n\n\t\tupdateState(newState);\n\t},\n\n\t[ACTIONS.SAVE_RESERVATION_FAILURE]: ({ action, updateState, state, dispatch }) => {\n\t\tconst {\n\t\t\tpayload: {\n\t\t\t\tdata: { error },\n\t\t\t\tstatus: statusCode,\n\t\t\t\tstatusText\n\t\t\t}\n\t\t} = action;\n\n\t\tif (utils.isRequestUnauthorized(statusCode, statusText)) {\n\t\t\tdispatch(ACTIONS.TRIGGER_UNAUTHORIZED_MODAL, {error});\n\t\t\treturn;\n\t\t}\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tactiveView: RESERVATION_SUMMARY_CONSTANTS.VIEWS.SAVE_FAILED\n\t\t});\n\t},\n\n\t[ACTIONS.SUBMIT_EXTRA_SERVICES_REQUEST_SUCCESS]: ({ action, updateState, dispatch }) => {\n\t\tupdateState(({ state }) => {\n\t\t\treturn multiEffectStateWrapper.handleRequestComplete({ ...state }, dispatch, action.payload.result.success);\n\t\t});\n\t},\n\n\t[ACTIONS.SUBMIT_EXTRA_SERVICES_REQUEST_FAILURE]: ({ action, updateState, dispatch }) => {\n\t\tconst {\n\t\t\tpayload: {\n\t\t\t\tdata: { error },\n\t\t\t\tstatus: statusCode,\n\t\t\t\tstatusText\n\t\t\t}\n\t\t} = action;\n\n\t\tif (utils.isRequestUnauthorized(statusCode, statusText)) {\n\t\t\tdispatch(ACTIONS.TRIGGER_UNAUTHORIZED_MODAL, {error});\n\t\t\treturn;\n\t\t}\n\t\t\t\n\t\tupdateState(({ state }) => {\n\t\t\treturn multiEffectStateWrapper.handleRequestComplete({ ...state }, dispatch, false);\n\t\t})\n\t},\n\n\t[ACTIONS.ALL_SUBMIT_SERVICE_REQUEST_SUCCESS]: ({ state, updateState }) => {\n\t\tupdateState({ ...state, activeView: RESERVATION_SUMMARY_CONSTANTS.VIEWS.SAVE_SUCCESSFUL });\n\t},\n\n\t[ACTIONS.ALL_SUBMIT_SERVICE_REQUEST_FAILURE]: ({ state, updateState }) => {\n\t\tupdateState({ ...state, activeView: RESERVATION_SUMMARY_CONSTANTS.VIEWS.SAVE_SUCCESSFUL });\n\t}\n}\n\n/**\n * Creates the reservation object to be consumed by our endpoints based on the current state and properties.\n * @param {*} viewInput\n * @returns {ReservationInput}\n */\nasync function createReservationObject({ action, state, properties }) {\n\tconst officeHelper = getOfficeHelper();\n\tconst subject = await officeHelper.getSubject();\n\n\tconst {\n\t\tselectedReservables,\n\t\tappointment: {\n\t\t\tstart,\n\t\t\tend,\n\t\t\tiCalUId,\n\t\t\tsensitivity\n\t\t},\n\t\treservableModule,\n\t\tuserConfig: {\n\t\t\ttime_simple_format: timeFormat,\n\t\t\ttimezone\n\t\t}\n\t} = properties;\n\n\tconst reservation = properties.reservation || {};\n\n\tconst {\n\t\tsys_id: reservationId,\n\t\tsubject: reservationSubject,\n\t\tsensitivity: reservationSensitivity,\n\t\tlocations: reservationLocations\n\t} = reservation;\n\n\tconst validSelectedReservables = selectedReservables.filter(reservable => !!reservable.sys_id && reservable.existsInWsd);\n\t\n\tconst isMulti = validSelectedReservables.length > 1;\n\tconst isUpdate = !!reservationId;\n\tconst reservationIsMulti = !!reservationLocations;\n\n\tconst reservationObj = {\n\t\texternal_ical: iCalUId,\n\t\tstart,\n\t\tend,\n\t\treservation_type: Constants.RESERVATION_TYPE_SPACE,\n\t\treservation_purpose: Constants.RESERVATION_PURPOSE_MEETING,\n\t\tsource: Constants.RESERVATION_SOURCE_EXCHANGE,\n\t\tsub_source: Constants.RESERVATION_SUB_SOURCE_OUTLOOK_ADDIN,\n\t\tlast_updated_source: Constants.RESERVATION_LAST_UPDATED_SOURCE_EXTERNAL_PROVIDER,\n\t\tlast_updated_sub_source: Constants.RESERVATION_SUB_SOURCE_OUTLOOK_ADDIN\n\t};\n\n\tif (isMulti || reservationIsMulti) {\n\t\treservationObj.reservables = validSelectedReservables.map(selectedReservable => ({\n\t\t\tsys_id: selectedReservable.sys_id,\n\t\t\tnumber_of_attendees: !isUpdate ? '1' : null\n\t\t}));\n\t} else {\n\t\treservationObj.location = validSelectedReservables[0].sys_id;\n\t\tif (!isUpdate)\n\t\t\treservationObj.number_of_attendees = '1';\n\t}\n\n\tif (!isUpdate)\n\t\treservationObj.reservable_module = reservableModule;\n\n\n\t// add subject and sensitivity values\n\tif (!isUpdate || (reservationSubject !== subject || reservationSensitivity.value !== sensitivity)) {\n\t\treservationObj.subject = subject || t('Draft {0}', formatUTCDateTimeForUser(start, timezone, timeFormat));\n\t\treservationObj.sensitivity = sensitivity;\n\t}\n\n\treturn reservationObj;\n}\n\n/**\n * prepare categories service requests object (to the format expected by reservation endpoint)\n * @param {*} addedServiceCategories - added service requests grouped by categories\n * @returns {LocationServiceRequests}\n */\nfunction prepareServiceCategoriesForSubmission(addedServiceCategories, deliveryTime) {\n\tif (!addedServiceCategories)\n\t\treturn null;\n\n\tconst addedServiceCategoriesEntries = Object.entries(addedServiceCategories);\n\tconst serviceCategories = addedServiceCategoriesEntries.map(([categoryId, serviceCategory]) => {\n\t\treturn {\n\t\t\tcategory: categoryId,\n\t\t\tcomment: serviceCategory.comment,\n\t\t\tflexibleServices: serviceCategory.addedServices.map(\n\t\t\t\t({\n\t\t\t\t\tcomment,\n\t\t\t\t\tflexibleServiceId,\n\t\t\t\t\tquantity,\n\t\t\t\t\tcancelFlag,\n\t\t\t\t\trequestId: extraServiceRequestId\n\t\t\t\t}) => ({\n\t\t\t\t\tcomment,\n\t\t\t\t\tdeliveryTime,\n\t\t\t\t\textraServiceRequestId,\n\t\t\t\t\tflexibleServiceId,\n\t\t\t\t\tquantity,\n\t\t\t\t\tcancelFlag\n\t\t\t\t})\n\t\t\t)\n\t\t}\n\t});\n\n\t// if there are no categories that have atleast one service, then return null\n\tif (!serviceCategories.some(category => category.flexibleServices.length !== 0))\n\t\treturn null;\n\n\treturn serviceCategories;\n}\n\n/**\n * Returns a new serviceCategories which only contain the services which are on the server, and sets them to be cancelled.\n * @param {LocationServiceRequests} serviceCategories \n * @returns {LocationServiceRequests}\n */\nfunction filterServicesToCancel(serviceCategories) {\n\tif (!serviceCategories)\n\t\treturn null;\n\n\treturn utils.mapObject(serviceCategories, (categoryId, serviceCategory) => {\n\t\tlet addedServices = serviceCategory.addedServices.reduce((newAddedServices, serviceRequest) => {\n\t\t\tif (!serviceRequest.requestId)\n\t\t\t\treturn newAddedServices;\n\n\t\t\tnewAddedServices.push({\n\t\t\t\t...serviceRequest,\n\t\t\t\tcancelFlag: true\n\t\t\t});\n\t\t\treturn newAddedServices;\n\t\t}, []);\n\n\t\treturn {\n\t\t\t...serviceCategory,\n\t\t\taddedServices\n\t\t};\n\t});\n}\n\n/**\n * check if there is any selected reservables (it could be empty if user remove it from the add-in or via outlook), move to search result view if there is none\n * @param {Reservable[]} selectedReservables \n * @param {string} view\n * @param {*} dispatch \n * @returns {boolean} true: if move to Result View is required\n */\nfunction _checkAndMoveToSearchResultView(selectedReservables, view, dispatch) {\n\tif (view !== RESERVATION_SUMMARY_CONSTANTS.VIEWS.RESERVATION_SUMMARY || utils.isArrayHasElement(selectedReservables))\n\t\treturn false;\n\n\tdispatch(ACTIONS.TRIGGER_NAVIGATION, { view: RESERVATION_SUMMARY_CONSTANTS.VIEWS.SEARCH_RESULTS });\n\treturn true;\n}\n\n/**\n * check if the selected reservables are all valid to send to WSD\n * @param {Reservable[]} selectedReservables \n * @param {string} type Type of the current reservation\n * @returns {boolean} - true if: has at least 1 available reservable, and no unavailable reservable. An unknown and a known avaialble one is a valid submission\n */\nfunction _checkSubmissionEligibility(selectedReservables, type) {\n\treturn type === APP_CONSTANTS.RECURRENCE_TYPES.SINGLE\n\t\t&& utils.isArrayHasElement(selectedReservables)\n\t\t&& selectedReservables.some(r => r.is_available && r.existsInWsd)\n\t\t&& !selectedReservables.some(r => !r.is_available);\n}\n\n/**\n * @typedef ReservationInput\n * @property {string} external_ical\n * @property {string} start\n * @property {string} end\n * @property {string} [location]\n * @property {string} [number_of_attendees]\n * @property {ReservableInput} [reservables]\n * @property {string} [subject]\n * @property {string} [sensitivity]\n * @property {string} [reservation_type]\n * @property {string} [reservation_sub_type]\n * @property {string} [reservation_purpose]\n * @property {string} [source]\n * @property {string} [sub_source]\n * @property {string} [last_updated_source]\n * @property {string} [last_updated_sub_source]\n */\n\n/**\n * @typedef ReservableInput\n * @property {string} sys_id\n * @property {string|number} number_of_attendees\n */\n\n/**\n * @typedef LocationServiceRequests\n * @property {string} category\n * @property {string} comment\n * @property {ServiceRequest[]} addedServices\n */\n\n/**\n* @typedef ServiceRequest\n* @property {string} flexibleServiceId\n* @property {string} deliveryTime\n* @property {string} quantity\n* @property {string} deliveryTime\n*/","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.card__header{display:flex;align-items:start}.card__header-left{flex:1;margin:0}.wsd-card{margin-bottom:12px;padding:12px;border:1px solid #ccc;border-radius:2px;background:#fff}.sn-wsd-moa-reservation-summary{height:100%;background-color:#f7f7f7}.header{padding:0 12px;display:flex;align-items:center}.header .link{margin-bottom:6px;text-align:right}.footer{background-color:#fff}.save-failed,.save-progress,.save-success .sn-wsd-moa-reservation-summary__body{padding:12px}.save-progress .sn-wsd-moa-reservation-summary__body{height:70%}.save-failed .sn-wsd-moa-reservation-summary__body{font-size:14px;padding-bottom:4px}.reservable-card>*{margin-bottom:4px}.reservable-card__body_text{margin-left:8px}.reservable-card__service{margin-left:24px}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis,.header .space-name .title{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.sn-wsd-moa-space-summary-card{margin-bottom:12px;padding:12px;border:1px solid #ccc;border-radius:2px;background:#fff}.header>div{margin-bottom:4px}.header .space-name{display:flex}.header .space-name .title{flex:1;margin-top:4px}.header .space-name .link{padding-left:12px}.header .space-details{margin-bottom:12px;padding-left:8px}.header .space-details div{margin-bottom:4px}.has-services,.subtotal{padding-top:12px;border-top:1px solid #ccc}.subtotal{display:block;margin-top:12px;text-transform:uppercase}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","export const ACTIONS = {\n\tSELECT_LOCATION_FOR_EDITING_SERVICES: 'SELECT_LOCATION_FOR_EDITING_SERVICES', \n\tRESERVABLE_SELECTED: 'RESERVABLE_SELECTED',\n};","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis,.header{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.sn-wsd-moa-services-summary{margin-bottom:12px}.sn-wsd-moa-services-summary:last-of-type{margin-bottom:0}.header{display:flex;align-items:center;padding:8px 0;border-top:1px solid #ccc;width:100%}.header .chevron{cursor:pointer}.header .header-text{width:100%}.header *{padding-left:8px}.body{display:none;margin-bottom:12px;padding-left:27px;transition:all .2s ease}.body .sub-category{margin-bottom:2px}.body .sub-category:last-of-type{margin-bottom:0}.is-open .display{display:block}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","import {actionTypes} from '@servicenow/ui-core';\nimport cloneDeep from 'lodash/cloneDeep';\nconst {COMPONENT_BOOTSTRAPPED} = actionTypes;\n\nconst SUB_CATEGORY_MODEL = {\n\tlabel: 'Sub Category Label',\n\taddedServices: [],\n\ttotalPrice: 0,\n\ttotalQuantity: 0,\n\tservicesLabels: [],\n\tservicesIds: [],\n};\n\nexport const actionHandlers = {\n\n\t[COMPONENT_BOOTSTRAPPED]: ({ properties, state, updateState }) => {\n\t\t// calculate all display items, such as categories and service labels when the component is loaded as it wont change here.\n\t\tconst servicesSummary = properties.serviceRequests.addedServices.reduce((serviceRequestsBySubCategories, serviceRequest) =>  {\n\t\t\tif (serviceRequest.cancelFlag)\n\t\t\t\treturn serviceRequestsBySubCategories;\n\n\t\t\tconst subCategoryId = serviceRequest.subCategory.value;\n\t\t\tconst subCategoryServiceRequests = serviceRequestsBySubCategories[subCategoryId] || cloneDeep(SUB_CATEGORY_MODEL);\n\n\t\t\tsubCategoryServiceRequests.totalPrice += serviceRequest.totalPrice;\n\t\t\tsubCategoryServiceRequests.totalQuantity += serviceRequest.quantity;\n\t\n\t\t\tif (subCategoryServiceRequests.servicesIds.indexOf(serviceRequest.flexibleServiceId) === -1) {\n\t\t\t\tsubCategoryServiceRequests.servicesIds.push(serviceRequest.flexibleServiceId);\n\t\t\t\tsubCategoryServiceRequests.servicesLabels.push(serviceRequest.flexibleServiceName);\n\t\t\t\tsubCategoryServiceRequests.label = serviceRequest.subCategory.display_value;\n\t\t\t}\n\n\t\t\tserviceRequestsBySubCategories[subCategoryId] = subCategoryServiceRequests;\n\t\t\treturn serviceRequestsBySubCategories;\n\t\t}, {});\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tservicesSummary\n\t\t});\n\t},\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis,.sn-wsd-moa-price-label,.sn-wsd-moa-price-label .label,.sn-wsd-moa-price-label .value{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.sn-wsd-moa-price-label .small{font-size:80%}.sn-wsd-moa-price-label .medium{font-size:100%}.sn-wsd-moa-price-label .large{font-size:120%}.left{display:flex}.left .label{flex:1;padding-right:5px}.centered{position:relative}.centered .label{text-align:center}.centered .value{position:absolute;top:0;right:0}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","export const view = (state) => {\n\tconst {properties: {mode, orientation, label, value}} = state;\n\n\treturn (\n\t\t<div className=\"sn-wsd-moa-price-label\">\n\t\t\t<div className={`${mode} ${orientation}`}>\n\t\t\t\t<div className=\"label\">{label}</div>\n\t\t\t\t<div className=\"value\">{value}</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import { t } from 'sn-translate';\nimport '@servicenow/now-button';\n\nimport '../sn-wsd-moa-price-label';\n\nexport const view = (state, {updateState}) => {\n\tconst {\n\t\tproperties: {\n\t\t\tserviceCategory: {\n\t\t\t\tlabel,\n\t\t\t\tcurrency_code,\n\t\t\t},\n\t\t\tserviceRequests: {\n\t\t\t\ttotalPrice,\n\t\t\t\ttotalQuantity,\n\t\t\t\taddedServices,\n\t\t\t}\n\t\t},\n\t\tisOpen,\n\t\tservicesSummary,\n\t} = state;\n\n\tif (addedServices.length === 0 || !addedServices.some(addedService => !addedService.cancelFlag))\n\t\treturn null;\n\n\treturn (\n\t\t<div className={`sn-wsd-moa-services-summary ${isOpen ? 'is-open' : ''}`}>\n\t\t\t<div className=\"header\">\n\t\t\t\t<now-button-iconic\n\t\t\t\t\tbare\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\ticon={`chevron-${isOpen ? 'down' : 'right'}-fill`}\n\t\t\t\t\ton-click={() => {updateState({ isOpen: !isOpen })}}\n\t\t\t\t\thidePadding={true}\n\t\t\t\t/>\n\t\t\t\t<sn-wsd-moa-price-label\n\t\t\t\t\ttitle={t('{0} ({1}) - {2} {3}', [label, totalQuantity, currency_code, totalPrice.toFixed(2)])}\n\t\t\t\t\tlabel={`${label} (${totalQuantity})`}\n\t\t\t\t\tvalue={isOpen ? '' : `${currency_code} ${totalPrice.toFixed(2)}`}\n\t\t\t\t\tclassName=\"header-text\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"body display\">\n\t\t\t\t{!isOpen ? '' : \n\t\t\t\t\tObject.entries(servicesSummary).map(([subCategoryId, subCategory]) => (\n\t\t\t\t\t\t<div key={subCategoryId} className={'sub-category'}>\n\t\t\t\t\t\t\t<sn-wsd-moa-price-label\n\t\t\t\t\t\t\t\ttitle={t('({0}) {1}: {2} - {3} {4}', [subCategory.totalQuantity, subCategory.label, subCategory.servicesLabels.join(', '), currency_code, subCategory.totalPrice.toFixed(2)])}\n\t\t\t\t\t\t\t\tlabel={`(${subCategory.totalQuantity}) ${subCategory.label}: ${subCategory.servicesLabels.join(', ')}`}\n\t\t\t\t\t\t\t\tvalue={`${currency_code} ${subCategory.totalPrice.toFixed(2)}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import { createCustomElement } from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { view } from './view';\nimport { actionHandlers } from './actionHandlers';\nimport styles from './styles.scss';\n\ncreateCustomElement('sn-wsd-moa-services-summary', {\n\trenderer: {type: snabbdom},\n\tproperties: {\n\t\tserviceCategory: {\n\t\t\tdefault: null\n\t\t},\n\t\tserviceRequests: {\n\t\t\tdefault: null\n\t\t}\n\t},\n\tinitialState: {\n\t\tisOpen: false,\n\t\tservicesSummary: null\n\t},\n\tview,\n\tstyles,\n\tactionHandlers\n});\n","import { t } from 'sn-translate';\nimport '@servicenow/now-text-link';\nimport '@servicenow/now-button';\nimport '@servicenow/now-heading';\n\nimport '../sn-wsd-moa-services-summary';\nimport '../sn-wsd-moa-price-label';\nimport { ACTIONS } from './actions';\nimport _isEmpty from 'lodash/isEmpty';\nimport * as utils from '../utils/generalUtils';\n\nexport const view = (state, { dispatch }) => {\n\tconst {properties: {extraServiceRequests, locationDetails, reservable, disableServices}} = state;\n\n\tconst item = resolveReservableForView(locationDetails, reservable);\n\tconst subtotalDetails = constructSubtotalDetails(extraServiceRequests);\n\tconst disabledClass = !item.isAvailable ? 'disable-card' : '';\n\n\tconst serviceCategoriesKeys = Object.keys(extraServiceRequests);\n\tconst reservableHasServices = serviceCategoriesKeys.length > 0 && serviceCategoriesKeys.some(serviceCategoriesKey =>\n\t\textraServiceRequests[serviceCategoriesKey].addedServices.some(extraServiceRequest => !extraServiceRequest.cancelFlag)\n\t);\n\n\treturn (\n\t\t<div className=\"sn-wsd-moa-space-summary-card\"> \n\t\t\t<div className=\"header\">\n\t\t\t\t<div className=\"space-name\">\n\t\t\t\t\t<now-heading\n\t\t\t\t\t\tclassName=\"title\"\n\t\t\t\t\t\tlabel={item.name}\n\t\t\t\t\t\tvariant=\"title-primary\"\n\t\t\t\t\t/>\n\t\t\t\t\t<now-text-link\n\t\t\t\t\t\tclassName=\"link\"\n\t\t\t\t\t\tlabel={t('Remove')}\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\ton-click={ () => dispatch(ACTIONS.RESERVABLE_SELECTED, {\n\t\t\t\t\t\t\t...reservable,\n\t\t\t\t\t\t\tis_selected: 'false'\n\t\t\t\t\t\t}) }\n\t\t\t\t\t\tconfigAria={{\"aria-label\": t('Remove') + ' ' + item.name}}/>\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\titem.isAvailable ? '' :\t\n\t\t\t\t\t<div className=\"space-availablity\">\n\t\t\t\t\t\t<now-highlighted-value label={item.availablityLabel} color=\"critical\" show-icon></now-highlighted-value>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t<div className={`space-details ${disabledClass}`}>\n\t\t\t\t\t<div>{t('Seats')} {item.capacity}</div>\n\t\t\t\t\t<div>{item.description}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={disabledClass}>\n\t\t\t\t{\n\t\t\t\t\t// all added service requests grouped by categories\n\t\t\t\t\t_isEmpty(extraServiceRequests) || !locationDetails ? '' : (\n\t\t\t\t\t\tObject.entries(extraServiceRequests).map(([categoryId, spaceCategoryExtraServiceRequests]) => (\n\t\t\t\t\t\t\t<div className=\"added-services\">\n\t\t\t\t\t\t\t\t<sn-wsd-moa-services-summary\n\t\t\t\t\t\t\t\t\tserviceCategory={locationDetails.flexible_services.find(flexibleServiceCategory => flexibleServiceCategory.category === categoryId)}\n\t\t\t\t\t\t\t\t\tserviceRequests={spaceCategoryExtraServiceRequests}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\t// add extra services action block\n\t\t\t\t\t!item.hasServices ? '' :\n\t\t\t\t\t<div className={`${reservableHasServices ? 'has-services' : ''} actions`}>\n\t\t\t\t\t{\n\t\t\t\t\t\tdisableServices || !item.isAvailable ? getUnavailableViewForServiceAction(item, disableServices) : (\n\t\t\t\t\t\t\t<now-button-bare\n\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\ticonStart=\"plus-outline\"\n\t\t\t\t\t\t\t\tlabel={reservableHasServices ? t('Add/manage extra services') : t('Add extra services')}\n\t\t\t\t\t\t\t\tconfigAria={{'aria-label': reservableHasServices ? t('Update extra services for {0}', item.name) : t('Add extra services for {0}', item.name)}}\n\t\t\t\t\t\t\t\ton-click={() => dispatch(ACTIONS.SELECT_LOCATION_FOR_EDITING_SERVICES, { currentLocationSysId: locationDetails.sys_id })}\n\t\t\t\t\t\t\t\thidePadding={true}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\t_isEmpty(subtotalDetails) || !reservableHasServices ? '' : (\n\t\t\t\t\t\t<sn-wsd-moa-price-label\n\t\t\t\t\t\t\tclassName=\"subtotal\"\n\t\t\t\t\t\t\tmode=\"large\"\n\t\t\t\t\t\t\tlabel={t('Subtotal')}\n\t\t\t\t\t\t\tvalue={`${subtotalDetails.currencyCode} ${subtotalDetails.price.toFixed(2)}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n/**\n * Construct the subtotal details for all categories\n * @param {Object}\n * @return {{price: string, currencyCode: string}}\n */\nfunction constructSubtotalDetails(extraServiceRequest) {\n\tif (_isEmpty(extraServiceRequest))\n\t\treturn null;\n\n\tconst categoryNames = Object.keys(extraServiceRequest);\n\tif (categoryNames.length === 0)\n\t\treturn null;\n\n\treturn categoryNames.reduce((accumulator, current) => {\n\t\tconst category = extraServiceRequest[current];\n\t\taccumulator.price += category.totalPrice;\n\n\t\tif (!accumulator.currencyCode)\n\t\t\taccumulator.currencyCode = category.categoryCurrencyCode;\n\n\t\treturn accumulator;\n\t}, {\n\t\tprice: 0,\n\t\tcurrencyCode: null\n\t});\n}\n\n/**\n * get view of the action block of unavailable item\n * @param {ResolvedReservable} item \n * @returns {string}\n */\n const getUnavailableViewForServiceAction = (item, reasonIsRecurring) => {\n\t if (reasonIsRecurring) {\n\t\t return <i>{t('Service request is not available for recurring reservation')}</i>;\n\t }\n\n\tif (!item.hasServices) \n\t\treturn '';\n\n\treturn <i>{t('Service request is not possible due to unavailablity')}</i>;\n}\n\n/**\n * Resolve reservable into an object that can be directly consumed by the front-end\n * @return {ResolvedReservable} a view model item\n */\nconst resolveReservableForView = (locationDetails, reservable) => {\n\tif(_isEmpty(locationDetails)) {\n\t\tlocationDetails = { \n\t\t\texistsInWsd: false,\n\t\t\tname: reservable.name,\n\t\t\tcapacity: 0, \n\t\t\tdetails: '',\n\t\t\tisAvailable: false,\n\t\t\tflexible_services: []\n\t\t};\n\t} else {\n\t\tlocationDetails.existsInWsd = true;\n\t}\n\n\tconst isAvailable = locationDetails.existsInWsd && reservable.is_available;\n\tconst availablityLabel = !locationDetails.existsInWsd\n\t\t? t('Not recognized in WSD') \n\t\t: (isAvailable ? '' : t('Unavailable'));\n\n\treturn {\n\t\tname: locationDetails.name,\n\t\tcapacity: locationDetails.capacity,\n\t\tdescription: utils.constructLocationDescription(locationDetails),\n\t\tisAvailable: isAvailable,\n\t\thasServices: utils.isArrayHasElement(locationDetails.flexible_services),\n\t\texistsInWsd: locationDetails.existsInWsd,\n\t\tavailablityLabel: availablityLabel\n\t}\n}\n\n/**\n * @typedef ResolvedReservable\n * @property {string} name\n * @property {number} capacity - 0 if unknown\n * @property {string} details - description \n * @property {boolean} isAvailable\n * @property {boolean} hasServices - whether services can be added to the item\n */","import { createCustomElement } from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { view } from './view';\nimport styles from './styles.scss';\n\ncreateCustomElement('sn-wsd-moa-space-summary-card', {\n\trenderer: {type: snabbdom},\n\tproperties: {\n\t\textraServiceRequests: {\n\t\t\tdefault: {}\n\t\t},\n\t\tlocationDetails: {\n\t\t\tdefault: null\n\t\t},\n\t\treservable: {\n\t\t\tdefault: null\n\t\t},\n\t\tdisableServices: {\n\t\t\tdefault: null\n\t\t}\n\t},\n\tview,\n\tstyles\n});\n","import { t } from 'sn-translate';\nimport { Fragment } from '@servicenow/ui-renderer-snabbdom';\nimport '@servicenow/now-text-link';\nimport '@servicenow/now-button';\nimport '@servicenow/now-loader';\nimport '@servicenow/now-heading';\nimport _isEmpty from 'lodash/isEmpty';\n\nimport { CONSTANTS } from '../sn-wsd-moa-app/constants';\nimport { CONSTANTS as RESERVATION_SUMMARY_CONSTANTS } from './constants';\nimport { ACTIONS } from './actions';\nimport * as utils from '../utils/generalUtils';\nimport '../sn-wsd-moa-layout';\nimport '../sn-wsd-moa-space-summary-card';\nimport '../sn-wsd-moa-price-label';\n\nexport const view = (...viewInputs) => {\n\tconst [state] = viewInputs;\n\tswitch (state.activeView) {\n\t\tcase RESERVATION_SUMMARY_CONSTANTS.VIEWS.SAVE_IN_PROGRESS:\n\t\t\treturn generateSaveInProgressView(...viewInputs);\n\t\tcase RESERVATION_SUMMARY_CONSTANTS.VIEWS.SAVE_SUCCESSFUL:\n\t\t\treturn generateReservationSavedBody(...viewInputs);\n\t\tcase RESERVATION_SUMMARY_CONSTANTS.VIEWS.SAVE_FAILED:\n\t\t\treturn generateReservationFailedBody(...viewInputs);\n\t\tcase RESERVATION_SUMMARY_CONSTANTS.VIEWS.RESERVATION_SUMMARY:\n\t\t\treturn generateReservationSummary(...viewInputs);\n\t\tdefault:\n\t\t\treturn generateReservationSummary(...viewInputs);\n\t}\n}\n\n/**\n * Generates the summary page\n * @param {*} state \n * @param {*} triggers \n * @returns {*}\n */\nfunction generateReservationSummary(state, { dispatch }) {\n\tconst {properties: {selectedReservables, locationsServiceCategories, locationsDetails, appointment}, isEligibleForSubmission} = state;\n\n\tif (_isEmpty(locationsDetails) && !selectedReservables.some(r => !r.existsInWsd))\n\t\treturn <div>{t('Preparing meeting...')}</div>\n\n\treturn (\t\n\t\t<div className=\"sn-wsd-moa-reservation-summary\" tabindex={0}>\n\t\t\t<sn-wsd-moa-layout>\n\t\t\t\t<div slot='layoutBody'>\n\t\t\t\t\t<div className=\"header\">\n\t\t\t\t\t\t<now-heading\n\t\t\t\t\t\t\tclassName=\"margin-top-default flex-1\"\n\t\t\t\t\t\t\tlabel={t('Your reservation')}\n\t\t\t\t\t\t\tvariant=\"header-tertiary\"\n\t\t\t\t\t\t\twontWrap={true}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<now-text-link className=\"link\"\n\t\t\t\t\t\t\ttabIndex={0}\n\t\t\t\t\t\t\thook-insert={vnode => vnode.elm.focus()}\n\t\t\t\t\t\t\tlabel={t('Change selections')}\n\t\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\t\ton-click={() => { dispatch(ACTIONS.TRIGGER_NAVIGATION, {\n\t\t\t\t\t\t\t\tview: CONSTANTS.VIEWS.SEARCH_RESULTS\n\t\t\t\t\t\t\t})}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"body\">\n\t\t\t\t\t\t{!utils.isArrayHasElement(selectedReservables) \n\t\t\t\t\t\t\t? (<div>{t('No location has been selected!')}</div>) \n\t\t\t\t\t\t\t: selectedReservables.map(reservable => (\n\t\t\t\t\t\t\t\t<sn-wsd-moa-space-summary-card\n\t\t\t\t\t\t\t\t\textraServiceRequests={locationsServiceCategories[reservable.sys_id]}\n\t\t\t\t\t\t\t\t\tlocationDetails={locationsDetails[reservable.sys_id]}\n\t\t\t\t\t\t\t\t\treservable={reservable}\n\t\t\t\t\t\t\t\t\tdisableServices={appointment.type !== CONSTANTS.RECURRENCE_TYPES.SINGLE}\n\t\t\t\t\t\t\t\t/>))\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div slot=\"layoutFooter\" className='footer action-buttons'>\n\t\t\t\t\t<now-button\n\t\t\t\t\t\tlabel={ t('Save reservation') }\n\t\t\t\t\t\tsize='md'\n\t\t\t\t\t\tvariant='primary'\n\t\t\t\t\t\tdisabled={!isEligibleForSubmission}\n\t\t\t\t\t\ton-click={ () => dispatch(ACTIONS.SAVE_RESERVATION) } />\n\t\t\t\t</div>\n\t\t\t</sn-wsd-moa-layout>\n\t\t</div>\n\t);\n}\n\n/**\n * Generates the save in progress view\n * @returns {*}\n */\nfunction generateSaveInProgressView() {\n\treturn (\n\t\t<div className=\"sn-wsd-moa-reservation-summary save-progress\">\n\t\t\t<div className=\"sn-wsd-moa-reservation-summary__body center-horizontal-vertical\">\n\t\t\t\t<h1 className=\"heading\">{ t('Booking reservation') }</h1>\n\t\t\t\t<div className=\"body-text\">\n\t\t\t\t\t{ t(`Please don't send the invitation while the reservation is being processed. This may take up to 30 seconds.`) }\n\t\t\t\t</div>\n\n\t\t\t\t<now-loader label={ t('Loading...') } />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n/**\n * Generates the view when reservation is sync'd but services might or might not have\n * @param {*} state \n * @param {*} triggers\n * @returns {*}\n */\nfunction generateReservationSavedBody(...viewInputs) {\n\tconst [ state ] = viewInputs;\n\tconst {\n\t\tsavedReservables,\n\t\tsaveServicesFailed,\n\t\tproperties: {\n\t\t\tlocationsServiceCategories,\n\t\t\tlocationsDetails\n\t\t}\n\t} = state;\n\n\treturn (\n\t\t<div className=\"sn-wsd-moa-reservation-summary save-success\">\n\t\t\t<sn-wsd-moa-layout>\n\t\t\t\t<div slot=\"layoutBody\">\n\t\t\t\t\t<div className=\"sn-wsd-moa-reservation-summary__body\">\n\t\t\t\t\t\t<h2 className=\"heading\">{ t('Your reservation will be added to your meeting invite.') }</h2>\n\t\t\t\t\t\t<h3 className=\"heading\">{ t('Here are the details of your saved reservation:') }</h3>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t!savedReservables ? '' : savedReservables.map(savedReservable => {\n\t\t\t\t\t\t\t\tconst locationDetails = locationsDetails[savedReservable.sys_id];\n\t\t\t\t\t\t\t\tif (!locationDetails)\n\t\t\t\t\t\t\t\t\treturn '';\n\n\t\t\t\t\t\t\t\tconst locationServiceCategories = locationsServiceCategories[savedReservable.sys_id];\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className=\"reservable-card wsd-card\">\n\t\t\t\t\t\t\t\t\t\t<now-heading\n\t\t\t\t\t\t\t\t\t\t\tlabel={savedReservable.name}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"title-primary\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<div className=\"reservable-card__body_text\">{ t('Seats {0}', locationDetails.capacity) }</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"reservable-card__body_text\">{ utils.constructLocationDescription(locationDetails) }</div>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t!locationServiceCategories ? '' : Object.values(locationServiceCategories).map(serviceCategory => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst hasServices = serviceCategory.addedServices.some(addedService => !addedService.cancelFlag);\n\t\t\t\t\t\t\t\t\t\t\t\tif (!hasServices)\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn '';\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst serviceCategoryClassNames = ['reservable-card__service'];\n\t\t\t\t\t\t\t\t\t\t\t\tlet serviceCategoryText = '';\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (!saveServicesFailed)\n\t\t\t\t\t\t\t\t\t\t\t\t\tserviceCategoryText = t('Added {0}', serviceCategory.categoryFriendlyName.toLowerCase());\n\t\t\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\t\t\tserviceCategoryClassNames.push('error-text');\n\t\t\t\t\t\t\t\t\t\t\t\t\tserviceCategoryText = t('Unable to add {0}', serviceCategory.categoryFriendlyName.toLowerCase());\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className={serviceCategoryClassNames.join(' ')}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ serviceCategoryText }\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div slot=\"layoutFooter\" className=\"footer action-buttons\">\n\t\t\t\t\t<now-button\n\t\t\t\t\t\tlabel={ t('See details/make changes') }\n\t\t\t\t\t\tsize=\"md\"\n\t\t\t\t\t\ton-click={ () => handleEditReservationButtonClicked(true, ...viewInputs) } />\n\t\t\t\t</div>\n\t\t\t</sn-wsd-moa-layout>\n\t\t</div>\n\t);\n}\n\n/**\n * View for when reservation failed to insert/update\n * @param {*} state\n * @param {*} triggers\n * @returns {*}\n */\nfunction generateReservationFailedBody(...viewInputs) {\n\treturn (\n\t\t<div className=\"sn-wsd-moa-reservation-summary save-failed\">\n\t\t\t<h1 className=\"heading\">{ t('Unable to create reservation') }</h1>\n\t\t\t\n\t\t\t<div className=\"sn-wsd-moa-reservation-summary__body\">\n\t\t\t\t{ t('The reservation and extra services could not be requested.') }\n\t\t\t</div>\n\t\t\t<div className=\"action-buttons\">\n\t\t\t\t<now-button\n\t\t\t\t\tlabel={ t('See details/make changes') }\n\t\t\t\t\ton-click={ () => handleEditReservationButtonClicked(false, ...viewInputs) } />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n/**\n * Handles when the edit reservation button is clicked on the save completed view\n * @param {boolean} reloadReservation\n * @param {*} state \n * @param {*} triggers \n */\nfunction handleEditReservationButtonClicked(reloadReservation, state, { updateState, dispatch }) {\n\tupdateState({...state, activeView: RESERVATION_SUMMARY_CONSTANTS.VIEWS.RESERVATION_SUMMARY });\n\n\tif (reloadReservation) // reservation save did not fail \n\t\tdispatch(ACTIONS.TRIGGER_LOAD_RESERVATION);\n}","import { createCustomElement } from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { view } from './view';\nimport styles from './styles.scss';\nimport { ACTIONS } from './actions';\nimport { actionHandlers } from './actionHandlers';\nimport { CONSTANTS as RESERVATION_SUMMARY_CONSTANTS } from './constants';\n\ncreateCustomElement('sn-wsd-moa-reservation-summary', {\n\trenderer: {type: snabbdom},\n\tproperties: {\n\t\tselectedReservables: {\n\t\t\tdefault: []\n\t\t},\n\t\tappointment: {\n\t\t\tdefault: {}\n\t\t},\n\t\treservableModule: {\n\t\t\tdefault: null\n\t\t},\n\t\tlocationsServiceCategories: {\n\t\t\tdefault: {}\n\t\t},\n\t\tlocationsDetails: {\n\t\t\tdefault: null\n\t\t},\n\t\treservation: {\n\t\t\tdefault: null\n\t\t},\n\t\tuserConfig: {\n\t\t\tdefault: null\n\t\t},\n\t\tdisableServices: {\n\t\t\tdefault: false\n\t\t}\n\t},\n\tinitialState: {\n\t\tactiveView: RESERVATION_SUMMARY_CONSTANTS.VIEWS.RESERVATION_SUMMARY,\n\t\tserviceRequestSentCount: 0,\n\t\tserviceRequestsCompletedCount: 0,\n\t\tsaveServicesFailed: false,\n\t\tisEligibleForSubmission: false,\n\t\tsavedReservables: null\n\t},\n\tview,\n\tstyles,\n\tactions: ACTIONS,\n\tactionHandlers\n});\n","import {createHttpEffect} from '@servicenow/ui-effect-http';\nimport {ACTIONS} from '../actions';\n\nexport const searchReservables = createHttpEffect('api/sn_wsd_rsv/search/reservable', {\n\tqueryParams: ['reservable_module', 'start', 'end', 'q', 'reserved_reservables', 'reservation_ids', 'include_standard_services', 'include_reservable_purposes', 'next_item_index', 'page_size'],\n\tsuccessActionType: ACTIONS.ON_SEARCH_SUCCESS,\n\terrorActionType: ACTIONS.ON_SEARCH_FAILED,\n\tbatch: false\n});","import { ACTIONS } from './actions';\nimport { t } from 'sn-translate';\nimport { searchReservables } from './effects/searchEffect';\nimport * as utils from '../utils/generalUtils';\nimport _isEmpty from 'lodash/isEmpty';\n\nexport const actionHandlers = {\n\t\n\t[ACTIONS.TRIGGER_SEARCH]: async ({dispatch, properties, action, state, updateState}) => {\n\t\tconst {searchRequest, reservation, reservables, appointment: { start, end }} = properties;\n\t\tconst resetSearchPagination = action.payload && action.payload.reset;\n\n\t\tif (resetSearchPagination)\n\t\t\tdispatch(ACTIONS.RESET_LOADED_RESERVABLES);\n\n\t\tconst reservable_module = searchRequest.defaultReservableModule.value;\n\t\tconst q = _constructEncodedQuery(properties);\n\t\tconst searchRequestParam = {\n\t\t\treservable_module,\n\t\t\tq,\n\t\t\tstart,\n\t\t\tend,\n\t\t\tinclude_standard_services: false,\n\t\t\tinclude_reservable_purposes: false\n\t\t};\n\n\t\tif (searchRequest.pageSize)\n\t\t\tsearchRequestParam.page_size = searchRequest.pageSize;\n\n\n\t\tif (!_isEmpty(reservation)) {\n\t\t\t// resolving reservation sysIds\n\t\t\tconst reservationSysIds = [reservation.sys_id];\n\t\t\tconst reservedReservableSysIds = [];\n\n\t\t\tif(reservation.locations) {\n\t\t\t\t// multi-reservation\n\t\t\t\treservation.locations.map(loc => {\n\t\t\t\t\treservedReservableSysIds.push(loc.sys_id);\n\t\t\t\t\treservationSysIds.push(loc.reservation.sys_id);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// single-reservation\n\t\t\t\treservedReservableSysIds.push(reservation.location.sys_id);\n\t\t\t}\t\n\n\t\t\tconst selectedReservedReservables = filterSelectedReservedReservables(reservables, reservedReservableSysIds);\n\n\t\t\tsearchRequestParam.reservation_ids = reservationSysIds.join(',');\n\t\t\tconst selectedReservedReservablesStr = selectedReservedReservables.join(',')\n\t\t\tif (selectedReservedReservablesStr)\n\t\t\t\tsearchRequestParam.reserved_reservables = selectedReservedReservablesStr;\n\t\t}\n\n\t\tif (!resetSearchPagination) {\n\t\t\tsearchRequestParam.next_item_index = state.nextItemIndex;\n\t\t}\n\n\t\tdispatch(ACTIONS.REQUEST_SPACES, searchRequestParam);\n\n\t\tif (resetSearchPagination) {\n\t\t\tupdateState({\n\t\t\t\t...state,\n\t\t\t\tnextItemIndex: null,\n\t\t\t\tsearchHasMore: false\n\t\t\t});\n\t\t}\n\t},\n\n\t[ACTIONS.REQUEST_SPACES]: searchReservables,\n\n\t[ACTIONS.ON_SEARCH_SUCCESS]: ({action, dispatch, updateState, state}) => {\n\t\tconst {payload: {result}} = action;\n\t\tconst reservables = result && utils.isArrayHasElement(result.reservableUnits) ? result.reservableUnits : [];\n\t\t// make sure the responded reservable doesn't override is_selected properties\n\t\treservables.forEach(r => {\n\t\t\tr.is_selected = false; \n\t\t\tr.existsInWsd = true;\n\t\t});\n\n\t\tdispatch(ACTIONS.RESERVABLES_PAGE_LOADED, { \n\t\t\treservables\n\t\t});\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\thasInitSearched: true,\n\t\t\tnextItemIndex: result.nextItemIndex,\n\t\t\tsearchHasMore: result.hasMore\n\t\t})\n\t},\n\n\t[ACTIONS.ON_SEARCH_FAILED]: ({action, dispatch}) => {\n\t\tconst {\n\t\t\tpayload: {\n\t\t\t\tdata: { error },\n\t\t\t\tstatus: statusCode,\n\t\t\t\tstatusText\n\t\t\t}\n\t\t} = action;\n\n\t\tif (utils.isRequestUnauthorized(statusCode, statusText)) {\n\t\t\tdispatch(ACTIONS.TRIGGER_UNAUTHORIZED_MODAL, {error});\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch(ACTIONS.OPEN_NOW_MODAL, {\n\t\t\theaderLabel: t('Unable to find locations'),\n\t\t\tcontent: error.message\n\t\t});\n\t},\n\n\t[ACTIONS.ON_SEARCH_BUTTON_CLICKED]: ({updateState, state}) => {\n\t\tupdateState({\n\t\t\t...state,\n\t\t\thasInitSearched: false\n\t\t});\n\t}\n};\n\n/**\n * Helper method to construct the encoded query for the Search API\n * @param {*}\n * @return {string}\n */\n function _constructEncodedQuery(properties) {\n\tconst {building, floors, capacity} = properties.searchRequest;\n\tlet q = `building=${building.value}`;\n\n\tif (floors.value)\n\t\tq += `^floorIN${floors.value}`;\n\n\tif (capacity)\n\t\tq += `^capacity>=${capacity}`;\n\n\tq +=  '^emailISNOTEMPTY'\n\treturn q;\n}\n\n/**\n * Filters out only the selected reserved reservables.\n * @param {*} reservables \n * @param {string[]} reservedReservableSysIds \n * @returns {string[]}\n */\nfunction filterSelectedReservedReservables(reservables, reservedReservableSysIds) {\n\treturn reservedReservableSysIds.filter(reservedReservableSysId => {\n\t\tconst reservable = reservables.find(r => r.sys_id === reservedReservableSysId);\n\t\treturn reservable && reservable.is_selected;\n\t})\n}","import { actionTypes } from '@servicenow/ui-core';\n\nimport { ACTIONS } from './actions'\n\nconst {COMPONENT_BOOTSTRAPPED, COMPONENT_DOM_READY} = actionTypes;;\n\nexport const actionHandlers = {\n\t[COMPONENT_BOOTSTRAPPED]: ({ dispatch }) => {\n\t\tdispatch(ACTIONS.TRIGGER_SEARCH, {reset: true});\n\t},\n\n\t[COMPONENT_DOM_READY]: ({action}) => {\n\t\tconst {payload: {host}} = action;\n\t\tconst resultWrapper = host.shadowRoot.querySelector('.search-result-wrapper');\n\t\t\n\t\tif (resultWrapper)\n\t\t\tresultWrapper.focus();\n\t}\n};","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.search-result-wrapper{height:100%}.search-details{display:flex;flex-direction:column}.search-details *{padding-bottom:5px}.header__title{display:flex;margin-bottom:5px}.header__title h3{margin:0;color:#637274;font-size:120%;font-weight:400}.loading{display:flex}.loading .icon{padding-right:8px}.border{margin:15px 0;border-bottom:1px solid #ccc}.search-results__load-more-button{text-align:center;padding:4px}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis,.space-card .space-card-main__title{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.space-card{display:flex;align-items:center;padding:12px;border-bottom:1px solid #ccc;transition:all .5s ease}.space-card:hover{background-color:#e2e2e2}.space-card .space-card-actions{width:30px}.space-card .space-card-main{width:calc(100% - 30px)}.space-card .space-card-main>div{margin-bottom:5px}.space-card .space-card-main__title{font-size:120%}.space-card .space-card-main__subtitle{display:flex;align-items:center;color:#637274;font-size:100%}.space-card .space-card-main__subtitle *{padding-right:5px}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","module.exports = __TECTONIC__$servicenow_now_highlighted_value;","module.exports = __TECTONIC__$servicenow_now_record_checkbox;","import { t } from 'sn-translate';\nimport '@servicenow/now-record-checkbox';\nimport '@servicenow/now-icon';\nimport '@servicenow/now-highlighted-value';\n\nimport { ACTIONS } from './actions';\n\nexport const view = (state, {dispatch}) => {\n\tconst {properties: {reservable}} = state;\n\tconst isEligibleForSubmit = reservable.is_available && reservable.existsInWsd;\n\tconst reservableCssClass = isEligibleForSubmit ? '' :'disable-card';\n\n\treturn (\n\t\t<div className={`space-card ${reservableCssClass}`}>\n\t\t\t<div className=\"space-card-actions\">\n\t\t\t\t<now-record-checkbox\n\t\t\t\t\tconfig-aria={{'aria-label': t(`Select the space ${reservable.name}`)}}\n\t\t\t\t\tname={`space-card__checkbox-${reservable.sys_id}`}\n\t\t\t\t\tvalue={reservable.is_selected}\n\t\t\t\t\tonValueChange={(event) => {\n\t\t\t\t\t\tdispatch(ACTIONS.RESERVABLE_SELECTED, {\n\t\t\t\t\t\t\t...reservable,\n\t\t\t\t\t\t\tis_selected: String(event.value)\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t\treadonly={!isEligibleForSubmit}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"space-card-main\">\n\t\t\t\t<div className=\"space-card-main__title\">\n\t\t\t\t\t{reservable.name}\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\tisEligibleForSubmit ? '' : \n\t\t\t\t\t<div className=\"space-card-main__availability\">\n\t\t\t\t\t\t<now-highlighted-value \n\t\t\t\t\t\t\tlabel={reservable.existsInWsd? t('Unavailable') : t('Unknown')} \n\t\t\t\t\t\t\tcolor=\"critical\" \n\t\t\t\t\t\t\tshow-icon>\n\t\t\t\t\t\t</now-highlighted-value>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t<div className=\"space-card-main__subtitle\">\n\t\t\t\t\t<now-icon icon=\"user-group-outline\" size=\"md\"/> {reservable.capacity}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n};","import { createCustomElement } from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { ACTIONS } from './actions';\nimport { view } from './view';\nimport styles from './styles.scss';\n\ncreateCustomElement('sn-wsd-moa-space-card', {\n\trenderer: {type: snabbdom},\n\tactions: ACTIONS,\n\tview,\n\tstyles,\n\tproperties: {\n\t\treservable: {\n\t\t\tdefault: { name: 'Empty reservable', existsInWsd: false }\n\t\t}\n\t}\n});\n","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.layout{height:100%;display:flex;flex-direction:column}.layout__body{flex:1}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","module.exports = __TECTONIC__$servicenow_now_label_value;","import { Fragment } from '@servicenow/ui-renderer-snabbdom';\nimport { t } from 'sn-translate';\nimport '@servicenow/now-text-link';\nimport '@servicenow/now-button';\nimport '@servicenow/now-heading';\nimport '@servicenow/now-label-value';\nimport '@servicenow/now-loader';\n\nimport * as utils from '../utils/generalUtils';\nimport { ACTIONS } from './actions';\nimport { CONSTANTS as APP_CONSTANTS } from '../sn-wsd-moa-app/constants';\nimport '../sn-wsd-moa-layout';\nimport '../sn-wsd-moa-space-card';\n\nexport const view = (...viewInputs) => {\n\tconst [state, {dispatch}] = viewInputs;\n\tconst {properties: {reservables, searchRequest: {building, floors, capacity}}} = state;\n\tconst hasSelectedReservables = reservables.some(utils.filterSelectedReservables);\n\tconst floorNames = utils.isArrayHasElement(floors.displayValue) ? floors.displayValue.join(', ') : '';\n\n\treturn (\n\t\t<div className=\"search-result-wrapper\" tabindex={0}>\n\t\t\t<sn-wsd-moa-layout>\n\t\t\t\t<div slot='layoutBody' className=\"body\">\n\t\t\t\t\t<now-heading\n\t\t\t\t\t\tclassName=\"margin-top-default\"\n\t\t\t\t\t\tlabel={t('Reserve a space')}\n\t\t\t\t\t\tvariant=\"header-tertiary\"\n\t\t\t\t\t\twontWrap={true}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"header\">\n\t\t\t\t\t\t<div className=\"header__title\">\n\t\t\t\t\t\t\t<h3 className=\"flex-1\">\n\t\t\t\t\t\t\t\t{t('Showing search results for')}:\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<now-button-bare\n\t\t\t\t\t\t\t\tlabel={t('Edit')}\n\t\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\thidePadding={true}\n\t\t\t\t\t\t\t\ton-click={() => dispatch(ACTIONS.TRIGGER_NAVIGATION, { view: APP_CONSTANTS.VIEWS.SEARCH_FILTER })}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"search-details\">\n\t\t\t\t\t\t\t<now-label-value-inline\n\t\t\t\t\t\t\t\tlabel={`${t('Location')}:`}\n\t\t\t\t\t\t\t\tvalue={building.displayValue}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{!floorNames ? '' : (\n\t\t\t\t\t\t\t\t<now-label-value-inline\n\t\t\t\t\t\t\t\t\tlabel={`${t('Floor')}:`}\n\t\t\t\t\t\t\t\t\tvalue={floorNames}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<now-label-value-inline\n\t\t\t\t\t\t\t\tlabel={`${t('Capacity')}:`}\n\t\t\t\t\t\t\t\tvalue={capacity}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"border\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{constructAvailableSpacesView(...viewInputs)}\n\t\t\t\t</div>\n\t\t\t\t<div slot=\"layoutFooter\" className='footer action-buttons'>\n\t\t\t\t\t<now-button\n\t\t\t\t\t\tlabel={t('Save and next')}\n\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\tsize=\"md\"\n\t\t\t\t\t\tdisabled={!hasSelectedReservables}\n\t\t\t\t\t\ton-click={() => {\n\t\t\t\t\t\t\thasSelectedReservables && dispatch(ACTIONS.ON_SAVE_RESERVABLES)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</sn-wsd-moa-layout>\n\t\t</div>\n\t);\n}\n\n/**\n * Construct the available spaces view\n * @param {*} state \n * @param {*} triggers\n * @return {*}\n */\nfunction constructAvailableSpacesView(state, {dispatch}) {\n\tconst { properties: {hasInitSearched, reservables, searchHasMore} } = state;\n\t\n\tif (utils.isArrayHasElement(reservables) && hasInitSearched) {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<now-heading\n\t\t\t\t\tlabel={t('Available spaces')}\n\t\t\t\t\tvariant=\"title-primary\"\n\t\t\t\t/>\n\t\t\t\t{reservables.map(reservable => (\n\t\t\t\t\t<sn-wsd-moa-space-card reservable={reservable}/>\n\t\t\t\t))}\n\t\t\t\t{ \n\t\t\t\t\t!searchHasMore ? '' :\n\t\t\t\t\t\t<div className=\"search-results__load-more-button\">\n\t\t\t\t\t\t\t<now-button-bare\n\t\t\t\t\t\t\t\tlabel={t('Load more')}\n\t\t\t\t\t\t\t\ton-click={() => dispatch(ACTIONS.TRIGGER_SEARCH)}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</Fragment>\n\t\t);\n\t} else if (!utils.isArrayHasElement(reservables) && hasInitSearched) {\n\t\treturn (\n\t\t\t<p className=\"hint-text\">\n\t\t\t\t{t('There are no available results for your search.')}\n\t\t\t</p>\n\t\t);\n\t}\n\n\treturn (\n\t\t<p className=\"hint-text loading\">\n\t\t\t<now-loader className=\"icon\" size=\"md\"/>\n\t\t\t{t('Loading reservable information...')}\n\t\t</p>\n\t)\n}\n","import { createCustomElement } from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { ACTIONS } from './actions';\nimport { view } from './view';\nimport styles from './styles.scss';\nimport { actionHandlers } from './actionHandlers';\n\ncreateCustomElement('sn-wsd-moa-search-result', {\n\trenderer: {type: snabbdom},\n\tproperties: {\n\t\treservables: {\n\t\t\tdefault: []\n\t\t},\n\t\tsearchRequest: {\n\t\t\tdefault: {}\n\t\t},\n\t\thasInitSearched: {\n\t\t\tdefault: false\n\t\t},\n\t\tsearchHasMore: {\n\t\t\tdefault: false\n\t\t}\n\t},\n\tview,\n\tstyles,\n\tactions: ACTIONS,\n\tactionHandlers\n});\n","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-default{margin-top:12px}.unselectable{user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.hide-scrollbar{overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}.hide-scrollbar::-webkit-scrollbar{width:0;height:0}.body{padding:0 12px}.footer{border-top:1px solid #ccc}.action-buttons{display:flex;padding:6px}.action-buttons>now-button{flex:1;padding:6px;width:100%}.cursor-pointer{cursor:pointer}.hint-text{color:grey}.pull-right{float:right}.input-default{font-family:Source Sans Pro,Helvetica Neue,helvetica,arial,sans-serif;font-size:12px;width:100%;border:0;flex:1;color:#4a4948}.input-default:disabled{background-color:#fff}.disable-card{opacity:.6}.disable-card:hover{cursor:not-allowed}.heading{font-weight:400}.center-horizontal-vertical{justify-content:center;height:100%}.center-horizontal-vertical,.display-flex-column{display:flex;flex-direction:column}.flex-1{flex:1}.flex-0{flex:0}.full-width{width:100%}.ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.error-text{color:#c83c36}.text-uppercase{text-transform:uppercase}.sn-wsd-moa-search-filter{height:100%}.sn-wsd-moa-search-filter .input-field{margin-bottom:12px}.search-btn{width:100%}\", \"\"]);\n\n// exports\n","\n        var result = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/postcss-loader/src/index.js??ref--6-2!../../node_modules/sass-loader/lib/loader.js??ref--6-3!./styles.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","module.exports = __TECTONIC__$servicenow_now_input;","module.exports = __TECTONIC__$servicenow_now_record_field_lookup_connected;","import { t } from 'sn-translate';\nimport '@servicenow/now-record-field-lookup-connected';\nimport '@servicenow/now-button';\nimport '@servicenow/now-heading';\nimport '@servicenow/now-input';\n\nimport * as utils from '../utils/generalUtils';\n\nimport { CONSTANTS } from './constants';\nimport { ACTIONS } from './actions';\n\nexport const view = (state, {updateState, dispatch}) => {\n\tconst {building, floors, capacity} = state;\n\n\tconst isValidCapacity = () => {\n\t\tif (!utils.isValidNumber(capacity))\n\t\t\treturn false;\n\t\t\n\t\tif (capacity < 1)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\n\treturn (\t\n\t\t<div className=\"sn-wsd-moa-search-filter\">\n\t\t\t<sn-wsd-moa-layout>\n\t\t\t\t<div slot='layoutBody' className=\"body\">\n\t\t\t\t\t<now-heading\n\t\t\t\t\t\tclassName=\"margin-top-default\"\n\t\t\t\t\t\tlabel={t('Reserve a space')}\n\t\t\t\t\t\tvariant=\"header-tertiary\"\n\t\t\t\t\t\twontWrap={true}\n\t\t\t\t\t/>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className=\"input-field\">\n\t\t\t\t\t\t\t<now-record-field-lookup-connected\n\t\t\t\t\t\t\t\tlabel={t('Building')}\n\t\t\t\t\t\t\t\tname={CONSTANTS.RECORD_PICKER.BUILDING}\n\t\t\t\t\t\t\t\ttableName={CONSTANTS.TABLES.BUILDING}\n\t\t\t\t\t\t\t\tfieldName=\"name\"\n\t\t\t\t\t\t\t\tvalue={building.value}\n\t\t\t\t\t\t\t\tdisplayValue={building.displayValue}\n\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"input-field\">\n\t\t\t\t\t\t\t<now-record-field-lookup-connected\n\t\t\t\t\t\t\t\tlabel={t('Floor')}\n\t\t\t\t\t\t\t\tname={CONSTANTS.RECORD_PICKER.FLOOR}\n\t\t\t\t\t\t\t\ttableName={CONSTANTS.TABLES.FLOOR}\n\t\t\t\t\t\t\t\tfieldName=\"name\"\n\t\t\t\t\t\t\t\tadditionalQueryString={`building=${building.value}`}\n\t\t\t\t\t\t\t\tmultiSelection={!!building.value}\n\t\t\t\t\t\t\t\tvalue={floors.value}\n\t\t\t\t\t\t\t\tdisplayValue={floors.displayValue}\n\t\t\t\t\t\t\t\treadonly={!building.value}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"input-field\">\n\t\t\t\t\t\t\t<now-input\n\t\t\t\t\t\t\t\tclassName=\"full-width\"\n\t\t\t\t\t\t\t\tlabel={t('Capacity')}\n\t\t\t\t\t\t\t\tname=\"capacity\"\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tvalue={capacity}\n\t\t\t\t\t\t\t\tinvalid={!isValidCapacity()}>\n\t\t\t\t\t\t\t\t<now-button-iconic\n\t\t\t\t\t\t\t\t\tbare\n\t\t\t\t\t\t\t\t\tslot=\"end\"\n\t\t\t\t\t\t\t\t\ticon=\"minus-fill\"\n\t\t\t\t\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\t\t\t\t\tdisabled={!utils.isValidNumber(capacity)}\n\t\t\t\t\t\t\t\t\ton-click={() => utils.isValidNumber(capacity) && updateState({...state, capacity: Number(capacity) - 1})}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<now-button-iconic\n\t\t\t\t\t\t\t\t\tbare\n\t\t\t\t\t\t\t\t\tslot=\"end\"\n\t\t\t\t\t\t\t\t\ticon=\"plus-fill\"\n\t\t\t\t\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\t\t\t\t\tdisabled={!utils.isValidNumber(capacity)}\n\t\t\t\t\t\t\t\t\ton-click={() => utils.isValidNumber(capacity) && updateState({...state, capacity: Number(capacity) + 1})}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</now-input>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<now-button\n\t\t\t\t\t\t\tclassName=\"search-btn\"\n\t\t\t\t\t\t\tlabel={t('Search')}\n\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\tsize=\"md\"\n\t\t\t\t\t\t\ton-click={() => building.value && isValidCapacity() && dispatch(ACTIONS.ON_SEARCH_BUTTON_CLICKED)}\n\t\t\t\t\t\t\tdisabled={!building.value || !isValidCapacity()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</sn-wsd-moa-layout>\n\t\t</div>\n\t);\n}\n","import { actionTypes } from '@servicenow/ui-core';\nimport { CONSTANTS } from './constants';\nimport { CONSTANTS as APP_CONSTANTS } from '../sn-wsd-moa-app/constants';\nimport { ACTIONS } from './actions';\n\nconst {COMPONENT_BOOTSTRAPPED} = actionTypes;\n\nexport const actionHandlers = {\n\t[COMPONENT_BOOTSTRAPPED]: ({state, properties, updateState}) => {\n\t\tconst {searchRequest: {building, floors, capacity}} = properties;\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tbuilding,\n\t\t\tfloors,\n\t\t\tcapacity\n\t\t});\n\t},\n\n\t[ACTIONS.RECORD_PICKER_VALUE_CHANGED]: ({action, state, updateState}) => {\n\t\tconst {value, displayValue, name} = action.payload;\n\t\tconst newState = {...state};\n\t\tnewState[name] = {value, displayValue};\n\n\t\tif (name === CONSTANTS.RECORD_PICKER.BUILDING && (!value || value !== state.building.value))\n\t\t\tnewState.floors = {value: null, displayValue: []};\n\n\t\tupdateState(newState);\n\t},\n\n\t[ACTIONS.NOW_INPUT_CHANGED]: ({action, state, updateState}) => {\n\t\tconst {payload: {fieldValue, name}} = action;\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\t[name]: fieldValue\n\t\t});\n\t},\n\n\t[ACTIONS.ON_SEARCH_BUTTON_CLICKED]: ({state, dispatch}) => {\n\t\tconst { building, floors, capacity } = state;\n\t\tdispatch(ACTIONS.UPDATE_SEARCH_REQUEST, {\n\t\t\tbuilding,\n\t\t\tfloors,\n\t\t\tcapacity\n\t\t});\n\t\tdispatch(ACTIONS.TRIGGER_NAVIGATION, { view: APP_CONSTANTS.VIEWS.SEARCH_RESULTS });\n\t}\n};\n","import { createCustomElement } from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { ACTIONS } from './actions';\nimport { actionHandlers } from './actionHandlers';\nimport { view } from './view';\nimport styles from './styles.scss';\n\ncreateCustomElement('sn-wsd-moa-search-filter', {\n\trenderer: {type: snabbdom},\n\tactions: ACTIONS,\n\tactionHandlers: actionHandlers,\n\tproperties: {\n\t\tsearchRequest: {\n\t\t\tdefault: {}\n\t\t},\n\t\tappointment: {\n\t\t\tdefault: null\n\t\t}\n\t},\n\tinitialState: {\n\t\tbuilding: {\n\t\t\tvalue: null,\n\t\t\tdisplayValue: null\n\t\t},\n\t\tfloors: {\n\t\t\tvalue: null,\n\t\t\tdisplayValue: []\n\t\t},\n\t\tcapacity: 1\n\t},\n\tview,\n\tstyles\n});\n","import '../sn-wsd-moa-search-filter';\nimport '../sn-wsd-moa-search-result';\n\nexport const view = (state) => {\n\tconst properties = state.properties;\n\tif (properties.showFilter) {\n\t\tconst { searchRequest, appointment } = properties;\n\t\treturn (\n\t\t\t<sn-wsd-moa-search-filter\n\t\t\t\tsearchRequest={searchRequest}\n\t\t\t\tappointment={appointment}\n\t\t\t/>\n\t\t)\n\t} else {\n\t\tconst { searchHasMore, hasInitSearched } = state;\n\t\tconst { searchRequest, reservables, appointment } = properties;\n\t\treturn (\n\t\t\t<sn-wsd-moa-search-result\n\t\t\t\tsearchRequest={searchRequest}\n\t\t\t\treservables={reservables}\n\t\t\t\tappointment={appointment}\n\t\t\t\thasInitSearched={hasInitSearched}\n\t\t\t\tsearchHasMore={searchHasMore}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import { createCustomElement } from '@servicenow/ui-core';\nimport snabbdom from '@servicenow/ui-renderer-snabbdom';\n\nimport { ACTIONS } from './actions';\nimport { view } from './view';\nimport { actionHandlers } from './actionHandlers';\n\ncreateCustomElement('sn-wsd-moa-search', {\n\trenderer: {type: snabbdom},\n\tproperties: {\n\t\tsearchRequest: {\n\t\t\tdefault: {}\n\t\t},\n\t\tappointment: {\n\t\t\tdefault: null\n\t\t},\n\t\treservables: {\n\t\t\tdefault: []\n\t\t},\n\t\tshowFilter: {\n\t\t\tdefault: true\n\t\t},\n\t\treservation: {\n\t\t\tdefault: null\n\t\t},\n\t\thasInitSearched: {\n\t\t\tdefault: false\n\t\t}\n\t},\n\tinitialState: {\n\t\thasInitSearched: false,\n\t\tnextItemIndex: null,\n\t\tsearchHasMore: false\n\t},\n\tview,\n\tactions: ACTIONS,\n\tactionHandlers\n});\n","module.exports = __TECTONIC__$servicenow_now_modal;","module.exports = __TECTONIC__$servicenow_now_alert;","\nimport { Fragment } from '@servicenow/ui-renderer-snabbdom';\nimport { t } from 'sn-translate';\nimport '@servicenow/now-alert';\nimport '@servicenow/now-modal';\nimport '@servicenow/now-loader';\n\nimport * as utils from '../utils/generalUtils';\nimport { CONSTANTS } from './constants';\nimport '../sn-wsd-moa-search';\nimport '../sn-wsd-moa-reservation-summary';\nimport '../sn-wsd-moa-services-manager';\nimport '../sn-wsd-moa-diagnostic';\n\nexport const view = (state) => {\n\tconst {appInitCompleted, enableDiagnostic, userConfig, notificationConfig: {opened, headerLabel, content, footerActions}} = state;\n\n\treturn (\n\t\t<div className=\"sn-wsd-moa-app\">\n\t\t\t<now-modal\n\t\t\t\tsize=\"sm\"\n\t\t\t\topened={opened}\n\t\t\t\theaderLabel={headerLabel}\n\t\t\t\tcontent={content}\n\t\t\t\tfooterActions={footerActions}\n\t\t\t/>\n\n\t\t\t{!appInitCompleted \n\t\t\t\t? ( getLoadingIndicator(t('Preparing the add-in...')) )\n\t\t\t\t: ( \t\t\t\t\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<div className='sn-wsd-moa-app__container display-flex-column'>\n\t\t\t\t\t\t\t<div className='flex-1'>\n\t\t\t\t\t\t\t\t{ renderActiveView(state) }\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{!enableDiagnostic ? '' : (\n\t\t\t\t\t\t\t\t<div className='flex-0'>\n\t\t\t\t\t\t\t\t\t<sn-wsd-moa-diagnostic userConfig={userConfig}/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</Fragment>\n\t\t\t\t)\n\t\t\t}\n\t\t</div>\n\t);\n};\n\n/**\n* get active view (whether it's a search screen or summary etc...)\n* @param {*} state\n*/\nconst getActiveView = (state) => {\n\tconst { activeView } = state;\n\n\tswitch (activeView) {\n\t\tcase CONSTANTS.VIEWS.SEARCH_RESULTS:\n\t\tcase CONSTANTS.VIEWS.SEARCH_FILTER: {\n\t\t\tconst { searchRequest, appointment, reservation, reservables } = state;\n\t\t\treturn (\n\t\t\t\t<sn-wsd-moa-search\n\t\t\t\t\tsearchRequest={searchRequest}\n\t\t\t\t\tappointment={appointment}\n\t\t\t\t\treservables={reservables}\n\t\t\t\t\treservation={reservation}\n\t\t\t\t\tshowFilter={activeView === CONSTANTS.VIEWS.SEARCH_FILTER}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\tcase CONSTANTS.VIEWS.SUMMARY: {\n\t\t\tconst { searchRequest, appointment, reservables, locationsServiceCategories, locationsDetails, reservation, userConfig } = state;\n\t\t\treturn (\n\t\t\t\t<sn-wsd-moa-reservation-summary\n\t\t\t\t\tappointment={appointment}\n\t\t\t\t\tselectedReservables={reservables.filter(utils.filterSelectedReservables)}\n\t\t\t\t\treservableModule={searchRequest.defaultReservableModule.value}\n\t\t\t\t\tlocationsServiceCategories={locationsServiceCategories}\n\t\t\t\t\tlocationsDetails={locationsDetails}\n\t\t\t\t\treservation={reservation}\n\t\t\t\t\tuserConfig={userConfig}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\tcase CONSTANTS.VIEWS.SERVICES_MANAGER: {\n\t\t\tconst {appointment, locationsServiceCategories, locationsDetails, currentLocationSysId, userConfig} = state;\n\t\t\treturn (\n\t\t\t\t<sn-wsd-moa-services-manager\n\t\t\t\t\tlocation={locationsDetails[currentLocationSysId]}\n\t\t\t\t\tselectedServices={locationsServiceCategories[currentLocationSysId]}\n\t\t\t\t\tappointment={appointment}\n\t\t\t\t\tuserConfig={userConfig}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\tdefault:\n\t\t\treturn (\n\t\t\t\tgetLoadingIndicator(t('Loading...'))\n\t\t\t);\n\t}\n}\n\n/**\n * generate loader html\n * @param {string} msg - message to display next to indicator\n * @param {string} size - size of the indicator\n */\nconst getLoadingIndicator = (msg, size) => {\n\tsize = size || 'lg';\n\t\n\treturn (\n\t\t<div className=\"loading-wrapper\">\n\t\t\t<now-loader label={msg} size={size}/>\n\t\t</div>\n\t)\n}\n\n/**\n* rendering active view depend on if the appointment and office is ready\n* @param {*} state\n*/\nconst renderActiveView = (state) => {\n\tconst {appInitSuccess} = state;\n\n\treturn !appInitSuccess \n\t\t? ( \n\t\t\t<now-alert\n\t\t\t\tclassName=\"configuration-error\"\n\t\t\t\tstatus=\"critical\"\n\t\t\t\ticon=\"circle-exclamation-outline\"\n\t\t\t\tcontent={t('Initial setup failed! One or more settings might not be configured correctly. Please contact your administrator.')}\n\t\t\t\texpanded={true}\n\t\t\t/>\n\t\t) \n\t\t: ( getActiveView(state) )\n}\n","module.exports = __TECTONIC__moment_timezone_0_5_33;","/**\n * Add custom styling to now-modal child elements (now-modal, now-modal-dialog)\n * Because of the small viewport, now-modal will enforce mobile styling. It will take up the entire size of the element\n * To ensure that the styling is similar to desktop, we find the elements in the shadow root and apply the necessary styles inline\n * @param {*} host\n * @return {boolean}\n */\nexport function applyDefaultNowModalStyles(host) {\n\tconst nowModalComponent = host.shadowRoot.querySelector('now-modal');\n\tif (!nowModalComponent)\n\t\treturn false;\n\n\tconst {shadowRoot: nowModalShadowRoot} = nowModalComponent;\n\tconst nowModal = nowModalShadowRoot.querySelector('.now-modal');\n\tconst nowModalDialog = nowModalShadowRoot.querySelector('.now-modal-dialog');\n\tif (!nowModal || !nowModalDialog)\n\t\treturn false;\n\n\tconst nowModalHeading = nowModalShadowRoot.querySelector('.now-modal-heading');\n\tconst nowModalBody = nowModalShadowRoot.querySelector('.now-modal-body');\n\tconst nowModalFooterButton = nowModalShadowRoot.querySelector('.now-modal-footer-button');\n\tif (!nowModalHeading || !nowModalBody || !nowModalFooterButton)\n\t\treturn false;\n\n\tconst nowButton = nowModalFooterButton.shadowRoot.querySelector('.now-button');\n\tif (!nowButton)\n\t\treturn false;\n\n\tObject.assign(nowModal.style, {display: 'flex', alignItems: 'center', justifyContent: 'center'});\n\tObject.assign(nowModalDialog.style, {width: '90%', height: 'auto'});\n\tObject.assign(nowModalHeading.style, {fontSize: '18px'});\n\tObject.assign(nowModalBody.style, {fontSize: '14px'});\n\tObject.assign(nowButton.style, {fontSize: '14px'});\n\n\treturn true;\n}\n","import { createHttpEffect } from '@servicenow/ui-effect-http';\nimport { ACTIONS } from '../actions';\n\nexport const loadReservation = createHttpEffect('/api/sn_wsd_rsv/reservation/get', {\n\tmethod: 'GET',\n\tqueryParams: ['external_ical'],\n\tsuccessActionType: ACTIONS.LOAD_RESERVATION_SUCCESS,\n\terrorActionType: ACTIONS.LOAD_RESERVATION_FAILURE,\n\tbatch: false // doesnt work witih batching\n});\n\nexport const loadReservationServiceRequests = createHttpEffect('/api/sn_wsd_rsv/wsd_extra_service_request/reservation/:reservationId', {\n\tmethod: 'GET',\n\tpathParams: ['reservationId'],\n\tsuccessActionType: ACTIONS.LOAD_RESERVATION_SERVICE_REQUESTS_SUCCESS,\n\terrorActionType: ACTIONS.LOAD_RESERVATION_SERVICE_REQUESTS_FAILURE,\n});","import {createHttpEffect} from '@servicenow/ui-effect-http';\nimport {ACTIONS} from '../actions';\n\nexport const getLocationsDetails = createHttpEffect('api/sn_wsd_rsv/reservable/list_reservables/:ids', {\n\tpathParams: ['ids'],\n\tqueryParams: [\n\t\t'reservable_module_sys_id',\n\t\t'include_flexible_services',\n\t\t'include_standard_services',\n\t\t'include_reservable_purposes',\n\t\t'include_layouts'\n\t],\n\tsuccessActionType: ACTIONS.ON_LOAD_LOCATIONS_DETAILS_SUCCESS,\n\terrorActionType: ACTIONS.ON_LOAD_LOCATIONS_DETAILS_FAILURE,\n\tencodeURIComponent: false,\n\tbatch: false\n});","import { createHttpEffect } from '@servicenow/ui-effect-http';\nimport { ACTIONS } from '../actions';\n\nexport const getAvailability = createHttpEffect('api/sn_wsd_rsv/search/availability', {\n\tqueryParams: ['start', 'end', 'reservable_module', 'reservable_ids', 'reservation_ids', 'shift'],\n\tsuccessActionType: ACTIONS.ON_GET_AVAILABILITY_SUCCESS,\n\terrorActionType: ACTIONS.ON_GET_AVAILABILITY_FAILED,\n\tbatch: false\n});\n","import {createHttpEffect} from '@servicenow/ui-effect-http';\nimport {ACTIONS} from '../actions';\n\nexport const getSettings = createHttpEffect('api/sn_wsd_msaddin/settings/get', {\n\tsuccessActionType: ACTIONS.ON_LOAD_SETTINGS_SUCCESS,\n\terrorActionType: ACTIONS.ON_LOAD_SETTINGS_FAILED,\n\tbatch: false\n});","import { actionTypes } from '@servicenow/ui-core';\nimport { t } from 'sn-translate';\nimport { cloneDeep, find, isEmpty, map } from 'lodash';\n\nimport { getOfficeHelper } from '../office/officeHelper';\nimport { getSettings } from './effects/settingEffect';\nimport { getAvailability } from './effects/availabilityEffect';\nimport { getLocationsDetails } from './effects/locationEffects';\nimport { loadReservation, loadReservationServiceRequests } from './effects/loadReservationEffects';\nimport { ACTIONS } from './actions';\nimport * as utils from '../utils/generalUtils';\nimport { applyDefaultNowModalStyles } from '../utils/htmlUtils';\nimport { convertToUTC } from '../utils/moaDateTimeUtils';\nimport { CONSTANTS } from './constants';\nimport MultiEffectStateWrapper from '../utils/multiEffectStateWrapper';\n\nconst {COMPONENT_BOOTSTRAPPED, COMPONENT_RENDERED} = actionTypes;\n\nconst multiEffectStateWrapper = new MultiEffectStateWrapper({\n\ttotalCountKey: 'loadReservationServicesTotalCount',\n\tcompletedCountKey: 'loadReservationServicesCompletedCount',\n\tisFailedKey: 'loadReservationServicesFailed',\n\tsuccessAction: ACTIONS.LOAD_FULL_RESERVATION_COMPLETED,\n\tfailureAction: ACTIONS.LOAD_FULL_RESERVATION_FAILURE\n});\n\nlet _initialCompleted = false;\n\nexport const actionHandlers = {\n\t[COMPONENT_BOOTSTRAPPED]: async ({state, dispatch}) => {\n\t\tconst { appInitCompleted } = state; // incase office initialization failed, the appInitCompleted will be set to true, and prevent reload config\n\n\t\tif (appInitCompleted)\n\t\t\treturn;\n\n\t\tdispatch(ACTIONS.LOAD_SETTINGS);\n\t},\n\n\t[COMPONENT_RENDERED]: ({action, state, updateState}) => {\n\t\tconst {nowModalStylingApplied} = state;\n\t\tconst {payload: {host}} = action;\n\n\t\tif (nowModalStylingApplied)\n\t\t\treturn;\n\n\t\t// styling is applied within the render lifecycle method, because not all <now-modal> elements exist when the component is bootstrapped\n\t\tconst result = applyDefaultNowModalStyles(host);\n\t\tif (!result)\n\t\t\treturn;\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tnowModalStylingApplied: true\n\t\t});\n\t},\n\n\t[ACTIONS.LOAD_SETTINGS]: getSettings,\n\n\t[ACTIONS.ON_LOAD_SETTINGS_SUCCESS]: async ({action, state, updateState, dispatch}) => {\n\t\tconst {payload: {result}} = action;\n\t\tconst {\n\t\t\tdefault_reservable_module: defaultReservableModuleSysId,\n\t\t\tinit_search_config: initSearchConfig,\n\t\t\tenable_diagnostic: enableDiagnostic,\n\t\t\tuser_config: userConfig,\n\t\t\tpage_size: pageSize\n\t\t} = result;\n\t\tlet newReservables = [];\n\n\t\tif (!defaultReservableModuleSysId) {\n\t\t\t_completeIntialSetup([], true, false, updateState);\n\n\t\t\tconsole.error('Intialization failed. Terminate');\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch(ACTIONS.SETTINGS_LOADED, result);\n\n\t\t// sync with Outlook's enhanced locations, if there is any location added, fetch data and prepare to switch to Summary view\n\t\tconst officeHelper = getOfficeHelper();\n\n\t\tlet enhancedLocations = await officeHelper.getItemData('enhancedLocation');\n\t\tif (!enhancedLocations)\n\t\t\tenhancedLocations = [];\n\n\t\tupdateState(({state}) => {\n\t\t\tconst { appointment, reservables } = state;\n\t\t\t// setting is ready fetched from server with proper reservable module\n\t\t\tconst searchConfigResult = _fetchSearchConfig(initSearchConfig);\n\t\t\tconst {building, floors} = searchConfigResult;\n\n\t\t\tlet newState = {\n\t\t\t\t...state,\n\t\t\t\tsearchRequest: {\n\t\t\t\t\t...state.searchRequest, \n\t\t\t\t\tdefaultReservableModule: {\n\t\t\t\t\t\tvalue: defaultReservableModuleSysId \n\t\t\t\t\t},\n\t\t\t\t\tbuilding,\n\t\t\t\t\tfloors,\n\t\t\t\t\tpageSize\n\t\t\t\t},\n\t\t\t\tenableDiagnostic,\n\t\t\t\tuserConfig\n\t\t\t};\n\t\t\t\n\t\t\tif (utils.isArrayHasElement(enhancedLocations)) {\n\t\t\t\tnewReservables = _mergeReservables(reservables, enhancedLocations);\n\n\t\t\t\tnewState = {\n\t\t\t\t\t...newState,\n\t\t\t\t\treservables: [...newReservables]\n\t\t\t\t}\n\t\t\t} \n\n\t\t\tconst isSyncableAppointment = appointment && !isEmpty(appointment.iCalUId); \n\t\t\tnewState.isSyncableAppointment = isSyncableAppointment;\n\n\t\t\t_setupSubscribers(dispatch, false);\n\n\t\t\tif (utils.isArrayHasElement(newState.reservables)) {\n\t\t\t\t// retrieving full details for reservables. When applicable, also update search request to match, resevable building\n\t\t\t\tdispatch(ACTIONS.TRIGGER_LOAD_LOCATIONS_DETAILS);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// when there are no reservables, no need to update SearchRequest\n\t\t\t\tnewState.initSearchRequestWithLocationsCompleted = true;\n\t\t\t}\n\n\t\t\tif (!isSyncableAppointment)\n\t\t\t\treturn _completeIntialSetup(newReservables, true, true, null, newState);\n\n\t\t\t// final action of intial load, and up on full reservation loaded (including services), set Init Completed to true.\n\t\t\tdispatch(ACTIONS.TRIGGER_LOAD_RESERVATION);\n\n\t\t\treturn newState;\n\t\t});\n\t},\n\n\t[ACTIONS.ON_LOAD_SETTINGS_FAILED]: ({action, state, updateState, dispatch}) => {\n\t\tconst {\n\t\t\tpayload: {\n\t\t\t\tdata: { error },\n\t\t\t\tstatus: statusCode,\n\t\t\t\tstatusText\n\t\t\t}\n\t\t} = action;\n\n\t\tif (utils.isRequestUnauthorized(statusCode, statusText)) {\n\t\t\tdispatch(ACTIONS.TRIGGER_UNAUTHORIZED_MODAL, {error});\n\t\t\treturn;\n\t\t}\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tappInitCompleted: true,\n\t\t\tappInitSuccess: false\n\t\t});\n\t},\n\n\t[ACTIONS.ON_TIME_CHANGED]: ({action, state, updateState, dispatch}) => {\n\t\tconst {reservables, reservation, searchRequest: {defaultReservableModule: {value: reservable_module}}} = state;\n\t\tconst {payload: {start, end}} = action;\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tappointment: {\n\t\t\t\t...state.appointment,\n\t\t\t\tstart,\n\t\t\t\tend\n\t\t\t}\n\t\t});\n\n\t\t_refreshAvailablities(reservables, reservable_module, start, end, reservation, false, dispatch);\n\t},\n\n\t[ACTIONS.RESET_LOADED_RESERVABLES]: ({updateState}) => {\n\t\tupdateState(({state}) => ({\n\t\t\t...state,\n\t\t\treservables: state.reservables.filter((reservable) => {\n\t\t\t\treturn utils.safeBool(reservable.is_selected);\n\t\t\t})\n\t\t}));\n\t},\n\n\t[ACTIONS.RESERVABLES_PAGE_LOADED]: ({action, updateState}) => {\n\t\tconst {reservables: payloadReservables, error} = action.payload;\n\n\t\tupdateState(({state}) => {\n\t\t\tconst oldReservables = Array.isArray(state.reservables) ? state.reservables : [];\n\t\t\tlet selectedReservables = oldReservables.filter((reservable) => {\n\t\t\t\treturn utils.safeBool(reservable.is_selected);\n\t\t\t});\n\n\t\t\tconst selectedReservableEmails = selectedReservables.map((r) => {\n\t\t\t\treturn r.email;\n\t\t\t});\n\n\t\t\t// prepare current selected reservable\n\t\t\tselectedReservables = _fetchSearchDataToReservables(selectedReservables, payloadReservables);\n\n\t\t\tconst tobeAddedReservables = payloadReservables.filter((r) => {\n\t\t\t\treturn !selectedReservableEmails.some(selectedReservableEmail => utils.isEqual(selectedReservableEmail, r.email, true));\n\t\t\t});\n\n\t\t\t// merge the new selectedReservables with oldReservables\n\t\t\tlet newReservables = oldReservables.map(reservable => {\n\t\t\t\tconst foundSelectedReservable = selectedReservables.find(selectedReservable => utils.isEqual(selectedReservable.email, reservable.email, true))\n\t\t\t\treturn foundSelectedReservable ? foundSelectedReservable : reservable;\n\t\t\t});\n\n\t\t\tnewReservables = newReservables.concat(tobeAddedReservables);\n\t\t\t\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\treservables: newReservables\n\t\t\t};\n\t\t});\n\t},\n\n\t[ACTIONS.RESERVABLE_SELECTED]: ({action, state, updateState}) => {\n\t\tconst reservable = action.payload;\n\t\tconst { reservables } = state;\n\t\tconst index = reservables.findIndex(item => utils.isEqual(item.email, reservable.email, true));\n\n\t\tif (index !== -1) {\n\t\t\tconst officeHelper = getOfficeHelper();\n\t\t\tlet activeView = state.activeView;\n\n\t\t\tif (utils.safeBool(reservable.is_selected))\n\t\t\t\tofficeHelper.addRoomToMeeting(reservable.name, reservable.email);\n\t\t\telse\n\t\t\t\tofficeHelper.removeRoomFromMeeting(reservable.name, reservable.email);\n\n\t\t\treservables[index] = reservable; // when this action handler is called, the reservable is already modified so it is shallow cloned already.\n\n\t\t\tupdateState({\n\t\t\t\t...state,\n\t\t\t\treservables: [...reservables],\n\t\t\t\tactiveView\n\t\t\t});\n\t\t}\n\t},\n\n\t[ACTIONS.ON_ENHANCED_LOCATIONS_CHANGED]: ({action, state, updateState, dispatch}) => {\n\t\tlet { payload: {locations} } = action;\n\t\tupdateState(({state}) =>  {\n\t\t\tconst { reservables, locationsDetails } = state;\n\t\t\tconst newReservables = _mergeReservables(reservables, locations, locationsDetails);\n\t\t\tlet newState = {\n\t\t\t\t...state,\n\t\t\t\treservables: [...newReservables]\n\t\t\t};\n\n\t\t\treturn newState;\n\t\t});\n\n\t\tdispatch(ACTIONS.TRIGGER_LOAD_LOCATIONS_DETAILS);\n\t},\n\n\t[ACTIONS.ON_RECURRENCE_CHANGED]: ({action, updateState, state}) => {\n\t\tlet newState = {\n\t\t\t...state,\n\t\t\tappointment: {\n\t\t\t\t...state.appointment,\n\t\t\t\ttype: CONSTANTS.RECURRENCE_TYPES.MASTER,\n\t\t\t\trecurrence: action.payload.recurrence\n\t\t\t}\n\t\t};\n\n\t\tif (state.activeView === CONSTANTS.VIEWS.SERVICES_MANAGER)\n\t\t\tnewState.activeView = CONSTANTS.VIEWS.SUMMARY;\n\n\t\tupdateState(newState);\n\t},\n\n\t[ACTIONS.TRIGGER_REFRESH_AVAILABLITIES]: ({action, state, dispatch}) => {\n\t\tconst { payload: { onlySelectedItems } } = action;\n\n\t\t_refreshAvailablitiesUsingState(state, onlySelectedItems, dispatch);\n\t},\n\n\t[ACTIONS.GET_AVAILABILITY]: getAvailability,\n\n\t[ACTIONS.ON_GET_AVAILABILITY_SUCCESS]: ({action, updateState}) => {\n\t\tconst {payload: {result}} = action;\n\n\t\tif (!utils.isArrayHasElement(result)) {\n\t\t\tif (!_initialCompleted)\n\t\t\t\t_completeIntialSetup(null, true, true, updateState);\n\n\t\t\treturn;\n\t\t}\n\n\t\tupdateState(({state}) => {\n\t\t\tconst { reservables } = state;\n\t\t\tlet newReservables = [...reservables];\n\t\t\tfor (let i = 0; i < result.length; i++) {\n\t\t\t\tconst reservable = result[i];\n\t\t\t\tconst reservableIdx = newReservables.findIndex(item => item.sys_id === reservable.sys_id || item.email === reservable.email);\n\n\t\t\t\tif (reservableIdx === -1)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tnewReservables[reservableIdx] = {\n\t\t\t\t\t...newReservables[reservableIdx],\n\t\t\t\t\tis_available: reservable.is_available\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// for intial load, return the new completed initial state\n\t\t\tif (!_initialCompleted)\n\t\t\t\treturn _completeIntialSetup(newReservables, true, true, null, state);\n\n\t\t\t// otherwise return new state with new reservables with fetched availablity\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\treservables: newReservables\n\t\t\t};\n\t\t});\n\t},\n\n\t[ACTIONS.ON_GET_AVAILABILITY_FAILED]: ({state, action, updateState, dispatch}) => {\n\t\tconst {\n\t\t\tpayload: {\n\t\t\t\tdata: { error },\n\t\t\t\tstatus: statusCode,\n\t\t\t\tstatusText\n\t\t\t}\n\t\t} = action;\n\t\tconsole.error('Error! Unable to get availablity', error.message);\n\n\t\tif (utils.isRequestUnauthorized(statusCode, statusText)) {\n\t\t\tdispatch(ACTIONS.TRIGGER_UNAUTHORIZED_MODAL, {error});\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (!_initialCompleted) {\n\t\t\t_completeIntialSetup(null, true, true, updateState);\n\t\t\treturn;\n\t\t}\n\t},\n\n\t[ACTIONS.TRIGGER_NAVIGATION]: ({action, state, updateState}) => {\n\t\tconst {view: activeView} = action.payload;\n\t\tlet newState = {\n\t\t\t...state,\n\t\t\tactiveView\n\t\t};\n\n\t\tupdateState(newState);\n\t},\n\n\t[ACTIONS.TRIGGER_LOAD_LOCATIONS_DETAILS]: ({ dispatch, state }) => {\n\t\tconst {\n\t\t\treservables,\n\t\t\tsearchRequest,\t\t\t\n\t\t\tlocationsDetails\n\t\t} = state;\n\n\t\t// include emails in the list if they dont have sys_ids. Since they wont match any ids, they will go to the locationDetailsToLoad\n\t\tconst selectedReservableIdsArr = reservables.reduce((reservableIdsArr, reservable) => {\n\t\t\tif (reservable.is_selected)\n\t\t\t\treservableIdsArr.push(reservable.sys_id || reservable.email);\n\n\t\t\treturn reservableIdsArr;\n\t\t}, []);\n\n\t\tconst locationDetailsIds = locationsDetails ? Object.keys(locationsDetails) : [];\n\n\t\tconst locationDetailsToLoad = selectedReservableIdsArr.filter(selectedReservableId => !locationDetailsIds.includes(selectedReservableId));\n\n\t\tif (locationDetailsToLoad.length === 0)\n\t\t\treturn;\n\n\t\tdispatch(ACTIONS.LOAD_LOCATIONS_DETAILS, {\n\t\t\tids: locationDetailsToLoad.join(','),\n\t\t\treservable_module_sys_id: searchRequest.defaultReservableModule.value,\n\t\t\tinclude_flexible_services: true,\n\t\t\tinclude_standard_services: true,\n\t\t\tinclude_reservable_purposes: true,\n\t\t\tinclude_layouts: false\n\t\t});\n\t},\n\n\t[ACTIONS.LOAD_LOCATIONS_DETAILS]: getLocationsDetails,\n\n\t[ACTIONS.ON_LOAD_LOCATIONS_DETAILS_SUCCESS] : ({ action, updateState, state }) => {\n\t\tconst locationsDetailsPayload = action.payload.result || [];\n\t\tconst locationsDetails = {...state.locationsDetails};\n\t\tlocationsDetailsPayload.forEach(locationDetails => locationsDetails[locationDetails.sys_id] = locationDetails);\n\n\t\tupdateState(({state}) => {\n\t\t\tlet { reservables } = state; \n\t\t\treservables = reservables.map(reservable => {\n\t\t\t\tif (reservable.sys_id)\n\t\t\t\t\treturn reservable;\n\t\n\t\t\t\tconst locDetail = _getLocationDetailsByEmail(locationsDetails, reservable.email);\n\t\t\t\tif (!locDetail)\n\t\t\t\t\treturn reservable;\n\t\n\t\t\t\treturn { \n\t\t\t\t\t...reservable,\n\t\t\t\t\texistsInWsd: true,\n\t\t\t\t\tname: locDetail.name,\n\t\t\t\t\tsys_id: locDetail.sys_id \n\t\t\t\t};\n\t\t\t})\n\n\t\t\tconst newState = { \n\t\t\t\t...state,\n\t\t\t\treservables: [...reservables],\n\t\t\t\tlocationsDetails\n\t\t\t};\n\n\t\t\tif (!newState.initSearchRequestWithLocationsCompleted) {\n\t\t\t\tconst updateSearchRequestObj = _getSearchRequestBySelectedReservables(newState.reservables, newState.locationsDetails);\n\t\t\t\tif (updateSearchRequestObj) {\n\t\t\t\t\tnewState.searchRequest = {\n\t\t\t\t\t\t...newState.searchRequest,\n\t\t\t\t\t\t...updateSearchRequestObj\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tnewState.initSearchRequestWithLocationsCompleted = true;\n\t\t\t}\n\n\t\t\treturn newState;\n\t\t})\n\t},\n\n\t[ACTIONS.ON_LOAD_LOCATIONS_DETAILS_FAILURE] : ({action, dispatch}) => {\n\t\tconst {\n\t\t\tpayload: {\n\t\t\t\tdata: { error },\n\t\t\t\tstatus: statusCode,\n\t\t\t\tstatusText\n\t\t\t}\n\t\t} = action;\n\n\t\tif (utils.isRequestUnauthorized(statusCode, statusText))\n\t\t\tdispatch(ACTIONS.TRIGGER_UNAUTHORIZED_MODAL, {error});\n\n\t\tconsole.error('location details failure: ', action.payload);\n\t},\n\n\t[ACTIONS.SELECT_LOCATION_FOR_EDITING_SERVICES]: ({ action, updateState, state }) => {\n\t\tconst currentLocationSysId =  action.payload.currentLocationSysId;\n\t\tconst extraServiceRequestsForSingleLocation = state.locationsServiceCategories[currentLocationSysId] || {};\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tcurrentLocationSysId,\n\t\t\tactiveView: CONSTANTS.VIEWS.SERVICES_MANAGER,\n\t\t\tlocationsServiceCategories: {\n\t\t\t\t...state.locationsServiceCategories,\n\t\t\t\t[currentLocationSysId]: extraServiceRequestsForSingleLocation\n\t\t\t}\n\t\t});\n\t},\n\n\t[ACTIONS.ON_SAVE_RESERVABLES]: ({ updateState, state }) => {\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tactiveView: CONSTANTS.VIEWS.SUMMARY\n\t\t});\n\t},\n\n\t[ACTIONS.UPDATE_SERVICE_REQUESTS]: ({ updateState, state, action }) => {\n\t\tconst { locationId, locationExtraServiceRequests } = action.payload;\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tactiveView: CONSTANTS.VIEWS.SUMMARY,\n\t\t\tlocationsServiceCategories: {\n\t\t\t\t...state.locationsServiceCategories,\n\t\t\t\t[locationId]: locationExtraServiceRequests,\n\t\t\t}\n\t\t});\n\t},\n\n\t[ACTIONS.NOW_MODAL_OPENED_SET]: ({dispatch}) => {\n\t\tdispatch(ACTIONS.CLOSE_NOW_MODAL);\n\t},\n\n\t[ACTIONS.NOW_MODAL_FOOTER_ACTION_CLICKED]: ({action, dispatch}) => {\n\t\tconst {payload: {footerAction}} = action;\n\n\t\tif (footerAction.status === 'unauthorized') {\n\t\t\twindow.location.href = `${window.location.origin}/ws?id=moa_login`;\n\t\t\treturn;\n\t\t}\n\n\t\tif (footerAction.variant === 'primary')\n\t\t\tdispatch(ACTIONS.CLOSE_NOW_MODAL);\n\t},\n\n\t[ACTIONS.OPEN_NOW_MODAL]: ({action, state, updateState}) => {\n\t\tconst {payload: {headerLabel, content, footerActions}} = action;\n\t\tlet notificationConfig = {\n\t\t\t...state.notificationConfig,\n\t\t\topened: true,\n\t\t\theaderLabel: headerLabel || t('Something went wrong.'),\n\t\t\tcontent: content || t('An error has occurred. Please, try again.')\n\t\t};\n\n\t\tif (footerActions)\n\t\t\tnotificationConfig.footerActions = footerActions;\n\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tnotificationConfig\n\t\t});\n\t},\n\n\t[ACTIONS.CLOSE_NOW_MODAL]: ({state, updateState}) => {\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tnotificationConfig: {\n\t\t\t\t...state.notificationConfig,\n\t\t\t\topened: false\n\t\t\t}\n\t\t});\n\t},\n\t\n\t[ACTIONS.CLOSE_APP]: () => {\n\t\tgetOfficeHelper().closeAddin();\n\t},\n\n\t[ACTIONS.LOAD_FULL_RESERVATION_COMPLETED]: async ({ updateState, state, dispatch }) => {\n\t\tconst { reservables } = state;\n\t\tconsole.debug('Rsv completed! Reservation and all related reserved services loaded');\n\n\t\tif (!utils.isArrayHasElement(reservables)) {\n\t\t\t_completeIntialSetup(null, true, true, updateState);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!_initialCompleted) {\n\t\t\t// at the very end of the chain: trigger refresh availablities, at this point, all reservation data are available to avoid collision with original meeting\n\t\t\tdispatch(ACTIONS.TRIGGER_REFRESH_AVAILABLITIES, { onlySelectedItems: true });\n\t\t}\n\t},\n\n\t[ACTIONS.LOAD_FULL_RESERVATION_FAILURE]: ({ updateState, state, dispatch }) => {\n\t\tconsole.error('ERROR! Failed to load reservation and all related reserved services. Ignore and continue with intial flow');\n\n\t\tif (!utils.isArrayHasElement(reservables)) {\n\t\t\t_completeIntialSetup(null, true, true, updateState);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!_initialCompleted) {\n\t\t\t// at the very end of the chain: trigger refresh availablities. There are will be no reserved reservation to check against.\n\t\t\tdispatch(ACTIONS.TRIGGER_REFRESH_AVAILABLITIES, { onlySelectedItems: true });\n\t\t}\n\t},\n\n\t[ACTIONS.TRIGGER_LOAD_RESERVATION]: ({ state, dispatch, updateState }) => {\n\t\tupdateState(({state}) => {\n\t\t\tconst {\n\t\t\t\tappointment: {\n\t\t\t\t\tiCalUId: external_ical\n\t\t\t\t}\n\t\t\t} = state;\n\t\n\t\t\tlet newState = {\n\t\t\t\t...state,\n\t\t\t\treservation: null,\n\t\t\t\tlocationsServiceCategories: {}\n\t\t\t};\n\n\t\t\tnewState = multiEffectStateWrapper.reset(newState);\n\t\n\t\t\tdispatch(ACTIONS.LOAD_RESERVATION, {\n\t\t\t\texternal_ical\n\t\t\t});\n\n\t\t\treturn newState;\n\t\t});\n\t},\n\n\t[ACTIONS.LOAD_RESERVATION]: loadReservation,\n\n\t[ACTIONS.LOAD_RESERVATION_SUCCESS]: ({ action, dispatch, updateState, state }) => {\n\t\tconst reservation = action.payload.result.reservation;\n\t\tconst reservedLocations = reservation.locations || [reservation.location];\n\n\t\tif (!reservation.active) {\n\t\t\tdispatch(ACTIONS.LOAD_FULL_RESERVATION_COMPLETED);\n\t\t\treturn;\n\t\t}\n\n\t\tupdateState(({state}) => {\n\t\t\tconst { reservables } = state;\n\t\t\tconst newReservables = [...reservables];\n\t\t\tif (utils.isArrayHasElement(newReservables)) {\n\t\t\t\tnewReservables.forEach((reservable, index) => {\n\t\t\t\t\tconst matchedReservedReservable = reservedLocations.find(rl => utils.isEqual(rl.email, reservable.email, true));\n\t\t\t\t\tif (matchedReservedReservable) {\n\t\t\t\t\t\tnewReservables[index] = cloneDeep(reservable);\n\t\t\t\t\t\tnewReservables[index].is_reserved = true;\n\t\t\t\t\t\tnewReservables[index].is_available = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloadReservationServicesTotalCount: reservedLocations.length,\n\t\t\t\treservation,\n\t\t\t\treservables: newReservables\n\t\t\t};\n\t\t});\n\n\t\t_loadServiceRequests(dispatch, reservedLocations);\n\t},\n\n\t[ACTIONS.LOAD_RESERVATION_FAILURE]: ({action, dispatch}) => {\n\t\tconst {payload} = action;\n\n\t\tif (utils.isRequestUnauthorized(payload.status, payload.statusText)) {\n\t\t\tconsole.error('User not authorized', payload);\n\t\t\tdispatch(ACTIONS.TRIGGER_UNAUTHORIZED_MODAL, {error: payload.data.error});\n\t\t\treturn;\n\t\t}\n\n\t\tif (payload.status === 404) {\n\t\t\tconsole.error('No reservation found', payload);\n\t\t\tdispatch(ACTIONS.LOAD_FULL_RESERVATION_COMPLETED);\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.error('Reservation failed', payload);\n\t\tdispatch(ACTIONS.LOAD_FULL_RESERVATION_FAILURE);\n\t},\n\n\t[ACTIONS.LOAD_RESERVATION_SERVICE_REQUESTS]: loadReservationServiceRequests,\n\n\t[ACTIONS.LOAD_RESERVATION_SERVICE_REQUESTS_SUCCESS]: ({ action, updateState, dispatch }) => {\n\t\tupdateState(({state}) => {\n\t\t\tconst {\n\t\t\t\treservableId,\n\t\t\t\tserviceCategories = {}\n\t\t\t} = action.payload.result;\n\n\t\t\tconst locationServiceCategories = utils.mapObject(serviceCategories, (categoryId, serviceCategory) => {\n\t\t\t\tlet {\n\t\t\t\t\tflexibleServices: addedServices,\n\t\t\t\t\t...locationServiceCategory\n\t\t\t\t} = serviceCategory;\n\n\t\t\t\taddedServices.forEach(addedService => {\n\t\t\t\t\taddedService.clientId = utils.generateGUID();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tlocationServiceCategory.addedServices = addedServices;\n\t\t\t\tlocationServiceCategory.totalQuantity = utils.calculateServiceCategoryQuantity(addedServices);\n\t\t\t\tlocationServiceCategory.totalPrice = utils.calculateServiceCategoryPrice(addedServices);\n\t\t\t\treturn locationServiceCategory;\n\t\t\t});\n\n\t\t\tlet newState = {\n\t\t\t\t...state,\n\t\t\t\tlocationsServiceCategories: {\n\t\t\t\t\t...state.locationsServiceCategories,\n\t\t\t\t\t[reservableId]: locationServiceCategories\n\t\t\t\t}\n\t\t\t};\n\t\t\tconsole.debug('Loaded service requests: ', action.payload.result);\n\n\t\t\t// dispatches LOAD_FULL_RESERVATION_COMPLETED or LOAD_FULL_RESERVATION_FAILURE when all services complete\n\t\t\treturn multiEffectStateWrapper.handleRequestComplete(newState, dispatch, true);\n\t\t});\n\t},\n\n\t[ACTIONS.LOAD_RESERVATION_SERVICE_REQUESTS_FAILURE]: ({ updateState, dispatch, action }) => {\n\t\tconst {\n\t\t\tpayload: {\n\t\t\t\tdata: { error },\n\t\t\t\tstatus: statusCode,\n\t\t\t\tstatusText\n\t\t\t}\n\t\t} = action;\n\n\t\tif (utils.isRequestUnauthorized(statusCode, statusText)) {\n\t\t\tdispatch(ACTIONS.TRIGGER_UNAUTHORIZED_MODAL, {error});\n\t\t\treturn;\n\t\t}\n\t\t\t\n\t\tupdateState(({state}) => {\n\t\t\tconsole.error('Failed to load service requests: ', action.payload);\n\n\t\t\t// dispatches LOAD_FULL_RESERVATION_FAILURE when all services complete\n\t\t\treturn multiEffectStateWrapper.handleRequestComplete({...state}, dispatch, false);\n\t\t});\n\t},\n\n\t[ACTIONS.UPDATE_SEARCH_REQUEST]: ({action, state, updateState}) => {\n\t\tconst {building, floors, capacity} = action.payload;\n\n\t\tconst newSearchRequest = {\n\t\t\t...state.searchRequest,\n\t\t\tbuilding,\n\t\t\tfloors,\n\t\t\tcapacity\n\t\t}\n\t\tupdateState({\n\t\t\t...state,\n\t\t\tsearchRequest: newSearchRequest\n\t\t})\n\t},\n\n\t[ACTIONS.TRIGGER_UNAUTHORIZED_MODAL]: ({action, dispatch}) => {\n\t\tconst {payload: {error}} = action;\n\n\t\tdispatch(ACTIONS.OPEN_NOW_MODAL, {\n\t\t\theaderLabel: t('Unauthorized'),\n\t\t\tcontent: error.message,\n\t\t\tfooterActions: [\n\t\t\t\t{\n\t\t\t\t\t'variant': 'primary',\n\t\t\t\t\t'label': t('Login'),\n\t\t\t\t\t'status': 'unauthorized'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n}\n\n/**\n * setup all subscribers to listen to outlook meeting details' changes\n * @param {function} dispatch \n * @param {boolean} requireRefreshEnhancedLocation - when OfficeJs failed to retrieve enhancedLocation on getAsync() (randomly)\n */\nasync function _setupSubscribers(dispatch, requireRefreshEnhancedLocation) {\n\tconst officeHelper = getOfficeHelper();\n\n\tofficeHelper.subscribeTimeChanges((res) => {\n\t\tif (res.status !== 'success') {\n\t\t\tconsole.error('Subscribed failed. Can not retrieve appointment times');\n\t\t\treturn;\n\t\t}\n\n\t\tconst start = convertToUTC(res.data.start);\n\t\tconst end = convertToUTC(res.data.end);\n\n\t\tdispatch(ACTIONS.ON_TIME_CHANGED, { start, end });\n\t});\n\n\tofficeHelper.subscribeEnhancedLocationChanges((res) => {\n\t\tif (res.status !== 'success') {\n\t\t\tconsole.error('Subscribed failed. Cannot retrieve location information');\n\t\t\treturn;\n\t\t}\n\n\t\tconst {data: { enhancedLocations: locations }} = res;\n\t\tdispatch(ACTIONS.ON_ENHANCED_LOCATIONS_CHANGED, { locations });\n\t});\n\n\tofficeHelper.subscribeRecurrenceChanged((rec) => {\n\t\tif (rec.status !== 'success') {\n\t\t\tconsole.error('Subscribed failed. Cannot retrieve location information');\n\t\t\treturn;\n\t\t}\n\n\t\tconst {data: { recurrence }} = rec;\n\t\tdispatch(ACTIONS.ON_RECURRENCE_CHANGED, { recurrence });\n\t});\n}\n\n/**\n * Fetch the search config values\n * @param {Object} config\n * @return {Object}\n */\nfunction _fetchSearchConfig(config) {\t\n\tif (!config) {\n\t\treturn {\n\t\t\tbuilding: {value: null, displayValue: null},\n\t\t\tfloors: {value: null, displayValue: []}\n\t\t};\n\t}\n\n\tconst {building: configBuilding, floors: configFloor} = config;\n\n\tconst building = configBuilding\n\t\t? {value: configBuilding.sys_id, displayValue: configBuilding.display_value}\n\t\t: {value: null, displayValue: null};\n\n\tconst floors = configFloor && utils.isArrayHasElement(configFloor)\n\t\t? {value: configFloor.map(el => el.sys_id).join(','), displayValue: configFloor.map(el => el.display_value)}\n\t\t: {value: null, displayValue: []};\n\n\treturn {\n\t\tbuilding,\n\t\tfloors\n\t};\n}\n\n/**\n * For each location, it triggers the loading of its services, by that locations reservation id.\n * @param {*} dispatch\n * @param {Array} locations\n */\nfunction _loadServiceRequests(dispatch, locations) {\n\tlocations.forEach(location => {\n\t\tdispatch(ACTIONS.LOAD_RESERVATION_SERVICE_REQUESTS, {\n\t\t\treservationId: location.reservation.sys_id\n\t\t});\n\t})\n}\n\n/**\n * get location details of the provided email based on the loaded locationsDetails\n * @param {*} locationsDetails - dictionary of all locations details for lookup\n * @param {string} email \n * @returns {*} a single location details object\n */\nfunction _getLocationDetailsByEmail(locationsDetails, email) {\n\tif (isEmpty(locationsDetails) || !email)\n\t\treturn null;\n\n\tfor (var prop in locationsDetails) {\n\t\tif (locationsDetails.hasOwnProperty(prop) && utils.isEqual(locationsDetails[prop].email, email, true)) \n\t\t\treturn locationsDetails[prop];\n\t}\n\n\treturn null;\n}\n\n/**\n * merge reservables (search result) and enhanced locations (from Outlook Client) into a new reservables list.\n * @param {Reservable[]} reservables - list or reservable (used by search result)\n * @param {EnhancedLocation[]} enhancedLocations - list of enhanced locations fetched from outlook via officeJs\n * @param {LocationsDetails} [locationsDetails] - list of already fetched (server) locations\n * @returns {Reservable[]} deep-cloned reservables and merged with endhanced location\n */\nfunction _mergeReservables(reservables, enhancedLocations, locationsDetails) {\n\treservables = Array.isArray(reservables) ? cloneDeep(reservables) : [];\n\n\t// select|deselect a reservable based on the 'enhancedLocation' result\n\treservables.forEach((reservable) => {\n\t\tif (!enhancedLocations) {\n\t\t\treservable.is_selected = false;\n\t\t\treturn;\n\t\t}\n\n\t\tconst locationIdx = enhancedLocations.findIndex(loc => utils.isEqual(loc.emailAddress, reservable.email, true));\n\t\treservable.is_selected = locationIdx !== -1;\n\t});\n\n\t// add resources of type 'room' from 'enhancedLocation'\n\tlet tobeAddedReservables = [];\n\tif (Array.isArray(enhancedLocations)) {\n\t\tenhancedLocations.forEach((loc) => {\n\t\t\tconst {displayName: name, emailAddress: email, locationIdentifier: {type: type}} = loc;\n\n\t\t\tif (type !== 'room')\n\t\t\t\treturn;\n\n\t\t\tconst reservableIdx = reservables.findIndex(reservable => utils.isEqual(reservable.email, email, true));\n\t\t\tif (reservableIdx !== -1)\n\t\t\t\treturn;\n\n\t\t\tconst locationDetails = _getLocationDetailsByEmail(locationsDetails, email);\n\t\t\ttobeAddedReservables.push({\n\t\t\t\tis_available: true,\n\t\t\t\tis_selected: true,\n\t\t\t\tfromOutlook: true,\n\t\t\t\tname,\n\t\t\t\temail,\n\t\t\t\tsys_id: locationDetails ? locationDetails.sys_id : null\n\t\t\t});\n\t\t});\n\t}\n\n\treservables = reservables.concat(tobeAddedReservables);\n\treturn reservables;\n}\n\n/**\n * fetch data from the search result to the current reservables (from previous search or from initial load)\n * @param {Reservable[]} selectedReservables - current selected reservables (might be fetched from Enhanced Location and previous search)\n * @param {Reservable[]} resultReservables - list of new reservable with full data (from search result)\n * @returns \n */\nfunction _fetchSearchDataToReservables(selectedReservables, resultReservables) {\n\tselectedReservables = Array.isArray(selectedReservables) ? selectedReservables : []\n\tconst resolvedReservable = selectedReservables.map(selectedReservable => {\n\t\tconst matchedResult = resultReservables.find(r => utils.isEqual(selectedReservable.email, r.email));\n\n\t\t// if matchedRsult found, use that instead\n\t\treturn !matchedResult \n\t\t\t? selectedReservable\n\t\t\t: {\n\t\t\t\t...matchedResult,\n\t\t\t\tis_selected: true,\n\t\t\t\tfromOutlook: true,\n\t\t\t\texistsInWsd: true\n\t\t\t}\n\t});\n\n\treturn resolvedReservable;\n};\n\n/**\n * send request to get availablities of all reservables or the selected reservable (using state values)\n * @param {*} state \n * @param {boolean} onlySelectedItems \n * @param {*} dispatch \n */\nfunction _refreshAvailablitiesUsingState(state, onlySelectedItems, dispatch) {\n\tconst {reservables, searchRequest: {defaultReservableModule: {value: reservableModule}}, appointment: { start, end }, reservation} = state;\n\t\n\t_refreshAvailablities(reservables, reservableModule, start, end, reservation, onlySelectedItems, dispatch);\n}\n\n/**\n * send request to get availablities of all reservables or the selected reservable\n * @param {Reservable[]} reservables \n * @param {string} reservableModule - sysId of the reservable module\n * @param {string} start - meeting start in UTC\n * @param {string} end - meeting end in UTC\n * @param {Reservation} reservation - reservation if was previously submitted\n * @param {boolean} onlySelectedItems - whether to evaluate only the selected items\n * @param {*} dispatch \n * @returns \n */\nfunction _refreshAvailablities(reservables, reservableModule, start, end, reservation, onlySelectedItems, dispatch) {\n\tconsole.debug('[MOA]:: start refreshing avaialblity', reservables, start, end, onlySelectedItems);\n\tif (!utils.isArrayHasElement(reservables))\n\t\treturn;\n\n\tconst tobeCheckedReservables = reservables.filter((reservable) => {\n\t\tconst isValidEmail = reservable.email && reservable.email.length > 0;\n\t\tconst isIncluded = onlySelectedItems ? reservable.is_selected : true;\n\t\t\n\t\treturn isValidEmail && isIncluded;\n\t});\n\n\tlet reservableIds = utils.resolveListIntoStr(tobeCheckedReservables, 'sys_id');\n\tif (isEmpty(reservableIds))\n\t\treservableIds = utils.resolveListIntoStr(tobeCheckedReservables, 'email');\n\n\tif (isEmpty(reservableIds)) {\n\t\tconsole.error('Unable to construct reservable identities to check for availablities', tobeCheckedReservables);\n\t\treturn;\n\t}\n\n\tconst requestData = {\n\t\tstart,\n\t\tend,\n\t\treservable_module: reservableModule,\n\t\treservable_ids: reservableIds\n\t};\n\n\tconst reservationIds = _getReservationSysIdsFromReserved(reservation);\n\tif (!isEmpty(reservationIds))\n\t\trequestData.reservation_ids = reservationIds;\n\n\tdispatch(ACTIONS.GET_AVAILABILITY, requestData);\n}\n\n/**\n * constructing a string (comma separated) sys_ids of reserved reservation\n * @param {Reservation} reservation \n * @returns {string} \n */\nfunction _getReservationSysIdsFromReserved(reservation) {\n\tif (isEmpty(reservation))\n\t\treturn '';\n\n\t// multi-reservation\n\tif (utils.isArrayHasElement(reservation.locations)) {\n\t\treturn reservation.locations.reduce((acc, loc) => { \n\t\t\tif (!loc.reservation || !loc.reservation.sys_id)\n\t\t\t\treturn acc;\n\n\t\t\tacc.push(loc.reservation.sys_id);\n\t\t\treturn acc;\n\t\t}, []).join('');\n\t}\n\n\t// single reservation\n\treturn reservation.sys_id;\n}\n\n/**\n * used only on initial load to complete the flow, depend on [updateState] OR [state] is given, updateState function ill be called or just simply return a new state object\n * @param {Reservable[]} reservables \n * @param {boolean} isCompleted \n * @param {boolean} isSuccessful \n * @param {function|null} [updateState] - when it's given the updateState function will be executed with call back function as param.\n * @param {State|null} [state] - state object, is used and and will return a newState object without executing the updateState\n * @return {State|null} new state object (incase updateState function is not given, and state is given), null if exception occurred\n */\nfunction _completeIntialSetup(reservables, isCompleted, isSuccessful, updateState, state) {\n\t_initialCompleted = true;\n\ttry {\n\t\tif (!updateState && !state) {\n\t\t\tconsole.error('Error! Incomplete functionc call');\n\t\t\treturn null;\n\t\t}\n\n\t\t// when state is given, simply return newState\n\t\tif (!isEmpty(state))\n\t\t\treturn _getInitialFinalStateObj(state, reservables, isCompleted, isSuccessful);\n\n\t\t// otherwise (when updateState is given, use update state and return null)\n\t\tlet newState = null;\n\t\tupdateState(({state}) => {\n\t\t\tnewState = _getInitialFinalStateObj(state, reservables, isCompleted, isSuccessful);\n\t\t\treturn newState;\n\t\t});\n\n\t\treturn newState;\n\t} catch (ex) {\n\t\tconsole.error('Exception occurred while completing intial load', ex);\n\t\treturn null;\n\t}\n}\n\n/**\n * construct and return newState object based on given params\n * @param {*} state \n * @param {*} reservables \n * @param {*} isCompleted \n * @param {*} isSuccessful \n * @return {State} new state object\n */\nfunction _getInitialFinalStateObj(state, reservables, isCompleted, isSuccessful) {\n\treservables = reservables ? reservables : state.reservables;\n\tconst activeView = utils.isArrayHasElement(reservables) ? CONSTANTS.VIEWS.SUMMARY : CONSTANTS.VIEWS.SEARCH_FILTER;\n\n\tconst newState = {\n\t\t...state,\n\t\treservables,\n\t\tappInitCompleted: isCompleted,\n\t\tappInitSuccess: isSuccessful,\n\t\tactiveView\n\t};\n\n\treturn newState;\n}\n\n/**\n * Gets the Obj to update searchResults by when there is a location which could be used.\n * @param {*} reservables\n * @param {*} locationsDetails\n * @returns {*}\n */\nfunction _getSearchRequestBySelectedReservables(reservables, locationsDetails) {\n\tif (isEmpty(reservables) || isEmpty(locationsDetails))\n\t\treturn null;\n\n\tconst selectedReservables = reservables.filter(r => r.is_selected);\n\tif (isEmpty(selectedReservables))\n\t\treturn null;\n\n\tlet locationDetailsWithBuilding;\n\t// find first reservable with building\n\tfor (var i = 0; i < selectedReservables.length && !locationDetailsWithBuilding; i++) {\n\t\tconst srLocationDetails = _getLocationDetailsByEmail(locationsDetails, selectedReservables[i].email);\n\t\tif (srLocationDetails && srLocationDetails.building.sys_id)\n\t\t\tlocationDetailsWithBuilding = srLocationDetails;\n\t}\n\n\tif (!locationDetailsWithBuilding)\n\t\treturn null;\n\n\tconst {\n\t\tsys_id: buildingValue,\n\t\tdisplay_value: buildingDisplayValue \n\t} = locationDetailsWithBuilding.building;\n\n\treturn {\n\t\tbuilding: {\n\t\t\tvalue: buildingValue,\n\t\t\tdisplayValue: buildingDisplayValue\n\t\t},\n\t\tfloor: []\n\t};\n}","import {CONSTANTS} from '../sn-wsd-moa-app/constants';\n\nfunction loadJS(url, callback, location) {\n\tconst scriptTag = document.createElement('script');\n\tscriptTag.src = url;\n\tscriptTag.onload = callback;\n\tscriptTag.onreadystatechange = callback;\n\tlocation.appendChild(scriptTag);\n}\n\nexport async function loadOffice() {\n\treturn new Promise((resolve, reject) => {\n\t\tloadJS(CONSTANTS.OFFICEJS_URL, () => {\n\t\t// This promise is wrapped in a promise because it is called from the onload\n\t\twindow.Office.onReady()\n\t\t\t.then(resolve)\n\t\t\t.catch(reject);\n\t}, document.body);\n\t});\n}\n","export class OfficeRestService {\n\tDEFAULT_MS_REST_URL = 'https://outlook.office365.com/api';\n\n\t/**\n\t *\n\t * @param {OfficeHelper} officeHelper - instantiated officeHelper\n\t */\n\tconstructor(officeHelper) {\n\t\tthis.officeHelper = officeHelper;\n\t\tthis.Office = officeHelper.Office;\n\t}\n\n\t/**\n\t * Gets all the information about an appointment\n\t * @return {Promise<null|any>}\n\t */\n\tasync getFullMeetingInfo() {\n\t\tconst id = await this.officeHelper.getItemId();\n\t\tif (!id)\n\t\t\tthrow Error('no id found for current appointment');\n\n\t\tconst eventId = this.Office.context.mailbox.convertToRestId(\n\t\t\tid,\n\t\t\tthis.Office.MailboxEnums.RestVersion.v2_0\n\t\t);\n\n\t\tconst msRestUrl = this.Office.context.mailbox.restUrl \n\t\t\t? this.Office.context.mailbox.restUrl\n\t\t\t: this.DEFAULT_MS_REST_URL;\n\n\t\tconst url = `${msRestUrl}/v2.0/me/events/${eventId}`;\n\t\tconsole.debug('MOA:: retrieving meeting info', url);\n\t\treturn this._requestToOffice(url);\n\t}\n\n\t/**\n\t * wraps a fetch url with authentication for a request to outlook mailbox rest api\n\t * @param {string} url\n\t * @return {Promise<any>}\n\t * @private\n\t */\n\tasync _requestToOffice(url) {\n\t\tconst accessToken = await this._getAccessToken();\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'get',\n\t\t\theaders: new Headers({\n\t\t\t\t'Authorization': `Bearer ${accessToken}`,\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}),\n\t\t});\n\t\treturn response.json();\n\t}\n\n\t/**\n\t * gets an access token to get data from microsoft rest api\n\t * https://docs.microsoft.com/en-us/office/dev/add-ins/outlook/use-rest-api\n\t * @private\n\t */\n\tasync _getAccessToken() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.Office.context.mailbox.getCallbackTokenAsync({isRest: false}, function (result) {\n\t\t\t\tif (result.status === \"succeeded\") {\n\t\t\t\t\tvar accessToken = result.value;\n\t\t\t\t\tresolve(accessToken);\n\t\t\t\t} else {\n\t\t\t\t\treject(result);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n}\n","import snabbdom from '@servicenow/ui-renderer-snabbdom';\nimport { t } from 'sn-translate';\nimport { createCustomElement, actionTypes } from '@servicenow/ui-core';\nimport { initializeOfficeHelper, getOfficeHelper } from '../office/officeHelper';\nimport { OfficeRestService } from '../office/officeRestService';\nimport { loadOffice } from '../office/officeLoader';\nimport { isEmpty } from 'lodash';\n\nimport { CONSTANTS } from './constants';\nimport { ACTIONS } from './actions';\nimport { actionHandlers } from './actionHandlers'\nimport { view } from './view';\nimport styles from './styles.scss';\nimport { convertToUTC } from '../utils/moaDateTimeUtils';\nimport { getWSDSensitivity } from '../office/officeUtils';\n\n\ninitApp();\n\n/**\n* initial function to start up the app, load officeJs and prepare component\n*/\nasync function initApp() {\n\ttry {\n\t\tawait loadOffice();\n\t\tawait initComponent();\n\t} catch (ex) {\n\t\tconsole.error('Unable to boot up Outlook Addin application', ex);\n\t}\n}\n\n/**\n* initialize application details for this main component.\n* appInitCompleted: indicates that all setting, preloading data are done (or an exception occurred)\n* appInitSuccess: whether the whole initial operation succeeded (fetching setting, config etc...)\n*/\nasync function initComponent() {\n\tinitializeOfficeHelper(window.Office);\n\n\tconst initialAppData = await prepareAppointment();\n\n\tconst { appInitCompleted, appInitSuccess, appointment } = initialAppData;\n\tconst searchRequest = {\n\t\tbuilding: { value: null, displayValue: null },\n\t\tfloors: { value: null, displayValue: [] },\n\t\tcapacity: 1,\n\t\tdefaultReservableModule: { value: null },\n\t\tpageSize: 8\n\t};\n\n\tconst notificationConfig = {\n\t\topened: false,\n\t\theaderLabel: t('Header'),\n\t\tcontent: t('content'),\n\t\tfooterActions: [\n\t\t\t{\n\t\t\t\t'variant': 'primary',\n\t\t\t\t'label': t('OK')\n\t\t\t}\n\t\t]\n\t};\n\n\t// start rendering after Officejs has loaded\n\tcreateCustomElement('sn-wsd-moa-app', {\n\t\trenderer: {type: snabbdom},\n\t\tview,\n\t\tactions: ACTIONS,\n\t\tactionHandlers: actionHandlers,\n\t\tinitialState: {\n\t\t\tsearchRequest,\n\t\t\tappointment,\n\t\t\treservation: null,\n\t\t\treservables: [],\n\t\t\tisSyncableAppointment: false,\n\t\t\tappInitCompleted, // status of application startup\n\t\t\tappInitSuccess, // whether startup finished without any error\n\t\t\tnotificationConfig,\n\t\t\tnowModalStylingApplied: false,\n\t\t\tactiveView: CONSTANTS.VIEWS.SEARCH_FILTER,\n\t\t\tlocationsDetails: {},\n\t\t\tcurrentLocationSysId: null,\n\t\t\tlocationsServiceCategories: {},\n\t\t\tloadReservationServicesTotalCount: 0,\n\t\t\tloadReservationServicesCompletedCount: 0,\n\t\t\tloadReservationServicesFailed: false,\n\t\t\tenableDiagnostic: false,\n\t\t\tuserConfig: null,\n\t\t\tinitSearchRequestWithLocationsCompleted: false\n\t\t},\n\t\tstyles\n\t});\n}\n\n/**\n* preparing appointment data, fetches outlook client data. appInitSuccess default value is `true`\n* @async\n*/\nasync function prepareAppointment() {\n\ttry {\n\t\tconst officeHelper = getOfficeHelper();\n\t\tconst officeRestService = new OfficeRestService(officeHelper);\n\n\t\tawait officeHelper.initializeAppointment();\n\n\t\tconst appointment = await getMeetingServerInfo(officeRestService);\n\n\t\treturn { appInitCompleted: false, appInitSuccess: true, appointment };\n\t} catch (e) {\n\t\tconsole.warn('Exception occurred! Unable to fetch meeting data', e); // retry mechanism needed,.\n\t\treturn { appInitCompleted: true, appInitSuccess: false };\n\t}\n}\n\n/**\n* fetch appointment data from server\n* @param {OfficeRestService} officeRestService\n* @return {Appointment} appointment details\n*/\nasync function getMeetingServerInfo(officeRestService) {\n\tconst office = getOfficeHelper();\n\tconst times = await office.getItemData('start', 'end');\n\tconst start = convertToUTC(times[0]);\n\tconst end = convertToUTC(times[1]);\n\n\tlet appointment = {\n\t\tstart: start,\n\t\tend: end,\n\t\tiCalUId: '',\n\t\tsubject: await office.getSubject(),\n\t\tsensitivity: getWSDSensitivity(),\n\t\ttype: CONSTANTS.RECURRENCE_TYPES.NA\n\t};\n\n\ttry {\n\t\tconst apptResponse = await officeRestService.getFullMeetingInfo();\n\t\tif (!apptResponse || !isEmpty(apptResponse.error)) {\n\t\t\tconsole.error('An error was found in attempting to load full meeting', apptResponse);\n\t\t\treturn appointment;\n\t\t}\n\n\t\tconst recurrence = apptResponse.Recurrence;\n\t\tconst seriesMasterId = apptResponse.SeriesMasterId;\n\t\t\n\t\tappointment = {\n\t\t\t...appointment,\n\t\t\tiCalUId: apptResponse.iCalUId,\n\t\t\trecurrence,\n\t\t\ttype: office.calculateAppointmentType(recurrence, seriesMasterId),\n\t\t\tseriesMasterId,\n\t\t\tsensitivity: getWSDSensitivity(apptResponse.Sensitivity)\n\t\t};\n\t} catch (ex) {\n\t\tconsole.error('Failed to fetch meeting details', ex);\n\t} finally {\n\t\tconsole.debug('Meeting appointment details', appointment);\n\t\treturn appointment;\n\t}\n}\n\n/**\n* meeting/appointment details\n* @typedef Appointment\n* @param {string} start - start time in UTC string\n* @param {string} end - end time in UTC string\n* @param {string} iCalUid - Unique ID of a meeting in Exchange\n* @param {string} seriesMasterId - Unique ID of a series in Exchange in case current meeting is part of a recurring series\n* @param {string} subject - subject\n* @param {string} sensitivity - translated to WSD sensitivity value\n*/","import './sn-wsd-moa-app';\n"],"sourceRoot":""}